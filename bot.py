import os
import time
import logging
import requests
from flask import Flask, request
import telebot
from telebot import types

# –¢–æ–∫–µ–Ω—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.getenv("BOT_TOKEN")
REPLICATE_TOKEN = os.getenv("REPLICATE_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
REPLICATE_MODEL = "aitechtree/nsfw-novel-generation"

bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)
logging.basicConfig(level=logging.INFO)

user_data = {}

categories = {
    "–ü–µ—Ä—Å–æ–Ω–∞–∂–∏": [
        "–†–∏–∞—Å –ì—Ä–µ–º–æ—Ä–∏", "–ê–∫–µ–Ω–æ –•–∏–º–µ–¥–∑–∏–º–∞", "–ö–∞—Ñ–∫–∞", "–ï–æ–ª–∞", "–§—É –°—é–∞–Ω—å", "–ê—è—Å–µ –°–µ–π–∫–æ"
    ],
    "–ü–æ–∑–∞": [
        "–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç", "–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç", "–Ω–∞ –±–æ–∫—É —Å –æ–¥–Ω–æ–π –Ω–æ–≥–æ–π –≤–≤–µ—Ä—Ö", "–ª—ë–∂–∞ –Ω–∞ —Å–ø–∏–Ω–µ —Å —Ä–∞–∑–¥–≤–∏–Ω—É—Ç—ã–º–∏ –Ω–æ–≥–∞–º–∏, —Å–æ–≥–Ω—É—Ç—ã–º–∏ –≤ –∫–æ–ª–µ–Ω—è—Ö", "–º–æ—Å—Ç", "–ø–æ–¥–≤–µ—à–µ–Ω–Ω–∞—è –Ω–∞ –≤–µ—Ä—ë–≤–∫–∞—Ö"
    ],
    "–ò–≥—Ä—É—à–∫–∏": [
        "–¥–∏–ª–¥–æ –∏–∑ –∞–Ω—É—Å–∞ –≤—ã—Ö–æ–¥–∏—Ç –∏–∑–æ —Ä—Ç–∞"
    ],
    "–°—Ü–µ–Ω–∞": [
        "–ª–∏—Ü–æ–º –∫ –∑—Ä–∏—Ç–µ–ª—é", "—Å–ø–∏–Ω–æ–π –∫ –∑—Ä–∏—Ç–µ–ª—é", "–≤–∏–¥ —Å–Ω–∏–∑—É", "–≤–∏–¥ —Å–≤–µ—Ä—Ö—É", "–≤–∏–¥ —Å–±–æ–∫—É", "–±–ª–∏–∂–µ", "–¥–∞–ª—å—à–µ"
    ],
    "–ì–æ–ª–æ–≤–∞": [
        "–∞—Ö–µ–≥–∞–æ", "–ª–∏—Ü–æ –≤ –±–æ–ª–∏", "–ª–∏—Ü–æ –≤ —ç–∫—Å—Ç–∞–∑–µ", "–∑–æ–ª–æ—Ç–∞—è –ø–æ–º–∞–¥–∞"
    ],
    "–§—É—Ä–∏": [
        "–ª–∏—Å–∏—Ü–∞", "–∫—Ä–æ–ª–∏–∫", "–≤–æ–ª—á–∏—Ü–∞"
    ],
    "–û—Ç–≤–µ—Ä—Å—Ç–∏—è": [
        "–∞–Ω–∞–ª", "–≤–∞–≥–∏–Ω–∞", "–æ—Ä–∞–ª—å–Ω—ã–π"
    ],
    "–°–∫–∏–Ω": [
        "–∑–∞–≥–∞—Ä", "–±–ª–µ–¥–Ω–∞—è –∫–æ–∂–∞", "–æ–±—ã—á–Ω–∞—è –∫–æ–∂–∞"
    ],
    "–≠—Ç–Ω–æ—Å": [
        "–∞–∑–∏–∞—Ç–∫–∞", "–µ–≤—Ä–æ–ø–µ–π–∫–∞", "–ª–∞—Ç–∏–Ω–æ–∞–º–µ—Ä–∏–∫–∞–Ω–∫–∞"
    ],
    "–û–¥–µ–∂–¥–∞": [
        "–≥–æ–ª–∞—è", "—Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω–∞—è –æ–¥–µ–∂–¥–∞"
    ]
}

def build_keyboard(user_id, category):
    markup = types.InlineKeyboardMarkup(row_width=2)
    buttons = []
    selected_tags = user_data.get(user_id, {}).get("selected_tags", [])

    for tag in categories[category]:
        check = "‚úÖ" if tag in selected_tags else ""
        buttons.append(types.InlineKeyboardButton(f"{check} {tag}", callback_data=f"tag|{tag}"))

    buttons.append(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"))
    markup.add(*buttons)
    return markup

@bot.message_handler(commands=["start"])
def start_handler(message):
    user_data[message.chat.id] = {"selected_tags": []}
    markup = types.InlineKeyboardMarkup()
    for category in categories:
        markup.add(types.InlineKeyboardButton(category, callback_data=f"cat|{category}"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    user_id = call.message.chat.id
    data = call.data

    if data.startswith("cat|"):
        category = data.split("|")[1]
        bot.edit_message_text("–í—ã–±–µ—Ä–∏ —Ç–µ–≥–∏:", chat_id=user_id, message_id=call.message.message_id,
                              reply_markup=build_keyboard(user_id, category))

    elif data.startswith("tag|"):
        tag = data.split("|")[1]
        selected_tags = user_data[user_id]["selected_tags"]
        if tag in selected_tags:
            selected_tags.remove(tag)
        else:
            selected_tags.append(tag)
        user_data[user_id]["selected_tags"] = selected_tags
        for category, tags in categories.items():
            if tag in tags:
                bot.edit_message_reply_markup(user_id, call.message.message_id, reply_markup=build_keyboard(user_id, category))
                break

    elif data == "back":
        markup = types.InlineKeyboardMarkup()
        for category in categories:
            markup.add(types.InlineKeyboardButton(category, callback_data=f"cat|{category}"))
        markup.add(types.InlineKeyboardButton("üé® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="generate"))
        bot.edit_message_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", chat_id=user_id, message_id=call.message.message_id, reply_markup=markup)

    elif data == "generate":
        selected_tags = user_data[user_id]["selected_tags"]
        prompt = ", ".join(selected_tags)
        prompt += ", nsfw, nude, highly detailed, best quality, realistic skin, no hands covering, no clothes"

        response = requests.post(
            "https://api.replicate.com/v1/predictions",
            headers={
                "Authorization": f"Token {REPLICATE_TOKEN}",
                "Content-Type": "application/json",
            },
            json={
                "version": REPLICATE_MODEL,
                "input": {"prompt": prompt, "width": 512, "height": 768}
            },
        )

        if response.status_code == 200:
            prediction = response.json()
            image_url = prediction["urls"].get("get", "")
            bot.send_message(user_id, "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...")

            for _ in range(30):
                time.sleep(2)
                r = requests.get(image_url, headers={"Authorization": f"Token {REPLICATE_TOKEN}"})
                output = r.json()
                if output["status"] == "succeeded":
                    bot.send_photo(user_id, output["output"][0],
                                   reply_markup=build_post_gen_keyboard(user_id))
                    break
        else:
            bot.send_message(user_id, "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

def build_post_gen_keyboard(user_id):
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start_over"),
        types.InlineKeyboardButton("üéØ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —ç—Ç–∏–º–∏ —Ç–µ–≥–∞–º–∏", callback_data="generate"),
        types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥–∏", callback_data="back"),
    )
    return markup

@app.route("/", methods=["POST"])
def webhook():
    bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))])
    return "ok", 200

if __name__ == "__main__":
    bot.remove_webhook()
    time.sleep(1)
    bot.set_webhook(url=WEBHOOK_URL)
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
