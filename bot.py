import os
import time
import logging
import requests
from flask import Flask, request
from telebot import TeleBot, types

# üîê –¢–æ–∫–µ–Ω—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.getenv("BOT_TOKEN")
REPLICATE_TOKEN = os.getenv("REPLICATE_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
REPLICATE_MODEL = "aitechtree/nsfw-novel-generation"
PORT = int(os.environ.get("PORT", 5000))

bot = TeleBot(BOT_TOKEN)
app = Flask(__name__)
logging.basicConfig(level=logging.INFO)

# üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ–≥–∏
TAG_CATEGORIES = {
    "—Ç–µ–ª–æ": ["–±–æ–ª—å—à–∞—è –≥—Ä—É–¥—å", "–º–∞–ª–µ–Ω—å–∫–∞—è –≥—Ä—É–¥—å", "—á—ë—Ä–Ω–∞—è –∫–æ–∂–∞", "–±–µ–ª–∞—è –∫–æ–∂–∞"],
    "–∏–≥—Ä—É—à–∫–∏": ["–∞–Ω–∞–ª—å–Ω—ã–µ —à–∞—Ä–∏–∫–∏", "–≤–∏–±—Ä–∞—Ç–æ—Ä", "–¥–∏–ª–¥–æ", "–¥–∏–ª–¥–æ –∏–∑ –∞–Ω—É—Å–∞ –≤—ã—Ö–æ–¥–∏—Ç –∏–∑–æ —Ä—Ç–∞"],
    "–æ—Ç–≤–µ—Ä—Å—Ç–∏—è": ["–∞–Ω–∞–ª", "–≤–∞–≥–∏–Ω–∞", "—Ä–æ—Ç"],
    "–ø–æ–∑–∞": ["–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç", "–º–æ—Å—Ç", "–Ω–∞ —Å–ø–∏–Ω–µ", "–Ω–∞ –±–æ–∫—É"],
    "–ø–µ—Ä—Å–æ–Ω–∞–∂–∏": ["–†–∏–∞—Å –ì—Ä–µ–º–æ—Ä–∏", "–ê–∫–µ–Ω–æ –•–∏–º–µ–¥–∑–∏–º–∞", "–ö–∞—Ñ–∫–∞", "–§—É –°—é–∞–Ω—å", "–ï–æ–ª–∞", "–ê—è—Å–µ –°–µ–π–∫–æ"],
    "–≥–æ–ª–æ–≤–∞": ["–∞—Ö–µ–≥–∞–æ", "–ª–∏—Ü–æ –≤ –±–æ–ª–∏", "–ª–∏—Ü–æ –≤ —ç–∫—Å—Ç–∞–∑–µ", "–∑–æ–ª–æ—Ç–∞—è –ø–æ–º–∞–¥–∞"],
    "—Ñ—É—Ä–∏": ["–ª–∏—Å–∏—Ü–∞", "–≤–æ–ª—á–∏—Ü–∞", "–∫—Ä–æ–ª–∏–∫"],
    "—Å—Ü–µ–Ω–∞": ["–ª–∏—Ü–æ–º –∫ –∑—Ä–∏—Ç–µ–ª—é", "—Å–ø–∏–Ω–æ–π –∫ –∑—Ä–∏—Ç–µ–ª—é", "–≤–∏–¥ —Å–Ω–∏–∑—É", "–≤–∏–¥ —Å–≤–µ—Ä—Ö—É", "–≤–∏–¥ —Å–±–æ–∫—É", "–±–ª–∏–∂–µ", "–¥–∞–ª—å—à–µ"],
}

# üî• –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –ø—Ä–æ–º–ø—Ç—ã
ADVANCED_PROMPTS = {
    "–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç": "performing a horizontal side split on the floor, legs fully extended to both sides, hips low to the floor, arms balancing body, viewed from the front",
    "–¥–∏–ª–¥–æ –∏–∑ –∞–Ω—É—Å–∞ –≤—ã—Ö–æ–¥–∏—Ç –∏–∑–æ —Ä—Ç–∞": "extremely long dildo, enters through anus, visibly bulging stomach, exits through mouth, single continuous dildo, realistic texture, anatomically plausible, no x-ray view",
    "–ª–∏—Ü–æ–º –∫ –∑—Ä–∏—Ç–µ–ª—é": "viewed from the front, face visible",
    "—Å–ø–∏–Ω–æ–π –∫ –∑—Ä–∏—Ç–µ–ª—é": "viewed from behind, back and buttocks visible",
    "–≤–∏–¥ —Å–Ω–∏–∑—É": "viewed from below, perspective from beneath the floor, no floor visible",
    "–≤–∏–¥ —Å–≤–µ—Ä—Ö—É": "viewed from above, top-down perspective",
    "–≤–∏–¥ —Å–±–æ–∫—É": "viewed from the side, profile view",
    "–±–ª–∏–∂–µ": "close-up view, upper body possibly cropped, high detail",
    "–¥–∞–ª—å—à–µ": "distant view, full body in frame regardless of pose",
}

# ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ–π –æ–¥–µ–∂–¥—ã
BLOCK_CLOTHING = ["panties", "bra", "bikini", "underwear", "swimsuit", "clothes covering"]

# ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_states = {}

# üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–∞
@bot.message_handler(commands=["start"])
def start_message(message):
    chat_id = message.chat.id
    user_states[chat_id] = {"tags": []}
    bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Ç–µ–≥–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.", reply_markup=build_tag_menu())

# üß© –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–µ–≥–æ–≤
def build_tag_menu():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for category in TAG_CATEGORIES:
        keyboard.add(category)
    keyboard.add("–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", "–û—á–∏—Å—Ç–∏—Ç—å")
    return keyboard

# üè∑ –ö–Ω–æ–ø–∫–∏ —Ç–µ–≥–æ–≤
def build_tags_keyboard(category, selected_tags):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for tag in TAG_CATEGORIES[category]:
        prefix = "‚úÖ " if tag in selected_tags else ""
        keyboard.add(prefix + tag)
    keyboard.add("–ù–∞–∑–∞–¥")
    return keyboard

# üîÅ –õ–æ–≥–∏–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
@bot.message_handler(func=lambda m: True)
def handle_message(message):
    chat_id = message.chat.id
    state = user_states.get(chat_id, {"tags": []})

    if message.text == "–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å":
        generate_image(chat_id, state["tags"])
    elif message.text == "–û—á–∏—Å—Ç–∏—Ç—å":
        user_states[chat_id]["tags"] = []
        bot.send_message(chat_id, "–¢–µ–≥–∏ –æ—á–∏—â–µ–Ω—ã.")
    elif message.text == "–ù–∞–∑–∞–¥":
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=build_tag_menu())
    elif message.text in TAG_CATEGORIES:
        bot.send_message(chat_id, f"–í—ã–±–µ—Ä–∏ —Ç–µ–≥–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{message.text}':", reply_markup=build_tags_keyboard(message.text, state["tags"]))
    else:
        text = message.text.replace("‚úÖ ", "")
        if text in sum(TAG_CATEGORIES.values(), []):
            tags = user_states[chat_id]["tags"]
            if text in tags:
                tags.remove(text)
            else:
                tags.append(text)
            user_states[chat_id]["tags"] = tags
            for cat, values in TAG_CATEGORIES.items():
                if text in values:
                    bot.send_message(chat_id, f"–û–±–Ω–æ–≤–ª–µ–Ω–æ:", reply_markup=build_tags_keyboard(cat, tags))
                    return

# üñº –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def generate_image(chat_id, tags):
    base_prompt = []
    for tag in tags:
        prompt = ADVANCED_PROMPTS.get(tag, tag)
        base_prompt.append(prompt)

    # –£–±–∏—Ä–∞–µ–º —Å–∫—Ä—ã–≤–∞—é—â—É—é –æ–¥–µ–∂–¥—É
    negative_prompt = ", ".join(BLOCK_CLOTHING)

    # –î–æ–±–∞–≤–∏–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π + —Ç–µ–≥–∏
    if any("–†–∏–∞—Å" in t for t in tags):
        base_prompt.append("Rias Gremory, High School DxD, detailed face, red hair, matching appearance")
    if any("–ê–∫–µ–Ω–æ" in t for t in tags):
        base_prompt.append("Akeno Himejima, High School DxD, long black hair, mature face, accurate costume")

    prompt = ", ".join(base_prompt)
    payload = {
        "version": "latest",
        "input": {
            "prompt": prompt,
            "negative_prompt": negative_prompt,
            "width": 512,
            "height": 768,
            "num_outputs": 1
        }
    }

    headers = {
        "Authorization": f"Token {REPLICATE_TOKEN}",
        "Content-Type": "application/json"
    }

    bot.send_message(chat_id, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...")

    response = requests.post(f"https://api.replicate.com/v1/predictions", json=payload, headers=headers)
    prediction = response.json()
    image_url = prediction["output"][0] if "output" in prediction else None

    if image_url:
        bot.send_photo(chat_id, image_url, caption="–í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")
    else:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")

# üåê –í–µ–±—Ö—É–∫ Flask
@app.route(f"/{BOT_TOKEN}", methods=["POST"])
def webhook():
    bot.process_new_updates([types.Update.de_json(request.stream.read().decode("utf-8"))])
    return "ok", 200

@app.route("/")
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç", 200

if __name__ == "__main__":
    bot.remove_webhook()
    time.sleep(1)
    bot.set_webhook(url=f"{WEBHOOK_URL}/{BOT_TOKEN}")
    app.run(host="0.0.0.0", port=PORT)