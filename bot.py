import os
import time
import requests
from flask import Flask, request
import telebot
from telebot import types

API_TOKEN = os.getenv("TELEGRAM_TOKEN")
REPLICATE_TOKEN = os.getenv("REPLICATE_API_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.environ.get("PORT", 5000))

REPLICATE_MODEL = "c1d5b02687df6081c7953c74bcc527858702e8c153c9382012ccc3906752d3ec"

bot = telebot.TeleBot(API_TOKEN)
app = Flask(__name__)
user_settings = {}

CATEGORY_NAMES = {
    "holes": "–û—Ç–≤–µ—Ä—Å—Ç–∏—è",
    "toys": "–ò–≥—Ä—É—à–∫–∏",
    "poses": "–ü–æ–∑—ã",
    "clothes": "–û–¥–µ–∂–¥–∞",
    "body": "–¢–µ–ª–æ",
    "ethnos": "–≠—Ç–Ω–æ—Å",
    "furry": "–§—É—Ä–∏",
    "characters": "–ü–µ—Ä—Å–æ–Ω–∞–∂–∏",
    "head": "–ì–æ–ª–æ–≤–∞",
    "view": "–û–±–∑–æ—Ä"
}

TAGS = {
    "holes": {
        "vagina": "–í–∞–≥–∏–Ω–∞",
        "anal": "–ê–Ω—É—Å",
        "both": "–í–∞–≥–∏–Ω–∞ –∏ –∞–Ω—É—Å"
    },
    "toys": {
        "dildo": "–î–∏–ª–¥–æ",
        "huge_dildo": "–ë–æ–ª—å—à–æ–µ –¥–∏–ª–¥–æ",
        "horse_dildo": "–õ–æ—à–∞–¥–∏–Ω–æ–µ –¥–∏–ª–¥–æ",
        "anal_beads": "–ê–Ω–∞–ª—å–Ω—ã–µ –±—É—Å—ã",
        "anal_plug": "–ê–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–±–∫–∞",
        "anal_expander": "–ê–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—à–∏—Ä–∏—Ç–µ–ª—å",
        "gag": "–ö–ª—è–ø",
        "piercing": "–ü–∏—Ä—Å–∏–Ω–≥",
        "long_dildo_path": "–î–∏–ª–¥–æ –∏–∑ –∞–Ω—É—Å–∞ –≤—ã—Ö–æ–¥–∏—Ç –∏–∑–æ —Ä—Ç–∞"
    },
    "poses": {
        "doggy": "–ù–∞–µ–∑–¥–Ω–∏—Ü–∞ (–¥–æ–≥–≥–∏-—Å—Ç–∞–π–ª)",
        "standing": "–°—Ç–æ—è",
        "splits": "–®–ø–∞–≥–∞—Ç",
        "squat": "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏–µ",
        "lying": "–õ–µ–∂–∞",
        "hor_split": "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç",
        "ver_split": "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç",
        "side_up_leg": "–ù–∞ –±–æ–∫—É —Å –ø–æ–¥–Ω—è—Ç–æ–π –Ω–æ–≥–æ–π",
        "front_facing": "–õ–∏—Ü–æ–º –∫ –∑—Ä–∏—Ç–µ–ª—é",
        "back_facing": "–°–ø–∏–Ω–æ–π –∫ –∑—Ä–∏—Ç–µ–ª—é",
        "lying_knees_up": "–õ–µ–∂–∞ —Å —Å–æ–≥–Ω—É—Ç—ã–º–∏ –∫–æ–ª–µ–Ω—è–º–∏",
        "bridge": "–ú–æ—Å—Ç",
        "suspended": "–ü–æ–¥–≤–µ—à–µ–Ω–∞"
    },
    "clothes": {
        "stockings": "–ß—É–ª–∫–∏",
        "bikini_tan_lines": "–ó–∞–≥–∞—Ä –æ—Ç –±–∏–∫–∏–Ω–∏",
        "mask": "–ú–∞—Å–∫–∞",
        "heels": "–ö–∞–±–ª—É–∫–∏",
        "shibari": "–®–∏–±–∞—Ä–∏"
    },
    "body": {
        "big_breasts": "–ë–æ–ª—å—à–∞—è –≥—Ä—É–¥—å",
        "small_breasts": "–ú–∞–ª–µ–Ω—å–∫–∞—è –≥—Ä—É–¥—å",
        "skin_white": "–ë–µ–ª–∞—è –∫–æ–∂–∞",
        "skin_black": "–ß—ë—Ä–Ω–∞—è –∫–æ–∂–∞",
        "body_fat": "–ü—ã—à–Ω–æ–µ —Ç–µ–ª–æ",
        "body_thin": "–•—É–¥–æ–µ —Ç–µ–ª–æ",
        "body_normal": "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ç–µ–ª–æ",
        "body_fit": "–ü–æ–¥—Ç—è–Ω—É—Ç–æ–µ —Ç–µ–ª–æ",
        "body_muscular": "–ú—É—Å–∫—É–ª–∏—Å—Ç–æ–µ —Ç–µ–ª–æ",
        "age_loli": "–õ–æ–ª–∏",
        "age_milf": "–ú–∏–ª—Ñ–∞",
        "age_21": "–í–æ–∑—Ä–∞—Å—Ç 21",
        "cum": "–í—Å—è –≤ —Å–ø–µ—Ä–º–µ",
        "belly_bloat": "–í–∑–¥—É—Ç–∏–µ –∂–∏–≤–æ—Ç–∞",
        "succubus_tattoo": "–¢–∞—Ç—É –≤–Ω–∏–∑—É –∂–∏–≤–æ—Ç–∞"
    },
    "ethnos": {
        "futanari": "–§—É—Ç–∞–Ω–∞—Ä–∏",
        "femboy": "–§–µ–º–±–æ–π",
        "ethnicity_asian": "–ê–∑–∏–∞—Ç–∫–∞",
        "ethnicity_european": "–ï–≤—Ä–æ–ø–µ–π–∫–∞"
    },
    "furry": {
        "furry_cow": "–§—É—Ä–∏ –∫–æ—Ä–æ–≤–∞",
        "furry_cat": "–§—É—Ä–∏ –∫–æ—à–∫–∞",
        "furry_dog": "–§—É—Ä–∏ —Å–æ–±–∞–∫–∞",
        "furry_dragon": "–§—É—Ä–∏ –¥—Ä–∞–∫–æ–Ω",
        "furry_sylveon": "–§—É—Ä–∏ —Å–∏–ª—å–≤–µ–æ–Ω",
        "furry_fox": "–§—É—Ä–∏ –ª–∏—Å–∏—Ü–∞",
        "furry_bunny": "–§—É—Ä–∏ –∫—Ä–æ–ª–∏–∫",
        "furry_wolf": "–§—É—Ä–∏ –≤–æ–ª—á–∏—Ü–∞"
    },
    "characters": {
        "rias": "–†–∏–∞—Å –ì—Ä–µ–º–æ—Ä–∏",
        "akeno": "–ê–∫–µ–Ω–æ –•–∏–º–µ–¥–∑–∏–º–∞",
        "kafka": "–ö–∞—Ñ–∫–∞ (–•–æ–Ω–∫–∞–π)",
        "eula": "–ï–æ–ª–∞ (–ì–µ–Ω—à–∏–Ω)",
        "fu_xuan": "–§—É –°—é–∞–Ω—å (–•–æ–Ω–∫–∞–π)",
        "ayase": "–ê—è—Å–µ –°–µ–π–∫–æ"
    },
    "head": {
        "ahegao": "–ê—Ö–µ–≥–∞–æ",
        "pain_face": "–õ–∏—Ü–æ –≤ –±–æ–ª–∏",
        "ecstasy_face": "–õ–∏—Ü–æ –≤ —ç–∫—Å—Ç–∞–∑–µ",
        "gold_lipstick": "–ó–æ–ª–æ—Ç–∞—è –ø–æ–º–∞–¥–∞"
    },
    "view": {
        "view_below": "–°–Ω–∏–∑—É",
        "view_above": "–°–≤–µ—Ä—Ö—É",
        "view_side": "–°–±–æ–∫—É",
        "view_far": "–î–∞–ª—å—à–µ",
        "view_close": "–ë–ª–∏–∂–µ"
    }
}

CHARACTER_EXTRA = {
    "rias": "red long hair, blue eyes, pale skin, large breasts, rias gremory, highschool dxd",
    "akeno": "long black hair, purple eyes, large breasts, akeno himejima, highschool dxd",
    "kafka": "purple wavy hair, cold expression, kafka, honkai star rail",
    "eula": "light blue hair, fair skin, eula, genshin impact",
    "fu_xuan": "pink hair, fu xuan, honkai star rail",
    "ayase": "black hair, school uniform, ayase seiko"
}

# –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø—Ä–æ–º—Ç—ã, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Ä—É–∫–∏ —Å –≥—Ä—É–¥–∏ –∏ —É—Å–∏–ª–∏—Ç—å –ø–æ–∑—ã (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç)

TAG_PROMPTS = {
    **CHARACTER_EXTRA,
    "vagina": "spread pussy, fully visible, no obstruction",
    "anal": "spread anus, fully visible, no obstruction",
    "both": "spread pussy and anus, fully visible, no obstruction",
    "dildo": "dildo inserted, fully visible, no hands or objects covering body parts",
    "huge_dildo": "huge dildo, fully visible, no obstruction",
    "horse_dildo": "horse dildo, fully visible",
    "anal_beads": "anal beads inserted, no obstruction",
    "anal_plug": "anal plug, fully visible",
    "anal_expander": "anal expander stretching anus, no hands covering",
    "gag": "ball gag on mouth",
    "piercing": "nipple and genital piercings fully visible",
    "long_dildo_path": (
        "dildo inserted into anus, pushing visibly through intestines with clear belly bulge, "
        "exiting from mouth, seamless and continuous dildo, consistent texture, realistic rubber, no hands"
    ),
    "doggy": "doggy style pose, no hands covering breasts or genitals",
    "standing": "standing pose, no hands on chest",
    "splits": "doing a split, legs fully extended, no obstruction, no hands on chest",
    "hor_split": (
        "horizontal split, legs stretched fully to sides, pelvis on floor, thighs spread open, "
        "inner thighs visible, high detail, legs flat on floor, no legs raised, no hands on chest"
    ),
    "ver_split": (
        "vertical split, legs straight up and down, fully visible, no obstruction, no hands on chest"
    ),
    "side_up_leg": "on side with leg raised, no hands on chest",
    "front_facing": "facing viewer, no hands on chest",
    "back_facing": "back to viewer, no hands on chest",
    "lying_knees_up": "legs up, knees bent, no hands on chest",
    "bridge": "arched back bridge pose, no hands covering body",
    "suspended": "suspended by ropes, no hands covering chest",
    "stockings": "wearing stockings only, no obstruction",
    "mask": "mask on face",
    "heels": "high heels with red soles",
    "shibari": "shibari ropes, no hands covering chest",
    "big_breasts": "very large breasts, fully visible, no hands covering",
    "small_breasts": "small breasts, fully visible",
    "skin_white": "white skin",
    "skin_black": "black skin",
    "body_fat": "curvy body",
    "body_thin": "thin body",
    "body_normal": "average body",
    "body_fit": "fit body",
    "body_muscular": "muscular body",
    "age_loli": "loli girl, fully visible",
    "age_milf": "milf woman, fully visible",
    "age_21": "age 21",
    "cum": "cum covered, visible",
    "belly_bloat": "belly bulge from toy, visible",
    "succubus_tattoo": "succubus tattoo on lower abdomen",
    "futanari": "futanari girl with large breasts, no hands covering body",
    "femboy": "femboy with feminine body",
    "ethnicity_asian": "asian girl",
    "ethnicity_european": "european girl",
    "furry_cow": "furry cow girl, no hands covering",
    "furry_cat": "furry cat girl, no hands covering",
    "furry_dog": "furry dog girl, no hands covering",
    "furry_dragon": "furry dragon girl, no hands covering",
    "furry_sylveon": "furry sylveon, pink, ribbons, sexy, no hands covering",
    "furry_fox": "furry fox girl, no hands covering",
    "furry_bunny": "furry bunny girl, no hands covering",
    "furry_wolf": "furry wolf girl, no hands covering",
    "ahegao": "ahegao face",
    "pain_face": "face in pain",
    "ecstasy_face": "face in ecstasy",
    "gold_lipstick": "gold lipstick on lips only",
    "view_below": "viewpoint from below, showing body pressed against surface, no obstruction",
    "view_above": "viewpoint from above, full body visible",
    "view_side": "side view of full body",
    "view_far": "full body visible from distance, no clipping",
    "view_close": "close up view, partial body visible, no obstruction"
}

def main_menu():
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üß© –í—ã–±—Ä–∞—Ç—å —Ç–µ–≥–∏", callback_data="choose_tags"))
    kb.add(types.InlineKeyboardButton("üé® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="generate"))
    return kb

def category_menu():
    kb = types.InlineKeyboardMarkup(row_width=2)
    for key, name in CATEGORY_NAMES.items():
        kb.add(types.InlineKeyboardButton(name, callback_data=f"cat_{key}"))
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back"))
    return kb

def tags_menu(category, user_id):
    kb = types.InlineKeyboardMarkup(row_width=2)
    selected = user_settings.get(user_id, {}).get("tags", [])
    for tag, desc in TAGS[category].items():
        text = f"{desc}"
        if tag in selected:
            text = "‚úÖ " + text
        kb.add(types.InlineKeyboardButton(text, callback_data=f"tag_{tag}"))
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_cat"))
    kb.add(types.InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="done_tags"))
    return kb

def build_prompt(user_id):
    tags = user_settings.get(user_id, {}).get("tags", [])
    prompt_parts = []

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    for tag in tags:
        if tag in CHARACTER_EXTRA:
            prompt_parts.append(CHARACTER_EXTRA[tag])
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏
    for tag in tags:
        if tag in TAG_PROMPTS and tag not in CHARACTER_EXTRA:
            prompt_parts.append(TAG_PROMPTS[tag])

    # –£–±–∏—Ä–∞–µ–º —Ä—É–∫–∏ —Å –≥—Ä—É–¥–∏/—Å–æ—Å–∫–æ–≤ ‚Äî –≤—Å–µ–≥–¥–∞
    prompt_parts.append("no hands covering breasts or nipples or genitals")

    prompt = ", ".join(prompt_parts)
    return prompt

def generate_image(prompt):
    headers = {
        "Authorization": f"Token {REPLICATE_TOKEN}",
        "Content-Type": "application/json"
    }
    data = {
        "version": REPLICATE_MODEL,
        "input": {
            "prompt": prompt,
            "num_inference_steps": 50,
            "guidance_scale": 7.5
        }
    }
    response = requests.post("https://api.replicate.com/v1/predictions", headers=headers, json=data)
    if response.status_code != 201:
        return None, f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {response.status_code} {response.text}"
    prediction = response.json()
    prediction_url = f"https://api.replicate.com/v1/predictions/{prediction['id']}"

    # –ñ–¥—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    for _ in range(60):
        time.sleep(1)
        r = requests.get(prediction_url, headers=headers)
        rj = r.json()
        if rj.get("status") == "succeeded":
            image_url = rj["output"][0]
            return image_url, None
        if rj.get("status") == "failed":
            return None, "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: –º–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –æ—à–∏–±–∫—É"
    return None, "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ"

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    user_id = message.from_user.id
    if user_id not in user_settings:
        user_settings[user_id] = {"tags": []}
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.", reply_markup=main_menu())

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    user_id = call.from_user.id

    if call.data == "choose_tags":
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–µ–≥–æ–≤:", call.message.chat.id, call.message.message_id, reply_markup=category_menu())
    elif call.data.startswith("cat_"):
        cat = call.data[4:]
        if cat in TAGS:
            bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {CATEGORY_NAMES[cat]}:", call.message.chat.id, call.message.message_id, reply_markup=tags_menu(cat, user_id))
        else:
            bot.answer_callback_query(call.id, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    elif call.data.startswith("tag_"):
        tag = call.data[4:]
        settings = user_settings.setdefault(user_id, {"tags": []})
        if tag in settings["tags"]:
            settings["tags"].remove(tag)
        else:
            settings["tags"].append(tag)
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Ç–µ–≥–æ–≤ –≤ —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for cat_key, cat_tags in TAGS.items():
            if tag in cat_tags:
                bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=tags_menu(cat_key, user_id))
                break
        bot.answer_callback_query(call.id)
    elif call.data == "done_tags":
        tags = user_settings.get(user_id, {}).get("tags", [])
        tags_list = ", ".join([TAGS[cat].get(tag, tag) for cat in TAGS for tag in tags if tag in TAGS[cat]])
        bot.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–≥–∏:\n{tags_list}", call.message.chat.id, call.message.message_id, reply_markup=main_menu())
    elif call.data == "generate":
        tags = user_settings.get(user_id, {}).get("tags", [])
        if not tags:
            bot.answer_callback_query(call.id, "–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–≥–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
            return
        bot.edit_message_text("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", call.message.chat.id, call.message.message_id)
        prompt = build_prompt(user_id)
        image_url, err = generate_image(prompt)
        if err:
            bot.send_message(call.message.chat.id, err)
        else:
            bot.send_photo(call.message.chat.id, image_url, caption=f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ —Ç–µ–≥–∞–º:\n{prompt}")
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())
    elif call.data == "back":
        bot.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", call.message.chat.id, call.message.message_id, reply_markup=main_menu())
    elif call.data == "back_to_cat":
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–µ–≥–æ–≤:", call.message.chat.id, call.message.message_id, reply_markup=category_menu())
    else:
        bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

@app.route('/', methods=['POST'])
def webhook():
    json_str = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "OK", 200

def set_webhook():
    bot.remove_webhook()
    time.sleep(1)
    bot.set_webhook(url=WEBHOOK_URL)

if __name__ == '__main__':
    set_webhook()
    app.run(host='0.0.0.0', port=PORT)