import os
import json
import logging
import requests
from flask import Flask, request
from telebot import TeleBot, types

# üîê –¢–æ–∫–µ–Ω—ã
BOT_TOKEN = os.getenv("BOT_TOKEN")
REPLICATE_TOKEN = os.getenv("REPLICATE_TOKEN")
REPLICATE_MODEL = "aitechtree/nsfw-novel-generation"

bot = TeleBot(BOT_TOKEN)
app = Flask(__name__)
logging.basicConfig(level=logging.INFO)

# üìÅ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
user_states = {}
categories = {
    "–ø–æ–∑—ã": ["–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç", "–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç", "–º–æ—Å—Ç", "–ø–æ–¥–≤–µ—à–µ–Ω–Ω–∞—è"],
    "–∏–≥—Ä—É—à–∫–∏": ["–¥–∏–ª–¥–æ", "–∞–Ω–∞–ª—å–Ω—ã–µ –±—É—Å—ã", "—Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –∞–Ω—É—Å–∞"],
    "—Ç–µ–ª–æ": ["–ª–æ–ª–∏", "–º–∏–ª—Ñ–∞", "—Ö—É–¥–æ–µ", "–ø—ã—à–Ω–æ–µ", "–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ"],
    "—ç—Ç–Ω–æ—Å": ["–∞–∑–∏–∞—Ç–∫–∞", "–µ–≤—Ä–æ–ø–µ–π–∫–∞", "—Ñ–µ–º–±–æ–π", "—Ñ—É—Ç–∞–Ω–∞—Ä–∏"],
    "–∫–æ–∂–∞": ["—á—ë—Ä–Ω–∞—è –∫–æ–∂–∞", "–±–µ–ª–∞—è –∫–æ–∂–∞", "–∑–∞–≥–∞—Ä –æ—Ç –±–∏–∫–∏–Ω–∏"],
    "—Ñ—É—Ä–∏": ["—Ñ—É—Ä–∏-–∫–æ—à–∫–∞", "—Ñ—É—Ä–∏-—Å–æ–±–∞–∫–∞", "—Ñ—É—Ä–∏-—Å–∏–ª—å–≤–µ–æ–Ω"],
    "–æ—Å–æ–±–æ–µ": ["—Ç–∞—Ç—É —Å—É–∫—É–±–∞", "–∫–æ—Å—Ç—é–º –∫–æ—Ä–æ–≤—ã"]
}
tag_prompts = {
    "–¥–∏–ª–¥–æ": "dildo in anus, visible through mouth",
    "—Ç–∞—Ç—É —Å—É–∫—É–±–∞": "heart tattoo on womb area, no wings, no horns, no tail",
    "–∑–∞–≥–∞—Ä –æ—Ç –±–∏–∫–∏–Ω–∏": "dark tan lines on skin without bikini",
    "–∫–æ—Å—Ç—é–º –∫–æ—Ä–æ–≤—ã": "girl in cow-patterned stockings with horns and tail, no bull, no actual cow",
    "—Ñ—É—Ä–∏-—Å–∏–ª—å–≤–µ–æ–Ω": "anthro sylveon style girl, pastel colors, detailed"
}

# üß† –°–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ç–µ–≥–æ–≤
def get_user_tags(user_id):
    return user_states.setdefault(user_id, {"tags": [], "category": None})["tags"]

# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ /start
@bot.message_handler(commands=["start"])
def start_handler(message):
    user_states[message.chat.id] = {"tags": [], "category": None}
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üß© –í—ã–±—Ä–∞—Ç—å —Ç–µ–≥–∏", "üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å")
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# üß© –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–æ–≤
@bot.message_handler(func=lambda msg: msg.text == "üß© –í—ã–±—Ä–∞—Ç—å —Ç–µ–≥–∏")
def choose_category_handler(message):
    markup = types.InlineKeyboardMarkup()
    for category in categories.keys():
        markup.add(types.InlineKeyboardButton(category, callback_data=f"cat:{category}"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)

# üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è
@bot.message_handler(func=lambda msg: msg.text == "üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å")
def generate_handler(message):
    user_id = message.chat.id
    tags = get_user_tags(user_id)
    prompt_parts = []
    for tag in tags:
        prompt_parts.append(tag_prompts.get(tag, tag))
    prompt = ", ".join(prompt_parts) + ", 1girl, nsfw, anime style"
    bot.send_message(user_id, f"üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Ç–µ–≥–∞–º:\n\n{', '.join(tags)}")

    response = requests.post(
        "https://api.replicate.com/v1/predictions",
        headers={"Authorization": f"Token {REPLICATE_TOKEN}", "Content-Type": "application/json"},
        json={"version": "8f606c0d...", "input": {"prompt": prompt}}
    )
    output_url = response.json().get("urls", {}).get("get")
    if output_url:
        for _ in range(30):
            r = requests.get(output_url, headers={"Authorization": f"Token {REPLICATE_TOKEN}"})
            out = r.json()
            if out.get("status") == "succeeded":
                img_url = out["output"][0]
                bot.send_photo(user_id, img_url, caption="‚úÖ –ì–æ—Ç–æ–≤–æ!")
                break
    else:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")

# üîò –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: call.data.startswith("cat:"))
def category_selected(call):
    category = call.data.split(":")[1]
    user_states[call.message.chat.id]["category"] = category
    markup = types.InlineKeyboardMarkup(row_width=2)
    for tag in categories[category]:
        user_tags = get_user_tags(call.message.chat.id)
        is_selected = tag in user_tags
        btn_text = f"‚úÖ {tag}" if is_selected else tag
        markup.add(types.InlineKeyboardButton(btn_text, callback_data=f"tag:{tag}"))
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"))
    bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}:", call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("tag:"))
def tag_selected(call):
    tag = call.data.split(":")[1]
    user_id = call.message.chat.id
    tags = get_user_tags(user_id)
    if tag in tags:
        tags.remove(tag)
    else:
        tags.append(tag)
    category = user_states[user_id]["category"]
    markup = types.InlineKeyboardMarkup(row_width=2)
    for tag_item in categories[category]:
        is_selected = tag_item in tags
        btn_text = f"‚úÖ {tag_item}" if is_selected else tag_item
        markup.add(types.InlineKeyboardButton(btn_text, callback_data=f"tag:{tag_item}"))
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"))
    bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}:", user_id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "back")
def back_to_categories(call):
    choose_category_handler(call.message)

# üåê Webhook endpoint
@app.route(f"/{BOT_TOKEN}", methods=["POST"])
def webhook():
    update = request.stream.read().decode("utf-8")
    bot.process_new_updates([types.Update.de_json(update)])
    return "ok", 200

@app.route("/", methods=["GET"])
def index():
    return "Bot is running", 200

# üöÄ –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url=f"https://retete.onrender.com/{BOT_TOKEN}")
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))