import os
import time
import requests
from flask import Flask, request
import telebot
from telebot import types

API_TOKEN = os.getenv("TELEGRAM_TOKEN")
REPLICATE_TOKEN = os.getenv("REPLICATE_API_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.environ.get("PORT", 5000))

REPLICATE_MODEL = "c1d5b02687df6081c7953c74bcc527858702e8c153c9382012ccc3906752d3ec"

bot = telebot.TeleBot(API_TOKEN)
app = Flask(__name__)
user_settings = {}

# –¢–µ–≥–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º, –∫–ª—é—á–∏ - –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∏–º–µ–Ω–∞, –∑–Ω–∞—á–µ–Ω–∏—è - —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
TAGS = {
    "holes": {
        "vagina": "–í–∞–≥–∏–Ω–∞",
        "anal": "–ê–Ω—É—Å",
        "both": "–í–∞–≥–∏–Ω–∞ –∏ –∞–Ω—É—Å"
    },
    "toys": {
        "dildo": "–î–∏–ª–¥–æ",
        "huge_dildo": "–ë–æ–ª—å—à–æ–µ –¥–∏–ª–¥–æ",
        "horse_dildo": "–õ–æ—à–∞–¥–∏–Ω–æ–µ –¥–∏–ª–¥–æ",
        "anal_beads": "–ê–Ω–∞–ª—å–Ω—ã–µ –±—É—Å—ã",
        "anal_plug": "–ê–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–±–∫–∞",
        "anal_expander": "–ê–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—à–∏—Ä–∏—Ç–µ–ª—å",
        "gag": "–ö–ª—è–ø",
        "piercing": "–ü–∏—Ä—Å–∏–Ω–≥"
    },
    "poses": {
        "doggy": "–ù–∞–µ–∑–¥–Ω–∏—Ü–∞ (–¥–æ–≥–≥–∏-—Å—Ç–∞–π–ª)",
        "standing": "–°—Ç–æ—è",
        "splits": "–®–ø–∞–≥–∞—Ç",
        "squat": "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏–µ",
        "lying": "–õ–µ–∂–∞",
        "hor_split": "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç",
        "ver_split": "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç",
        "side_up_leg": "–ù–∞ –±–æ–∫—É —Å –ø–æ–¥–Ω—è—Ç–æ–π –Ω–æ–≥–æ–π",
        "front_facing": "–õ–∏—Ü–æ–º –∫ –∑—Ä–∏—Ç–µ–ª—é",
        "back_facing": "–°–ø–∏–Ω–æ–π –∫ –∑—Ä–∏—Ç–µ–ª—é",
        "lying_knees_up": "–õ–µ–∂–∞ —Å —Ä–∞–∑–¥–≤–∏–Ω—É—Ç—ã–º–∏ —Å–æ–≥–Ω—É—Ç—ã–º–∏ –∫–æ–ª–µ–Ω—è–º–∏",
        "bridge": "–ú–æ—Å—Ç",
        "suspended": "–ü–æ–¥–≤–µ—à–µ–Ω–∞ –Ω–∞ –≤–µ—Ä—ë–≤–∫–∞—Ö"
    },
    "clothes": {
        "stockings": "–ß—É–ª–∫–∏",
        "bikini_tan_lines": "–ó–∞–≥–∞—Ä –æ—Ç –±–∏–∫–∏–Ω–∏",
        "mask": "–ú–∞—Å–∫–∞",
        "heels": "–¢—É—Ñ–ª–∏ –Ω–∞ –∫–∞–±–ª—É–∫–∞—Ö",
        "shibari": "–®–∏–±–∞—Ä–∏",
        "cow_costume": "–ö–æ—Å—Ç—é–º –∫–æ—Ä–æ–≤—ã"
    },
    "body": {
        "big_breasts": "–ë–æ–ª—å—à–∞—è –≥—Ä—É–¥—å",
        "small_breasts": "–ú–∞–ª–µ–Ω—å–∫–∞—è –≥—Ä—É–¥—å",
        "skin_white": "–ë–µ–ª–∞—è –∫–æ–∂–∞",
        "skin_black": "–ß—ë—Ä–Ω–∞—è –∫–æ–∂–∞",
        "body_fat": "–ü—ã—à–Ω–æ–µ —Ç–µ–ª–æ",
        "body_thin": "–•—É–¥–æ–µ —Ç–µ–ª–æ",
        "body_normal": "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ",
        "body_fit": "–ü–æ–¥—Ç—è–Ω—É—Ç–æ–µ —Ç–µ–ª–æ",
        "body_muscular": "–ú—É—Å–∫—É–ª–∏—Å—Ç–æ–µ —Ç–µ–ª–æ",
        "age_loli": "–õ–æ–ª–∏",
        "age_milf": "–ú–∏–ª—Ñ–∞",
        "age_21": "–í–æ–∑—Ä–∞—Å—Ç 21 –≥–æ–¥",
        "cum": "–í—Å—è –≤ —Å–ø–µ—Ä–º–µ",
        "belly_bloat": "–í–∑–¥—É—Ç–∏–µ –∂–∏–≤–æ—Ç–∞ –æ—Ç –∏–≥—Ä—É—à–∫–∏",
        "long_dildo_path": "–î–∏–ª–¥–æ —á–µ—Ä–µ–∑ –∞–Ω—É—Å –≤—ã—Ö–æ–¥–∏—Ç –∏–∑–æ —Ä—Ç–∞",
        "succubus_tattoo": "–¢–∞—Ç—É —Å–µ—Ä–¥–µ—á–∫–æ –Ω–∞ –∫–æ–∂–µ –≤ –æ–±–ª–∞—Å—Ç–∏ –º–∞—Ç–∫–∏"
    },
    "ethnos": {
        "futanari": "–§—É—Ç–∞–Ω–∞—Ä–∏",
        "femboy": "–§–µ–º–±–æ–π",
        "ethnicity_asian": "–ê–∑–∏–∞—Ç–∫–∞",
        "ethnicity_european": "–ï–≤—Ä–æ–ø–µ–π–∫–∞"
    },
    "furry": {
        "furry_cow": "–§—É—Ä–∏ –∫–æ—Ä–æ–≤–∞",
        "furry_cat": "–§—É—Ä–∏ –∫–æ—à–∫–∞",
        "furry_dog": "–§—É—Ä–∏ —Å–æ–±–∞–∫–∞",
        "furry_dragon": "–§—É—Ä–∏ –¥—Ä–∞–∫–æ–Ω",
        "furry_sylveon": "–§—É—Ä–∏ –°–∏–ª—å–≤–µ–æ–Ω",
        "furry_fox": "–§—É—Ä–∏ –ª–∏—Å–∏—Ü–∞",
        "furry_rabbit": "–§—É—Ä–∏ –∫—Ä–æ–ª–∏–∫",
        "furry_wolf": "–§—É—Ä–∏ –≤–æ–ª—á–∏—Ü–∞"
    },
    "characters": {
        "rias_gremory": "–†–∏–∞—Å –ì—Ä–µ–º–æ—Ä–∏",
        "akeno_himejima": "–ê–∫–µ–Ω–æ –•–∏–º–µ–¥–∑–∏–º–∞"
    },
    "head": {
        "ahegao": "–ê—Ö–µ–≥–∞–æ",
        "pain_face": "–õ–∏—Ü–æ —Å–∫—Ä–∏–≤–∏–≤—à–µ–µ—Å—è –æ—Ç –±–æ–ª–∏",
        "ecstasy_face": "–õ–∏—Ü–æ –≤ —ç–∫—Å—Ç–∞–∑–µ",
        "gold_lipstick": "–ó–æ–ª–æ—Ç–∞—è –ø–æ–º–∞–¥–∞ –¥–ª—è –≥—É–±"
    }
}

CATEGORY_NAMES = {
    "holes": "–û—Ç–≤–µ—Ä—Å—Ç–∏—è",
    "toys": "–ò–≥—Ä—É—à–∫–∏",
    "poses": "–ü–æ–∑—ã",
    "clothes": "–û–¥–µ–∂–¥–∞",
    "body": "–¢–µ–ª–æ",
    "ethnos": "–≠—Ç–Ω–æ—Å",
    "furry": "–§—É—Ä–∏",
    "characters": "–ü–µ—Ä—Å–æ–Ω–∞–∂–∏",
    "head": "–ì–æ–ª–æ–≤–∞"
}

TAG_PROMPTS = {
    # –æ—Ç–≤–µ—Ä—Å—Ç–∏—è
    "vagina": "–æ—Ç–∫—Ä—ã—Ç–∞—è –≤–∞–≥–∏–Ω–∞",
    "anal": "–æ—Ç–∫—Ä—ã—Ç—ã–π –∞–Ω—É—Å",
    "both": "–æ—Ç–∫—Ä—ã—Ç—ã–π –∞–Ω—É—Å –∏ –≤–∞–≥–∏–Ω–∞",
    # –∏–≥—Ä—É—à–∫–∏
    "dildo": "–¥–∏–ª–¥–æ –≤–Ω—É—Ç—Ä–∏ –≤–∞–≥–∏–Ω—ã –∏ –∞–Ω—É—Å–∞",
    "huge_dildo": "–æ–≥—Ä–æ–º–Ω–æ–µ –¥–∏–ª–¥–æ –≤ –æ–±–æ–∏—Ö –æ—Ç–≤–µ—Ä—Å—Ç–∏—è—Ö",
    "horse_dildo": "–ª–æ—à–∞–¥–∏–Ω–æ–µ –¥–∏–ª–¥–æ –≤ –≤–∞–≥–∏–Ω–µ –∏ –∞–Ω—É—Å–µ",
    "anal_beads": "–∞–Ω–∞–ª—å–Ω—ã–µ –±—É—Å—ã –≤–Ω—É—Ç—Ä–∏ –∞–Ω—É—Å–∞",
    "anal_plug": "–∞–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–±–∫–∞",
    "anal_expander": "–∞–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—à–∏—Ä–∏—Ç–µ–ª—å, —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç –∞–Ω—É—Å",
    "gag": "–∫–ª—è–ø-—à–∞—Ä",
    "piercing": "–ø–∏—Ä—Å–∏–Ω–≥ –Ω–∞ —Å–æ—Å–∫–∞—Ö –∏ –≥–µ–Ω–∏—Ç–∞–ª–∏—è—Ö",
    # –ø–æ–∑—ã
    "doggy": "–ø–æ–∑–∞ –Ω–∞–µ–∑–¥–Ω–∏—Ü—ã (–¥–æ–≥–≥–∏-—Å—Ç–∞–π–ª)",
    "standing": "—Å—Ç–æ—è",
    "splits": "—à–ø–∞–≥–∞—Ç",
    "squat": "–ø—Ä–∏—Å–µ–¥–∞–Ω–∏–µ",
    "lying": "–ª–µ–∂–∞ –Ω–∞ —Å–ø–∏–Ω–µ",
    "hor_split": "–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç",
    "ver_split": "–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç",
    "side_up_leg": "–Ω–∞ –±–æ–∫—É —Å –ø–æ–¥–Ω—è—Ç–æ–π –Ω–æ–≥–æ–π",
    "front_facing": "–ª–∏—Ü–æ–º –∫ –∑—Ä–∏—Ç–µ–ª—é",
    "back_facing": "—Å–ø–∏–Ω–æ–π –∫ –∑—Ä–∏—Ç–µ–ª—é",
    "lying_knees_up": "–ª–µ–∂–∞ —Å —Ä–∞–∑–¥–≤–∏–Ω—É—Ç—ã–º–∏ —Å–æ–≥–Ω—É—Ç—ã–º–∏ –∫–æ–ª–µ–Ω—è–º–∏",
    "bridge": "–º–æ—Å—Ç",
    "suspended": "–ø–æ–¥–≤–µ—à–µ–Ω–∞ –Ω–∞ –≤–µ—Ä—ë–≤–∫–∞—Ö",
    # –æ–¥–µ–∂–¥–∞
    "stockings": "—Ç–æ–ª—å–∫–æ —á—É–ª–∫–∏",
    "bikini_tan_lines": "—Å–º—É–≥–ª–∞—è –∫–æ–∂–∞ —Å –±–µ–ª—ã–º–∏ –ª–∏–Ω–∏—è–º–∏ –æ—Ç –±–∏–∫–∏–Ω–∏, –±–µ–∑ –æ–¥–µ–∂–¥—ã",
    "mask": "–º–∞—Å–∫–∞ –Ω–∞ –ª–∏—Ü–µ",
    "heels": "—Ç—É—Ñ–ª–∏ –Ω–∞ –≤—ã—Å–æ–∫–æ–º –∫–∞–±–ª—É–∫–µ",
    "shibari": "—à–∏–±–∞—Ä–∏ –≤–µ—Ä—ë–≤–∫–∏",
    "cow_costume": "–¥–µ–≤—É—à–∫–∞ –≤ —á—É–ª–∫–∞—Ö —Å —É–∑–æ—Ä–æ–º –∫–æ—Ä–æ–≤—ã, —Å —Ä–æ–≥–∞–º–∏ –∏ —Ö–≤–æ—Å—Ç–æ–º, –±–µ–∑ –Ω–∏–∂–Ω–µ–≥–æ –±–µ–ª—å—è",
    # —Ç–µ–ª–æ
    "big_breasts": "–±–æ–ª—å—à–∞—è –≥—Ä—É–¥—å",
    "small_breasts": "–º–∞–ª–µ–Ω—å–∫–∞—è –≥—Ä—É–¥—å",
    "skin_white": "–±–µ–ª–∞—è –∫–æ–∂–∞",
    "skin_black": "—á—ë—Ä–Ω–∞—è –∫–æ–∂–∞",
    "body_fat": "–ø—ã—à–Ω–æ–µ —Ç–µ–ª–æ",
    "body_thin": "—Ö—É–¥–æ–µ —Ç–µ–ª–æ",
    "body_normal": "–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ",
    "body_fit": "–ø–æ–¥—Ç—è–Ω—É—Ç–æ–µ —Ç–µ–ª–æ",
    "body_muscular": "–º—É—Å–∫—É–ª–∏—Å—Ç–æ–µ —Ç–µ–ª–æ",
    "age_loli": "–ª–æ–ª–∏",
    "age_milf": "–º–∏–ª—Ñ–∞",
    "age_21": "–≤–æ–∑—Ä–∞—Å—Ç 21 –≥–æ–¥",
    "cum": "–≤—Å—è –≤ —Å–ø–µ—Ä–º–µ",
    "belly_bloat": "–≤–∑–¥—É—Ç–∏–µ –∂–∏–≤–æ—Ç–∞ –æ—Ç –∏–≥—Ä—É—à–∫–∏",
    "long_dildo_path": "–¥–∏–ª–¥–æ —á–µ—Ä–µ–∑ –∞–Ω—É—Å –≤—ã—Ö–æ–¥–∏—Ç –∏–∑–æ —Ä—Ç–∞",
    "succubus_tattoo": "—Ç–∞—Ç—É —Å–µ—Ä–¥–µ—á–∫–æ –Ω–∞ –∫–æ–∂–µ –≤ –æ–±–ª–∞—Å—Ç–∏ –º–∞—Ç–∫–∏",
    # —ç—Ç–Ω–æ—Å
    "futanari": "—Ñ—É—Ç–∞–Ω–∞—Ä–∏ –¥–µ–≤—É—à–∫–∞ —Å –±–æ–ª—å—à–æ–π –≥—Ä—É–¥—å—é",
    "femboy": "—Ñ–µ–º–±–æ–π —Å –∂–µ–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º —Ç–µ–ª–æ–º",
    "ethnicity_asian": "–∞–∑–∏–∞—Ç–∫–∞",
    "ethnicity_european": "–µ–≤—Ä–æ–ø–µ–π–∫–∞",
    # —Ñ—É—Ä–∏
    "furry_cow": "—Ñ—É—Ä–∏ –∫–æ—Ä–æ–≤–∞ —Å —Ä–æ–≥–∞–º–∏ –∏ —Ö–≤–æ—Å—Ç–æ–º",
    "furry_cat": "—Ñ—É—Ä–∏ –∫–æ—à–∫–∞ —Å —É—à–∞–º–∏ –∏ —Ö–≤–æ—Å—Ç–æ–º",
    "furry_dog": "—Ñ—É—Ä–∏ —Å–æ–±–∞–∫–∞ —Å —É—à–∞–º–∏ –∏ —Ö–≤–æ—Å—Ç–æ–º",
    "furry_dragon": "—Ñ—É—Ä–∏ –¥—Ä–∞–∫–æ–Ω —Å —á–µ—à—É—ë–π –∏ –∫—Ä—ã–ª—å—è–º–∏",
    "furry_sylveon": "—Ñ—É—Ä–∏ —Å–∏–ª—å–≤–µ–æ–Ω, —Ä–æ–∑–æ–≤–∞—è —à–µ—Ä—Å—Ç—å, –ª–µ–Ω—Ç—ã, —Å–µ–∫—Å—É–∞–ª—å–Ω–∞—è",
    "furry_fox": "—Ñ—É—Ä–∏ –ª–∏—Å–∏—Ü–∞ —Å –æ—Ä–∞–Ω–∂–µ–≤–æ–π —à–µ—Ä—Å—Ç—å—é, –ø—É—à–∏—Å—Ç—ã–π —Ö–≤–æ—Å—Ç –∏ —É—à–∏",
    "furry_rabbit": "—Ñ—É—Ä–∏ –∫—Ä–æ–ª–∏–∫ —Å –±–µ–ª—ã–º –º–µ—Ö–æ–º, –¥–ª–∏–Ω–Ω—ã–µ —É—à–∏ –∏ —Ö–≤–æ—Å—Ç–∏–∫",
    "furry_wolf": "—Ñ—É—Ä–∏ –≤–æ–ª—á–∏—Ü–∞ —Å —Å–µ—Ä–æ–π —à–µ—Ä—Å—Ç—å—é, –æ—Å—Ç—Ä—ã–µ —É—à–∏ –∏ —Ö–≤–æ—Å—Ç",
    # –ø–µ—Ä—Å–æ–Ω–∞–∂–∏
    "rias_gremory": "–†–∏–∞—Å –ì—Ä–µ–º–æ—Ä–∏ –∏–∑ High School DxD, –¥–ª–∏–Ω–Ω—ã–µ –∫—Ä–∞—Å–Ω—ã–µ –≤–æ–ª–æ—Å—ã, –±–æ–ª—å—à–∞—è –≥—Ä—É–¥—å, —É–≤–µ—Ä–µ–Ω–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Ü–∞",
    "akeno_himejima": "–ê–∫–µ–Ω–æ –•–∏–º–µ–¥–∑–∏–º–∞ –∏–∑ High School DxD, –¥–ª–∏–Ω–Ω—ã–µ —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–µ –≤–æ–ª–æ—Å—ã, —Å–æ–±—Ä–∞–Ω—ã –≤ —Ö–≤–æ—Å—Ç, —á—É–≤—Å—Ç–≤–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ",
    # –≥–æ–ª–æ–≤–∞
    "ahegao": "–ª–∏—Ü–æ –≤ –∞—Ö–µ–≥–∞–æ, –≤—ã—Å—É–Ω—É—Ç—ã–π —è–∑—ã–∫, –∑–∞–∫–∞—Ç–∞–Ω–Ω—ã–µ –≥–ª–∞–∑–∞",
    "pain_face": "–ª–∏—Ü–æ —Å–∫—Ä–∏–≤–∏–≤—à–µ–µ—Å—è –æ—Ç –±–æ–ª–∏, —Å–ª–µ–∑—ã, —Å—Ç—Ä–∞–¥–∞–ª—å–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ",
    "ecstasy_face": "–ª–∏—Ü–æ –≤ —ç–∫—Å—Ç–∞–∑–µ, –≥–ª–∞–∑–∞ –ø–æ–ª—É–æ—Ç–∫—Ä—ã—Ç—ã, —Ä–æ—Ç –ø—Ä–∏–æ—Ç–∫—Ä—ã—Ç",
    "gold_lipstick": "–∑–æ–ª–æ—Ç–∞—è –ø–æ–º–∞–¥–∞ –Ω–∞ –≥—É–±–∞—Ö"
}

# –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Ç–µ–≥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (—Ç–µ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω—ã –≤–º–µ—Å—Ç–µ)
CONFLICTS = {
    "holes": ["vagina", "anal", "both"],
    "body": ["skin_white", "skin_black"],
    "ethnos": ["futanari", "femboy", "ethnicity_asian", "ethnicity_european"],
    # —Ç.–∫. "both" —É–∂–µ –≤–∫–ª—é—á–∞–µ—Ç –≤–∞–≥–∏–Ω—É –∏ –∞–Ω—É—Å, –ø—Ä–∏ –≤—ã–±–æ—Ä–µ "both" —É–¥–∞–ª—è—Ç—å –≤–∞–≥–∏–Ω—É –∏ –∞–Ω—É—Å
}

def main_menu():
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üß© –í—ã–±—Ä–∞—Ç—å —Ç–µ–≥–∏", callback_data="choose_tags"))
    kb.add(types.InlineKeyboardButton("üé® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="generate"))
    return kb

def category_menu():
    kb = types.InlineKeyboardMarkup(row_width=2)
    for key, name in CATEGORY_NAMES.items():
        kb.add(types.InlineKeyboardButton(name, callback_data=f"cat_{key}"))
    kb.add(types.InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="done_tags"))
    return kb

def tag_menu(category, selected_tags):
    kb = types.InlineKeyboardMarkup(row_width=2)
    for tag_key, tag_name in TAGS[category].items():
        label = f"‚úÖ {tag_name}" if tag_key in selected_tags else tag_name
        kb.add(types.InlineKeyboardButton(label, callback_data=f"tag_{category}_{tag_key}"))
    kb.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_cat"))
    return kb

@bot.message_handler(commands=["start"])
def start(msg):
    cid = msg.chat.id
    user_settings[cid] = {"tags": [], "last_cat": None}
    bot.send_message(cid, "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –¥–µ–ª–∞–µ–º?", reply_markup=main_menu())

@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    cid = call.message.chat.id
    if cid not in user_settings:
        user_settings[cid] = {"tags": [], "last_cat": None}

    data = call.data

    if data == "choose_tags":
        bot.edit_message_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–µ–≥–æ–≤:", cid, call.message.message_id, reply_markup=category_menu())

    elif data.startswith("cat_"):
        cat = data[4:]
        user_settings[cid]["last_cat"] = cat
        selected = user_settings[cid]["tags"]
        bot.edit_message_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {CATEGORY_NAMES[cat]}", cid, call.message.message_id, reply_markup=tag_menu(cat, selected))

    elif data.startswith("tag_"):
        _, cat, tag = data.split("_", 2)
        tags = user_settings[cid]["tags"]

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        # –ï—Å–ª–∏ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —Ç–µ–≥, —É–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –∏–∑ —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if tag in tags:
            # –£–±–∏—Ä–∞–µ–º —Ç–µ–≥
            tags.remove(tag)
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥, –ø—Ä–∏ —ç—Ç–æ–º —É–¥–∞–ª—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ —Ç–µ–≥–∏ –∏–∑ —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            conflicts_in_cat = CONFLICTS.get(cat, [])
            if tag in conflicts_in_cat:
                # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ —Ç–µ–≥–∏ –∫—Ä–æ–º–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ
                for conflict_tag in conflicts_in_cat:
                    if conflict_tag != tag and conflict_tag in tags:
                        tags.remove(conflict_tag)
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è "holes" —Å —Ç–µ–≥–æ–º "both"
            if cat == "holes" and tag == "both":
                # –£–±–∏—Ä–∞–µ–º vagina –∏ anal –µ—Å–ª–∏ –µ—Å—Ç—å
                for hole_tag in ["vagina", "anal"]:
                    if hole_tag in tags:
                        tags.remove(hole_tag)
            elif cat == "holes" and tag in ["vagina", "anal"]:
                # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω both, —É–±—Ä–∞—Ç—å –µ–≥–æ
                if "both" in tags:
                    tags.remove("both")

            tags.append(tag)

        # –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –≤—ã–±–æ—Ä
        user_settings[cid]["tags"] = tags
        bot.edit_message_reply_markup(cid, call.message.message_id, reply_markup=tag_menu(cat, tags))

    elif data == "done_tags":
        bot.edit_message_text("–¢–µ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", cid, call.message.message_id, reply_markup=main_menu())

    elif data == "back_to_cat":
        bot.edit_message_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", cid, call.message.message_id, reply_markup=category_menu())

    elif data == "generate":
        tags = user_settings[cid]["tags"]
        if not tags:
            bot.send_message(cid, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–µ–≥–∏!")
            return
        prompt = build_prompt(tags)
        bot.send_message(cid, "‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        url = replicate_generate(prompt)
        if url:
            kb = types.InlineKeyboardMarkup()
            kb.add(
                types.InlineKeyboardButton("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start"),
                types.InlineKeyboardButton("üîß –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥–∏", callback_data="choose_tags")
            )
            bot.send_photo(cid, url, caption="‚úÖ –ì–æ—Ç–æ–≤–æ!", reply_markup=kb)
        else:
            bot.send_message(cid, "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")

    elif data == "start":
        user_settings[cid] = {"tags": [], "last_cat": None}
        bot.send_message(cid, "–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫.", reply_markup=main_menu())

def build_prompt(tags):
    base = "nsfw, masterpiece, ultra detailed, anime style, best quality"
    # –ö–∞—Å—Ç–æ–º–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å–º–µ—à–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ä—Å—Ç–∏–π –∏ –¥–∏–ª–¥–æ
    prompt_parts = []

    holes_selected = [tag for tag in tags if tag in TAGS["holes"]]
    toys_selected = [tag for tag in tags if tag in TAGS["toys"]]

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω "both" - –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –æ–±–∞ –æ—Ç–≤–µ—Ä—Å—Ç–∏—è
    if "both" in holes_selected:
        holes_selected = ["vagina", "anal"]

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∏–ª–¥–æ –¥–ª—è –æ–±–æ–∏—Ö –æ—Ç–≤–µ—Ä—Å—Ç–∏–π, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –∏ –æ—Ç–≤–µ—Ä—Å—Ç–∏—è –∏ –¥–∏–ª–¥–æ
    dildo_tags = {"dildo", "huge_dildo", "horse_dildo"}
    dildo_selected = [t for t in toys_selected if t in dildo_tags]

    # –£–±–∏—Ä–∞–µ–º –¥–∏–ª–¥–æ –∏–∑ toys, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –¥–æ–±–∞–≤–∏—Ç—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
    toys_wo_dildo = [t for t in toys_selected if t not in dildo_tags]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º—Ç—ã –¥–ª—è –æ—Ç–≤–µ—Ä—Å—Ç–∏–π
    for hole in holes_selected:
        prompt_parts.append(TAG_PROMPTS.get(hole, hole))

    # –î–ª—è –¥–∏–ª–¥–æ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±–∞ –æ—Ç–≤–µ—Ä—Å—Ç–∏—è, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ä—Å—Ç–∏—è –≤—ã–±—Ä–∞–Ω—ã
    for dildo in dildo_selected:
        for hole in holes_selected:
            # "–¥–∏–ª–¥–æ –≤–Ω—É—Ç—Ä–∏ –≤–∞–≥–∏–Ω—ã" –∏–ª–∏ "–¥–∏–ª–¥–æ –≤–Ω—É—Ç—Ä–∏ –∞–Ω—É—Å–∞"
            if hole == "vagina":
                prompt_parts.append(f"{TAG_PROMPTS.get(dildo)} –≤–Ω—É—Ç—Ä–∏ –≤–∞–≥–∏–Ω—ã")
            elif hole == "anal":
                prompt_parts.append(f"{TAG_PROMPTS.get(dildo)} –≤–Ω—É—Ç—Ä–∏ –∞–Ω—É—Å–∞")

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∏–≥—Ä—É—à–∫–∏
    for toy in toys_wo_dildo:
        prompt_parts.append(TAG_PROMPTS.get(toy, toy))

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏ –∫—Ä–æ–º–µ holes –∏ toys
    for tag in tags:
        if tag not in holes_selected and tag not in toys_selected:
            prompt_parts.append(TAG_PROMPTS.get(tag, tag))

    return base + ", " + ", ".join(prompt_parts)

def replicate_generate(prompt):
    url = "https://api.replicate.com/v1/predictions"
    headers = {
        "Authorization": f"Token {REPLICATE_TOKEN}",
        "Content-Type": "application/json"
    }
    json_data = {
        "version": REPLICATE_MODEL,
        "input": {"prompt": prompt}
    }
    r = requests.post(url, headers=headers, json=json_data)
    if r.status_code != 201:
        return None
    status_url = r.json()["urls"]["get"]

    for _ in range(60):
        time.sleep(2)
        r = requests.get(status_url, headers=headers)
        if r.status_code != 200:
            return None
        data = r.json()
        if data["status"] == "succeeded":
            return data["output"][0] if isinstance(data["output"],