import os
import time
import requests
from flask import Flask, request
import telebot
from telebot import types

API_TOKEN = os.getenv("TELEGRAM_TOKEN")
REPLICATE_TOKEN = os.getenv("REPLICATE_API_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.environ.get("PORT", 5000))

REPLICATE_MODELS = {
    "anime": "c1d5b02687df6081c7953c74bcc527858702e8c153c9382012ccc3906752d3ec",
    "realism": "stability-ai/stable-diffusion:ac732df8",
    "3d": "stability-ai/stable-diffusion-3-medium"
}

bot = telebot.TeleBot(API_TOKEN)
app = Flask(__name__)

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ user_settings —Ç–µ–ø–µ—Ä—å:
# {
#   cid: {
#     "drafts": [  # —Å–ø–∏—Å–æ–∫ –¥—Ä–∞—Ñ—Ç–æ–≤ (–ø—Ä–æ–º—Ç–æ–≤)
#        {"base": str, "tags": list, "model": str}
#     ],
#     "current_draft": int,  # –∏–Ω–¥–µ–∫—Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥—Ä–∞—Ñ—Ç–∞
#     "waiting_for_prompt": bool,
#     "waiting_for_edit_prompt": bool,
#     "waiting_for_edit_tags": bool,
#     "waiting_for_edit_model": bool,
#     "history": [ { "prompt": str, "image_url": str } ] # –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
#   }
# }

user_settings = {}

# === –¢–µ–≥–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ===
# ... –∑–¥–µ—Å—å –≤—Å—Ç–∞–≤—å —Ç–≤–æ–∏ —Å–ª–æ–≤–∞—Ä–∏ TAGS, CATEGORY_NAMES_EMOJI, CLOTHES_NAMES_EMOJI, TAG_NAMES_EMOJI, –∫–∞–∫ —É —Ç–µ–±—è —Å–µ–π—á–∞—Å ...

# –î–æ–±–∞–≤–∏–º —Ñ–ª–∞–≥ –≤—ã–±–æ—Ä–∞ –¥–ª—è —Ç–µ–≥–æ–≤ (–≥–∞–ª–æ—á–∫–∏)
def tags_keyboard_with_selection(category, selected_tags):
    markup = types.InlineKeyboardMarkup(row_width=2)
    for tag in TAGS.get(category, []):
        if category == "clothes":
            name = CLOTHES_NAMES_EMOJI.get(tag, tag)
        else:
            name = TAG_NAMES_EMOJI.get(category, {}).get(tag, tag)
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫—É –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω
        if tag in selected_tags:
            name = "‚úÖ " + name
        markup.add(types.InlineKeyboardButton(name, callback_data=f"tag_{tag}"))
    markup.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="tags_back"))
    return markup

# === –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é ===
def main_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("üé® –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å", callback_data="model"),
        types.InlineKeyboardButton("üß© –í—ã–±—Ä–∞—Ç—å —Ç–µ–≥–∏", callback_data="tags"),
        types.InlineKeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_base"),
        types.InlineKeyboardButton("‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="generate"),
        types.InlineKeyboardButton("üóÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—Ä–∞—Ñ—Ç–∞–º–∏", callback_data="manage_drafts"),
        types.InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π", callback_data="history")
    )
    return markup

def model_keyboard(selected_model=None):
    markup = types.InlineKeyboardMarkup(row_width=2)
    for key, name in [("anime", "üñå –ê–Ω–∏–º–µ"), ("realism", "üì∑ –†–µ–∞–ª–∏–∑–º"), ("3d", "üß± 3D")]:
        display_name = name
        if selected_model == key:
            display_name = "‚úÖ " + name
        markup.add(types.InlineKeyboardButton(display_name, callback_data=f"model_{key}"))
    markup.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="main_menu"))
    return markup

def category_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=2)
    for cat in CATEGORY_NAMES_EMOJI:
        markup.add(types.InlineKeyboardButton(CATEGORY_NAMES_EMOJI[cat], callback_data=f"cat_{cat}"))
    markup.add(types.InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="tags_done"))
    return markup

def tags_keyboard(category, selected_tags):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –≥–∞–ª–æ—á–∫–∞–º–∏
    return tags_keyboard_with_selection(category, selected_tags)

def drafts_keyboard(drafts, current_index):
    markup = types.InlineKeyboardMarkup(row_width=1)
    for i, draft in enumerate(drafts):
        base_short = draft["base"][:20] + ("..." if len(draft["base"]) > 20 else "")
        name = f"#{i+1} {'(–∞–∫—Ç–∏–≤–Ω—ã–π)' if i == current_index else ''} - {base_short}"
        markup.add(types.InlineKeyboardButton(name, callback_data=f"draft_select_{i}"))
    markup.add(types.InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥—Ä–∞—Ñ—Ç", callback_data="draft_new"))
    markup.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="main_menu"))
    return markup

def draft_actions_keyboard(draft_index):
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"draft_edit_base_{draft_index}"),
        types.InlineKeyboardButton("üß© –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–≥–∏", callback_data=f"draft_edit_tags_{draft_index}"),
        types.InlineKeyboardButton("üé® –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å", callback_data=f"draft_edit_model_{draft_index}"),
        types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –¥—Ä–∞—Ñ—Ç", callback_data=f"draft_delete_{draft_index}"),
        types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="manage_drafts")
    )
    return markup

def history_keyboard(history):
    markup = types.InlineKeyboardMarkup(row_width=1)
    for i, item in enumerate(history[-10:][::-1]):  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
        base_short = item["prompt"][:30] + ("..." if len(item["prompt"]) > 30 else "")
        markup.add(types.InlineKeyboardButton(f"#{len(history)-i} {base_short}", callback_data=f"history_{len(history)-1 - i}"))
    markup.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="main_menu"))
    return markup

# ==== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ ====

@bot.message_handler(commands=["start"])
def start(message):
    cid = message.chat.id
    if cid not in user_settings:
        user_settings[cid] = {
            "drafts": [{"base": "", "tags": [], "model": "anime"}],
            "current_draft": 0,
            "waiting_for_prompt": False,
            "waiting_for_edit_prompt": False,
            "waiting_for_edit_tags": False,
            "waiting_for_edit_model": False,
            "history": []
        }
    bot.send_message(cid, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard())

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    cid = call.message.chat.id
    data = call.data
    user = user_settings.setdefault(cid, {
        "drafts": [{"base": "", "tags": [], "model": "anime"}],
        "current_draft": 0,
        "waiting_for_prompt": False,
        "waiting_for_edit_prompt": False,
        "waiting_for_edit_tags": False,
        "waiting_for_edit_model": False,
        "history": []
    })

    def current_draft():
        return user["drafts"][user["current_draft"]]

    if data == "main_menu":
        bot.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", cid, call.message.message_id, reply_markup=main_keyboard())
        reset_waiting_flags(user)

    elif data == "model":
        bot.edit_message_text("–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å:", cid, call.message.message_id, reply_markup=model_keyboard(current_draft()["model"]))

    elif data.startswith("model_"):
        model = data.split("_")[1]
        current_draft()["model"] = model
        bot.edit_message_text(f"–ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {model}", cid, call.message.message_id, reply_markup=main_keyboard())
        reset_waiting_flags(user)

    elif data == "tags":
        bot.edit_message_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", cid, call.message.message_id, reply_markup=category_keyboard())

    elif data.startswith("cat_"):
        cat = data.split("_")[1]
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏ —Ç–µ–≥–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {CATEGORY_NAMES_EMOJI[cat]}:", cid, call.message.message_id,
                              reply_markup=tags_keyboard(cat, current_draft()["tags"]))

    elif data.startswith("tag_"):
        tag = data.split("_")[1]
        tags = current_draft()["tags"]
        if tag in tags:
            tags.remove(tag)
            bot.answer_callback_query(call.id, f"–¢–µ–≥ '{tag}' —É–¥–∞–ª—ë–Ω")
        else:
            tags.append(tag)
            bot.answer_callback_query(call.id, f"–¢–µ–≥ '{tag}' –¥–æ–±–∞–≤–ª–µ–Ω")
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º
        cat = find_category_of_tag(tag)
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id,
                                      reply_markup=tags_keyboard(cat, tags))

    elif data == "tags_done":
        bot.edit_message_text("–¢–µ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", cid, call.message.message_id, reply_markup=main_keyboard())
        reset_waiting_flags(user)

    elif data == "tags_back":
        bot.edit_message_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", cid, call.message.message_id, reply_markup=category_keyboard())

    elif data == "edit_base":
        user["waiting_for_edit_prompt"] = True
        bot.send_message(cid, "–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")

    elif data == "generate":
        bot.send_message(cid, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–µ–∫—É—â–∏–º –ø—Ä–æ–º—Ç–æ–º", callback_data="gen_continue"),
            types.InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="gen_restart"),
            types.InlineKeyboardButton("‚¨Ö –û—Ç–º–µ–Ω–∞", callback_data="main_menu")
        ))

    elif data == "gen_continue":
        user["waiting_for_prompt"] = True
        bot.send_message(cid, f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ–º—Ç:\n{current_draft()['base']}\n\n‚úèÔ∏è –í–≤–µ–¥–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ –æ–ø–∏—Å–∞–Ω–∏—é:")

    elif data == "gen_restart":
        current_draft()["base"] = ""
        current_draft()["tags"] = []
        bot.send_message(cid, "–ù–∞—á–Ω–∏ –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è:")
        user["waiting_for_prompt"] = True

    elif data == "manage_drafts":
        bot.edit_message_text("–í—ã–±–µ—Ä–∏ –¥—Ä–∞—Ñ—Ç:", cid, call.message.message_id,
                              reply_markup=drafts_keyboard(user["drafts"], user["current_draft"]))

    elif data.startswith("draft_select_"):
        idx = int(data.split("_")[2])
        user["current_draft"] = idx
        bot.edit_message_text(f"–ê–∫—Ç–∏–≤–Ω—ã–π –¥—Ä–∞—Ñ—Ç #{idx + 1}", cid, call.message.message_id,
                              reply_markup=draft_actions_keyboard(idx))

    elif data == "draft_new":
        user["drafts"].append({"base": "", "tags": [], "model": "anime"})
        user["current_draft"] = len(user["drafts"]) - 1
        bot.edit_message_text(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –¥—Ä–∞—Ñ—Ç #{user['current_draft'] + 1}", cid, call.message.message_id,
                              reply_markup=draft_actions_keyboard(user["current_draft"]))

    elif data.startswith("draft_edit_base_"):
        idx = int(data.split("_")[3])
        if idx == user["current_draft"]:
            user["waiting_for_edit_prompt"] = True
            bot.send_message(cid, "–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
        else:
            bot.answer_callback_query(call.id, "–ú–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–π –¥—Ä–∞—Ñ—Ç")

    elif data.startswith("draft_edit_tags_"):
        idx = int(data.split("_")[3])
        if idx == user["current_draft"]:
            user["waiting_for_edit_tags"] = True
            bot.send_message(cid, "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=category_keyboard())
        else:
            bot.answer_callback_query(call.id, "–ú–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–π –¥—Ä–∞—Ñ—Ç")

    elif data.startswith("draft_edit_model_"):
        idx = int(data.split("_")[3])
        if idx == user["current_draft"]:
            bot.edit_message_text("–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å:", cid, call.message.message_id,
                                  reply_markup=model_keyboard(current_draft()["model"]))
            user["waiting_for_edit_model"] = True
        else:
            bot.answer_callback_query(call.id, "–ú–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–π –¥—Ä–∞—Ñ—Ç")

    elif data.startswith("draft_delete_"):
        idx = int(data.split("_")[2])
        if len(user["drafts"]) == 1:
            bot.answer_callback_query(call.id, "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥—Ä–∞—Ñ—Ç")
            return
        user["drafts"].pop(idx)
        if user["current_draft"] >= len(user["drafts"]):
            user["current_draft"] = len(user["drafts"]) - 1
        bot.edit_message_text("–î—Ä–∞—Ñ—Ç —É–¥–∞–ª—ë–Ω.", cid, call.message.message_id,
                              reply_markup=drafts_keyboard(user["drafts"], user["current_draft"]))

    elif data == "history":
        if not user["history"]:
            bot.edit_message_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.", cid, call.message.message_id,
                                  reply_markup=main_keyboard())
        else:
            bot.edit_message_text("–ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:", cid, call.message.message_id,
                                  reply_markup=history_keyboard(user["history"]))

    elif data.startswith("history_"):
        idx = int(data.split("_")[1])
        if idx >= 0 and idx < len(user["history"]):
            hist = user["history"][idx]
            bot.send_photo(cid, hist["image_url"], caption=f"–ü—Ä–æ–º—Ç:\n{hist['prompt']}", reply_markup=main_keyboard())
        else:
            bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∏—Å—Ç–æ—Ä–∏–∏")

    else:
        bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

def reset_waiting_flags(user):
    user["waiting_for_prompt"] = False
    user["waiting_for_edit_prompt"] = False
    user["waiting_for_edit_tags"] = False
    user["waiting_for_edit_model"] = False

def find_category_of_tag(tag):
    for cat, tags in TAGS.items():
        if tag in tags:
            return cat
    return None

@bot.message_handler(func=lambda m: True)
def handle_messages(message):
    cid = message.chat.id
    if cid not in user_settings:
        bot.send_message(cid, "–ù–∞–ø–∏—à–∏ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
        return

    user = user_settings[cid]

    if user.get("waiting_for_edit_prompt"):
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥—Ä–∞—Ñ—Ç–∞
        current = user["drafts"][user["current_draft"]]
        current["base"] = message.text.strip()
        user["waiting_for_edit_prompt"] = False
        bot.send_message(cid, "–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.", reply_markup=main_keyboard())

    elif user.get("waiting_for_prompt"):
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–ø–æ–ª–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        current = user["drafts"][user["current_draft"]]
        if current["base"]:
            # –î–æ–ø–æ–ª–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ
            current["base"] += ", " + message.text.strip()
        else:
            current["base"] = message.text.strip()
        user["waiting_for_prompt"] = False

        bot.send_message(cid, "‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        model_id = REPLICATE_MODELS.get(current["model"], REPLICATE_MODELS["anime"])
        full_prompt = build_prompt(current["base"], current["tags"])
        status_url, err = generate_image(full_prompt, model_id)
        if err:
            bot.send_message(cid, err)
            return

        image_url = wait_for_image(status_url)
        if image_url:
            bot.send_photo(cid, image_url, caption="–í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç!", reply_markup=main_keyboard())
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            user["history"].append({"prompt": full_prompt, "image_url": image_url})
        else:
            bot.send_message(cid, "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

    elif user.get("waiting_for_edit_tags"):
        # –í–æ –≤—Ä–µ–º—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–≥–æ–≤ –∂–¥–µ–º –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ç–µ–≥–æ–≤, –Ω–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—É—Ç –Ω–µ –Ω—É–∂–Ω–∞
        bot.send_message(cid, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏.")

    elif user.get("waiting_for_edit_model"):
        bot.send_message(cid, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏.")

    else:
        bot.send_message(cid, "–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é.", reply_markup=main_keyboard())

# === –ü—Ä–æ–º—Ç —Å–±–æ—Ä–∫–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ===

def build_prompt(base, tags):
    additions = []
    map_tag = {
        "vagina": "vaginal penetration", "anal": "anal penetration", "both": "double penetration",
        "dildo": "dildo", "anal_beads": "anal beads", "anal_plug": "anal plug", "gag": "gag",
        "doggy": "doggy style", "standing": "standing pose", "splits": "splits", "squat": "squatting", "lying": "laying",
        "stockings": "stockings", "bikini": "bikini", "mask": "mask", "heels": "high heels", "shibari": "shibari",
        "cow_costume": "cow costume", "bikini_tan_lines": "bikini tan lines",
        "big_breasts": "large breasts", "small_breasts": "small breasts", "