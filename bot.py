# --- bot.py ---
import os
import time
import requests
from flask import Flask, request
import telebot
from telebot import types

API_TOKEN = os.getenv("TELEGRAM_TOKEN")
REPLICATE_TOKEN = os.getenv("REPLICATE_API_TOKEN")
REPLICATE_MODEL = "057e2276ac5dcd8d1575dc37b131f903df9c10c41aed53d47cd7d4f068c19fa5"
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.environ.get("PORT", 5000))

bot = telebot.TeleBot(API_TOKEN)
app = Flask(__name__)
user_settings = {}

CATEGORY_NAMES = {
    "poses": "–ü–æ–∑—ã", "clothes": "–û–¥–µ–∂–¥–∞", "body": "–¢–µ–ª–æ", "ethnos": "–≠—Ç–Ω–æ—Å",
    "furry": "–§—É—Ä–∏", "characters": "–ü–µ—Ä—Å–æ–Ω–∞–∂–∏", "head": "–ì–æ–ª–æ–≤–∞",
    "toys": "–ò–≥—Ä—É—à–∫–∏", "holes": "–û—Ç–≤–µ—Ä—Å—Ç–∏—è", "view": "–û–±–∑–æ—Ä"
}

TAGS = {
    "poses": {
        "doggy": "–°–æ–±–∞—á–∫–∞", "squat": "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏–µ", "lying": "–õ–µ–∂–∞",
        "standing": "–°—Ç–æ—è", "ver_split": "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç", "hor_split": "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç",
        "bridge": "–ú–æ—Å—Ç", "suspended": "–ü–æ–¥–≤–µ—à–µ–Ω–∞", "side_up_leg": "–ù–∞ –±–æ–∫—É —Å –Ω–æ–≥–æ–π –≤–≤–µ—Ä—Ö"
    },
    "clothes": {
        "stockings": "–ß—É–ª–∫–∏", "heels": "–ö–∞–±–ª—É–∫–∏", "shibari": "–®–∏–±–∞—Ä–∏",
        "mask": "–ú–∞—Å–∫–∞", "bikini_tan_lines": "–ó–∞–≥–∞—Ä –æ—Ç –±–∏–∫–∏–Ω–∏"
    },
    "body": {
        "big_breasts": "–ë–æ–ª—å—à–∞—è –≥—Ä—É–¥—å", "small_breasts": "–ú–∞–ª–µ–Ω—å–∫–∞—è –≥—Ä—É–¥—å",
        "skin_white": "–ë–µ–ª–∞—è –∫–æ–∂–∞", "skin_black": "–ß—ë—Ä–Ω–∞—è –∫–æ–∂–∞",
        "body_thin": "–•—É–¥–æ–µ —Ç–µ–ª–æ", "body_fat": "–ü—ã—à–Ω–æ–µ —Ç–µ–ª–æ", "body_normal": "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ç–µ–ª–æ",
        "age_loli": "–õ–æ–ª–∏", "age_milf": "–ú–∏–ª—Ñ–∞"
    },
    "ethnos": {
        "ethnicity_asian": "–ê–∑–∏–∞—Ç–∫–∞", "ethnicity_european": "–ï–≤—Ä–æ–ø–µ–π–∫–∞",
        "futanari": "–§—É—Ç–∞–Ω–∞—Ä–∏", "femboy": "–§–µ–º–±–æ–π"
    },
    "furry": {
        "furry_fox": "–§—É—Ä–∏ –ª–∏—Å–∏—Ü–∞", "furry_bunny": "–§—É—Ä–∏ –∫—Ä–æ–ª–∏–∫", "furry_wolf": "–§—É—Ä–∏ –≤–æ–ª—á–∏—Ü–∞"
    },
    "characters": {
        "rias": "–†–∏–∞—Å –ì—Ä–µ–º–æ—Ä–∏", "akeno": "–ê–∫–µ–Ω–æ", "kafka": "–ö–∞—Ñ–∫–∞",
        "eula": "–ï–æ–ª–∞", "fu_xuan": "–§—É –°—é–∞–Ω—å", "ayase": "–°–µ–π–∫–æ –ê—è—Å–µ"
    },
    "head": {
        "ahegao": "–ê—Ö–µ–≥–∞–æ", "ecstasy_face": "–≠–∫—Å—Ç–∞–∑", "pain_face": "–ë–æ–ª—å",
        "gold_lipstick": "–ó–æ–ª–æ—Ç–∞—è –ø–æ–º–∞–¥–∞"
    },
    "toys": {
        "dildo": "–î–∏–ª–¥–æ", "huge_dildo": "–ë–æ–ª—å—à–æ–µ –¥–∏–ª–¥–æ",
        "anal_plug": "–ê–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–±–∫–∞", "anal_beads": "–ê–Ω–∞–ª—å–Ω—ã–µ –±—É—Å—ã",
        "gag": "–ö–ª—è–ø", "long_dildo_path": "–î–∏–ª–¥–æ –∏–∑ –∞–Ω—É—Å–∞ –≤—ã—Ö–æ–¥–∏—Ç –∏–∑–æ —Ä—Ç–∞"
    },
    "holes": {
        "vagina": "–í–∞–≥–∏–Ω–∞", "anal": "–ê–Ω—É—Å", "both": "–í–∞–≥–∏–Ω–∞ –∏ –∞–Ω—É—Å"
    },
    "view": {
        "view_bottom": "–°–Ω–∏–∑—É", "view_top": "–°–≤–µ—Ä—Ö—É",
        "view_side": "–°–±–æ–∫—É", "view_close": "–ë–ª–∏–∂–µ", "view_full": "–î–∞–ª—å—à–µ"
    }
}

RU_TO_TAG = {}
for cat in TAGS.values():
    for k, v in cat.items():
        RU_TO_TAG[v.lower()] = k

@bot.message_handler(commands=["start"])
def start(msg):
    cid = msg.chat.id
    user_settings[cid] = {"tags": [], "last_cat": None, "count": 1}
    bot.send_message(cid, "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –¥–µ–ª–∞–µ–º?", reply_markup=main_menu())

def main_menu():
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üß© –í—ã–±—Ä–∞—Ç—å —Ç–µ–≥–∏", callback_data="choose_tags"))
    kb.add(types.InlineKeyboardButton("üé® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="generate"))
    return kb

def category_menu():
    kb = types.InlineKeyboardMarkup(row_width=2)
    for k, v in CATEGORY_NAMES.items():
        kb.add(types.InlineKeyboardButton(v, callback_data=f"cat_{k}"))
    kb.add(types.InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="done_tags"))
    kb.add(types.InlineKeyboardButton("üì∏ –ö–æ–ª-–≤–æ —Ñ–æ—Ç–æ", callback_data="choose_count"))
    return kb

def count_menu():
    kb = types.InlineKeyboardMarkup(row_width=4)
    for i in range(1, 5):
        kb.add(types.InlineKeyboardButton(str(i), callback_data=f"count_{i}"))
    kb.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_cat"))
    return kb

def tag_menu(category, selected):
    kb = types.InlineKeyboardMarkup(row_width=2)
    for key, name in TAGS[category].items():
        text = f"‚úÖ {name}" if key in selected else name
        kb.add(types.InlineKeyboardButton(text, callback_data=f"tag_{category}_{key}"))
    kb.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_cat"))
    return kb

@bot.message_handler(func=lambda msg: True)
def handle_tag_input(msg):
    cid = msg.chat.id
    tags = []
    for name in msg.text.split(","):
        tag = RU_TO_TAG.get(name.strip().lower())
        if tag:
            tags.append(tag)
    if not tags:
        bot.send_message(cid, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–µ–≥–∞.")
        return
    user_settings[cid] = {"tags": tags, "last_cat": None, "count": 1}
    bot.send_message(cid, f"‚úÖ –¢–µ–≥–∏: {', '.join(name for key in tags for name, val in RU_TO_TAG.items() if val == key)}", reply_markup=main_menu())

@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    cid = call.message.chat.id
    data = call.data
    settings = user_settings.setdefault(cid, {"tags": [], "last_cat": None, "count": 1})
    if data == "choose_tags":
        bot.edit_message_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–µ–≥–æ–≤:", cid, call.message.message_id, reply_markup=category_menu())
    elif data.startswith("cat_"):
        cat = data[4:]
        settings["last_cat"] = cat
        bot.edit_message_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {CATEGORY_NAMES[cat]}", cid, call.message.message_id, reply_markup=tag_menu(cat, settings["tags"]))
    elif data.startswith("tag_"):
        _, cat, tag = data.split("_", 2)
        tags = settings["tags"]
        if tag in tags:
            tags.remove(tag)
        else:
            tags.append(tag)
        bot.edit_message_reply_markup(cid, call.message.message_id, reply_markup=tag_menu(cat, tags))
    elif data == "done_tags":
        bot.edit_message_text("‚úÖ –¢–µ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", cid, call.message.message_id, reply_markup=main_menu())
    elif data == "back_to_cat":
        bot.edit_message_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", cid, call.message.message_id, reply_markup=category_menu())
    elif data == "choose_count":
        bot.edit_message_text("–°–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å?", cid, call.message.message_id, reply_markup=count_menu())
    elif data.startswith("count_"):
        settings["count"] = int(data.split("_")[1])
        bot.edit_message_text(f"‚úÖ –ö–æ–ª-–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {settings['count']}", cid, call.message.message_id, reply_markup=category_menu())
    elif data == "generate":
        if not settings["tags"]:
            bot.send_message(cid, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–µ–≥–∏.")
            return
        prompt = build_prompt(settings["tags"])
        neg = NEGATIVE_PROMPT
        count = settings.get("count", 1)
        bot.send_message(cid, f"‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
        urls = replicate_generate(prompt, neg, count)
        if urls:
            media = [types.InputMediaPhoto(u) for u in urls]
            bot.send_media_group(cid, media)
            kb = types.InlineKeyboardMarkup()
            kb.add(
                types.InlineKeyboardButton("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start"),
                types.InlineKeyboardButton("üîß –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥–∏", callback_data="choose_tags"),
                types.InlineKeyboardButton("‚û° –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —ç—Ç–∏–º–∏", callback_data="generate")
            )
            bot.send_message(cid, "‚úÖ –ì–æ—Ç–æ–≤–æ!", reply_markup=kb)
        else:
            bot.send_message(cid, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å.")
    elif data == "start":
        user_settings[cid] = {"tags": [], "last_cat": None, "count": 1}
        bot.send_message(cid, "üîÅ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ.", reply_markup=main_menu())

def build_prompt(tags):
    base = "nsfw, anime, masterpiece, best quality, fully nude, no hands on chest, hands away from breasts"
    expanded = [tag for tag in tags]
    return base + ", " + ", ".join(expanded)

NEGATIVE_PROMPT = (
    "lowres, bad anatomy, wrong proportions, blurry, text, signature, watermark, "
    "bad hands, extra limbs, censored, mosaic, poorly drawn face, extra face, bad face, "
    "male, man, penis, testicles, clothed, covering"
)

def replicate_generate(prompt, negative_prompt, count):
    url = "https://api.replicate.com/v1/predictions"
    headers = {"Authorization": f"Token {REPLICATE_TOKEN}", "Content-Type": "application/json"}
    json_data = {
        "version": REPLICATE_MODEL,
        "input": {
            "prompt": prompt,
            "negative_prompt": negative_prompt,
            "num_outputs": count
        }
    }
    r = requests.post(url, headers=headers, json=json_data)
    if r.status_code != 201:
        return []
    status_url = r.json()["urls"]["get"]
    for _ in range(60):
        time.sleep(2)
        r = requests.get(status_url, headers=headers)
        if r.status_code != 200:
            return []
        data = r.json()
        if data["status"] == "succeeded":
            return data["output"]
        elif data["status"] == "failed":
            return []
    return []

@app.route("/", methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
    bot.process_new_updates([update])
    return "ok", 200

@app.route("/", methods=["GET"])
def home():
    return "–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç", 200

if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)
    app.run(host="0.0.0.0", port=PORT)