# --- bot.py ---
import os
import time
import requests
from flask import Flask, request
import telebot
from telebot import types

API_TOKEN = os.getenv("TELEGRAM_TOKEN")
REPLICATE_TOKEN = os.getenv("REPLICATE_API_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.environ.get("PORT", 5000))
REPLICATE_MODEL = "057e2276ac5dcd8d1575dc37b131f903df9c10c41aed53d47cd7d4f068c19fa5"

bot = telebot.TeleBot(API_TOKEN)
app = Flask(__name__)
user_settings = {}

NEGATIVE_PROMPT = "male, man, muscular male, penis, testicles, hands on chest, hands covering breasts, bra, panties, censored, text, watermark, logo, lowres, bad anatomy"

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–µ–≥–∏ —Å emoji
CATEGORIES = {
    "holes": "üï≥Ô∏è –û—Ç–≤–µ—Ä—Å—Ç–∏—è", "toys": "üß∏ –ò–≥—Ä—É—à–∫–∏", "poses": "ü§∏ –ü–æ–∑—ã",
    "clothes": "üëó –û–¥–µ–∂–¥–∞", "body": "üßç –¢–µ–ª–æ", "ethnos": "üåç –≠—Ç–Ω–æ—Å",
    "furry": "üêæ –§—É—Ä–∏", "characters": "üé≠ –ü–µ—Ä—Å–æ–Ω–∞–∂–∏", "head": "üë§ –ì–æ–ª–æ–≤–∞", "view": "üì∑ –û–±–∑–æ—Ä"
}

TAGS = {
    "holes": {
        "vagina": "–í–∞–≥–∏–Ω–∞", "anal": "–ê–Ω—É—Å", "both": "–û–±–∞"
    },
    "toys": {
        "dildo": "–î–∏–ª–¥–æ", "huge_dildo": "–û–≥—Ä–æ–º–Ω–æ–µ –¥–∏–ª–¥–æ", "horse_dildo": "–ö–æ–Ω—Å–∫–æ–µ –¥–∏–ª–¥–æ",
        "anal_beads": "–ê–Ω–∞–ª—å–Ω—ã–µ –±—É—Å—ã", "anal_plug": "–ê–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–±–∫–∞", "anal_expander": "–†–∞—Å—à–∏—Ä–∏—Ç–µ–ª—å",
        "gag": "–ö–ª—è–ø", "piercing": "–ü–∏—Ä—Å–∏–Ω–≥", "long_dildo_path": "–î–∏–ª–¥–æ —á–µ—Ä–µ–∑ —Ç–µ–ª–æ"
    },
    "poses": {
        "doggy": "–î–æ–≥–≥–∏", "standing": "–°—Ç–æ—è", "splits": "–®–ø–∞–≥–∞—Ç", "squat": "–ü—Ä–∏—Å–µ–¥",
        "lying": "–õ—ë–∂–∞", "hor_split": "–ì–æ—Ä. —à–ø–∞–≥–∞—Ç", "ver_split": "–í–µ—Ä—Ç. —à–ø–∞–≥–∞—Ç",
        "side_up_leg": "–ù–∞ –±–æ–∫—É —Å –Ω–æ–≥–æ–π –≤–≤–µ—Ä—Ö", "front_facing": "–õ–∏—Ü–æ–º", "back_facing": "–°–ø–∏–Ω–æ–π",
        "lying_knees_up": "–ö–æ–ª–µ–Ω–∏ –≤–≤–µ—Ä—Ö", "bridge": "–ú–æ—Å—Ç", "suspended": "–ü–æ–¥–≤–µ—à–µ–Ω–∞"
    },
    "clothes": {
        "stockings": "–ß—É–ª–∫–∏", "bikini_tan_lines": "–ó–∞–≥–∞—Ä –æ—Ç –±–∏–∫–∏–Ω–∏",
        "mask": "–ú–∞—Å–∫–∞", "heels": "–ö–∞–±–ª—É–∫–∏", "shibari": "–®–∏–±–∞—Ä–∏"
    },
    "body": {
        "big_breasts": "–ë–æ–ª—å—à–∞—è –≥—Ä—É–¥—å", "small_breasts": "–ú–∞–ª–µ–Ω—å–∫–∞—è –≥—Ä—É–¥—å",
        "skin_white": "–ë–µ–ª–∞—è –∫–æ–∂–∞", "skin_black": "–ß—ë—Ä–Ω–∞—è –∫–æ–∂–∞",
        "body_fat": "–ü—ã—à–Ω–æ–µ", "body_thin": "–•—É–¥–æ–µ", "body_normal": "–û–±—ã—á–Ω–æ–µ", "body_fit": "–ü–æ–¥—Ç—è–Ω—É—Ç–æ–µ",
        "body_muscular": "–ú—É—Å–∫—É–ª–∏—Å—Ç–æ–µ", "age_loli": "–õ–æ–ª–∏", "age_milf": "–ú–∏–ª—Ñ–∞",
        "age_21": "21 –≥–æ–¥", "cum": "–í—Å—è –≤ —Å–ø–µ—Ä–º–µ", "belly_bloat": "–í–∑–¥—É—Ç–∏–µ",
        "succubus_tattoo": "–¢–∞—Ç—É —Å—É–∫—É–±–∞"
    },
    "ethnos": {
        "futanari": "–§—É—Ç–∞–Ω–∞—Ä–∏", "femboy": "–§–µ–º–±–æ–π",
        "ethnicity_asian": "–ê–∑–∏–∞—Ç–∫–∞", "ethnicity_european": "–ï–≤—Ä–æ–ø–µ–π–∫–∞"
    },
    "furry": {
        "furry_cat": "–§—É—Ä–∏ –∫–æ—à–∫–∞", "furry_dog": "–§—É—Ä–∏ —Å–æ–±–∞–∫–∞",
        "furry_cow": "–§—É—Ä–∏ –∫–æ—Ä–æ–≤–∞", "furry_dragon": "–§—É—Ä–∏ –¥—Ä–∞–∫–æ–Ω",
        "furry_sylveon": "–§—É—Ä–∏ —Å–∏–ª—å–≤–µ–æ–Ω", "furry_bunny": "–§—É—Ä–∏ –∫—Ä–æ–ª–∏–∫",
        "furry_fox": "–§—É—Ä–∏ –ª–∏—Å–∏—Ü–∞", "furry_wolf": "–§—É—Ä–∏ –≤–æ–ª—á–∏—Ü–∞"
    },
    "head": {
        "ahegao": "–ê—Ö–µ–≥–∞–æ", "pain_face": "–õ–∏—Ü–æ –≤ –±–æ–ª–∏", "ecstasy_face": "–≠–∫—Å—Ç–∞–∑",
        "gold_lipstick": "–ó–æ–ª–æ—Ç–∞—è –ø–æ–º–∞–¥–∞", "hair_long": "–î–ª–∏–Ω–Ω—ã–µ –≤–æ–ª–æ—Å—ã",
        "hair_short": "–ö–æ—Ä–æ—Ç–∫–∏–µ –≤–æ–ª–æ—Å—ã", "hair_bob": "–ë–æ–±", "hair_ponytail": "–ö–æ–Ω—Å–∫–∏–π —Ö–≤–æ—Å—Ç",
        "hair_red": "–ö—Ä–∞—Å–Ω—ã–µ –≤–æ–ª–æ—Å—ã", "hair_white": "–ë–µ–ª—ã–µ –≤–æ–ª–æ—Å—ã", "hair_black": "–ß—ë—Ä–Ω—ã–µ –≤–æ–ª–æ—Å—ã"
    },
    "characters": {
        "rias": "–†–∏–∞—Å", "akeno": "–ê–∫–µ–Ω–æ", "kafka": "–ö–∞—Ñ–∫–∞",
        "eula": "–ï–æ–ª–∞", "fu_xuan": "–§—É –°—é–∞–Ω—å", "ayase": "–ê—è—Å–µ"
    },
    "view": {
        "view_top": "–°–≤–µ—Ä—Ö—É", "view_bottom": "–°–Ω–∏–∑—É",
        "view_side": "–°–±–æ–∫—É", "view_close": "–ë–ª–∏–∑–∫–æ", "view_full": "–î–∞–ª–µ–∫–æ"
    }
}

@bot.message_handler(commands=["start"])
def start(message):
    cid = message.chat.id
    user_settings[cid] = {"tags": [], "category": None, "count": 1}
    bot.send_message(cid, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

def main_menu():
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üß© –í—ã–±—Ä–∞—Ç—å —Ç–µ–≥–∏", callback_data="choose_tags"))
    kb.add(types.InlineKeyboardButton("üé® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="generate"))
    return kb

def category_menu():
    kb = types.InlineKeyboardMarkup(row_width=2)
    for key, name in CATEGORIES.items():
        kb.add(types.InlineKeyboardButton(name, callback_data=f"cat_{key}"))
    kb.add(types.InlineKeyboardButton("üì∏ –ö–æ–ª-–≤–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫", callback_data="count"))
    kb.add(types.InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="done_tags"))
    return kb

def tag_menu(cat, selected):
    kb = types.InlineKeyboardMarkup(row_width=2)
    for key, name in TAGS[cat].items():
        prefix = "‚úÖ " if key in selected else ""
        kb.add(types.InlineKeyboardButton(f"{prefix}{name}", callback_data=f"tag_{cat}_{key}"))
    kb.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_cat"))
    return kb

def count_menu():
    kb = types.InlineKeyboardMarkup(row_width=5)
    for i in range(1, 5):
        kb.add(types.InlineKeyboardButton(str(i), callback_data=f"count_{i}"))
    kb.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_cat"))
    return kb

@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    cid = call.message.chat.id
    data = call.data
    state = user_settings.setdefault(cid, {"tags": [], "category": None, "count": 1})

    if data == "choose_tags":
        bot.edit_message_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", cid, call.message.message_id, reply_markup=category_menu())
    elif data.startswith("cat_"):
        cat = data[4:]
        state["category"] = cat
        bot.edit_message_text(f"{CATEGORIES[cat]}:", cid, call.message.message_id, reply_markup=tag_menu(cat, state["tags"]))
    elif data.startswith("tag_"):
        _, cat, tag = data.split("_", 2)
        if tag in state["tags"]:
            state["tags"].remove(tag)
        else:
            state["tags"].append(tag)
        bot.edit_message_reply_markup(cid, call.message.message_id, reply_markup=tag_menu(cat, state["tags"]))
    elif data == "done_tags":
        bot.edit_message_text("–¢–µ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", cid, call.message.message_id, reply_markup=main_menu())
    elif data == "back_to_cat":
        bot.edit_message_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", cid, call.message.message_id, reply_markup=category_menu())
    elif data == "count":
        bot.edit_message_text("–°–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å?", cid, call.message.message_id, reply_markup=count_menu())
    elif data.startswith("count_"):
        state["count"] = int(data.split("_")[1])
        bot.edit_message_text(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {state['count']}", cid, call.message.message_id, reply_markup=category_menu())
    elif data == "generate":
        if not state["tags"]:
            bot.send_message(cid, "‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–µ–≥–∏.")
            return
        prompt = build_prompt(state["tags"])
        bot.send_message(cid, "‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...")
        urls = replicate_generate(prompt, state["count"])
        if urls:
            media = [types.InputMediaPhoto(u) for u in urls]
            bot.send_media_group(cid, media)
        else:
            bot.send_message(cid, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å.")

def build_prompt(tags):
    base = "nsfw, anime style, masterpiece, high detail, fully nude, no bra, no panties, no men, no male, no hands on chest"
    mapped = [tag.replace("_", " ") for tag in tags]
    return f"{base}, {', '.join(mapped)}"

def replicate_generate(prompt, num_outputs=1):
    url = "https://api.replicate.com/v1/predictions"
    headers = {"Authorization": f"Token {REPLICATE_TOKEN}", "Content-Type": "application/json"}
    json_data = {
        "version": REPLICATE_MODEL,
        "input": {
            "prompt": prompt,
            "negative_prompt": NEGATIVE_PROMPT,
            "num_outputs": num_outputs
        }
    }
    res = requests.post(url, headers=headers, json=json_data)
    if res.status_code != 201:
        return None
    status_url = res.json()["urls"]["get"]
    for _ in range(60):
        time.sleep(2)
        check = requests.get(status_url, headers=headers)
        if check.status_code == 200:
            data = check.json()
            if data["status"] == "succeeded":
                return data["output"] if isinstance(data["output"], list) else [data["output"]]
            elif data["status"] == "failed":
                return None
    return None

@app.route("/", methods=["POST"])
def webhook():
    bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))])
    return "ok", 200

@app.route("/", methods=["GET"])
def index():
    return "–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç", 200

if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)
    app.run(host="0.0.0.0", port=PORT)