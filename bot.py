import os
import time
import requests
import telebot
from telebot import types
from flask import Flask, request

API_TOKEN = os.getenv("TELEGRAM_TOKEN")
REPLICATE_TOKEN = os.getenv("REPLICATE_API_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://retete.onrender.com")

bot = telebot.TeleBot(API_TOKEN)
app = Flask(__name__)

# –ö–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞
KEYWORDS = {
    "anal": ["–∞–Ω–∞–ª", "–∞–Ω–∞–ª—å–Ω—ã–π —Å–µ–∫—Å"],
    "dildo": ["–¥–∏–ª–¥–æ", "–±–æ–ª—å—à–æ–π –¥–∏–ª–¥–æ", "–æ–≥—Ä–æ–º–Ω—ã–π –¥–∏–ª–¥–æ", "–∫–æ–Ω—Å–∫–∏–π –¥–∏–ª–¥–æ"],
    "positions": {
        "—Ä–∞–∫–æ–º": "doggy style",
        "–Ω–∞ –∫–æ—Ä—Ç–æ—á–∫–∞—Ö": "squatting",
        "–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç": "standing split"
    },
    "vagina": ["–≤–∏–¥–Ω–æ –∫–∏—Å–∫—É"],
    "breasts": {
        "–±–æ–ª—å—à–∞—è –≥—Ä—É–¥—å": "large breasts",
        "–º–∞–ª–µ–Ω—å–∫–∞—è –≥—Ä—É–¥—å": "small breasts"
    },
    "femboy": ["—Ñ–µ–º–±–æ–π"],
    "piercing": ["–ø–∏—Ä—Å–∏–Ω–≥"],
    "stockings": ["—á—É–ª–∫–∏"],
    "skin": {
        "–±–µ–ª–∞—è –∫–æ–∂–∞": "pale skin",
        "—á–µ—Ä–Ω–∞—è –∫–æ–∂–∞": "dark skin"
    },
    "ethnicity": {
        "–∞–∑–∏–∞—Ç": "asian",
        "–µ–≤—Ä–æ–ø–µ–µ—Ü": "european"
    }
}

# –ü–∞—Ä—Å–∏–Ω–≥ –æ–ø–∏—Å–∞–Ω–∏—è –≤ –ø—Ä–æ–º—Ç
def build_prompt(user_input):
    prompt = user_input
    additions = []

    lower = user_input.lower()

    for key, values in KEYWORDS.items():
        if isinstance(values, dict):
            for k, v in values.items():
                if k in lower:
                    additions.append(v)
        else:
            for v in values:
                if v in lower:
                    additions.append(v)

    if "—Ñ–µ–º–±–æ–π" in lower:
        additions.append("femboy, soft feminine face, slim body, flat chest, lingerie")

    # NSFW —É—Å–∏–ª–µ–Ω–∏—è
    additions += ["NSFW", "masterpiece", "ultra detailed", "realistic lighting", "high quality", "solo"]

    full_prompt = f"{prompt}, " + ", ".join(additions)
    return full_prompt

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Replicate
def generate_image(prompt):
    url = "https://api.replicate.com/v1/predictions"
    headers = {
        "Authorization": f"Token {REPLICATE_TOKEN}",
        "Content-Type": "application/json"
    }
    data = {
        "version": "fb4f086702d6a301ca32c170d926239324a7b7b2f0afc3d232a9c4be382dc3fa",
        "input": {"prompt": prompt}
    }
    r = requests.post(url, headers=headers, json=data)
    if r.status_code == 201:
        return r.json()["urls"]["get"]
    return None

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
def wait_for_image(status_url):
    headers = {"Authorization": f"Token {REPLICATE_TOKEN}"}
    for _ in range(40):
        r = requests.get(status_url, headers=headers)
        if r.status_code != 200:
            return None
        data = r.json()
        if data["status"] == "succeeded":
            return data["output"][0]
        elif data["status"] == "failed":
            return None
        time.sleep(2)
    return None

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é
def handle_generation(message):
    prompt = build_prompt(message.text)
    bot.send_message(message.chat.id, "üîû –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–¥–æ–∂–¥–∏...")

    status_url = generate_image(prompt)
    if not status_url:
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é.")
        return

    img_url = wait_for_image(status_url)
    if img_url:
        bot.send_photo(message.chat.id, img_url)
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

    show_options(message.chat.id)

# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–µ–º
def show_options(chat_id):
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("üçë –ê–Ω–∞–ª", callback_data="–∞–Ω–∞–ª"),
        types.InlineKeyboardButton("üçÜ –î–∏–ª–¥–æ", callback_data="–¥–∏–ª–¥–æ"),
        types.InlineKeyboardButton("üßë‚Äçüé§ –§–µ–º–±–æ–π", callback_data="—Ñ–µ–º–±–æ–π"),
        types.InlineKeyboardButton("üì∏ –°—Ü–µ–Ω–∞ —Å–µ–∫—Å–∞", callback_data="—Å–µ–∫—Å"),
        types.InlineKeyboardButton("üßç –ü–æ–∑—ã", callback_data="–ø–æ–∑—ã"),
        types.InlineKeyboardButton("üß¨ –¶–≤–µ—Ç –∫–æ–∂–∏", callback_data="—Ü–≤–µ—Ç"),
        types.InlineKeyboardButton("üåè –≠—Ç–Ω–æ—Å", callback_data="—ç—Ç–Ω–æ—Å")
    )
    bot.send_message(chat_id, "üìå –í—ã–±–µ—Ä–∏ —Ç–µ–º–∞—Ç–∏–∫—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å:", reply_markup=markup)

@bot.message_handler(commands=["start"])
def handle_start(message):
    show_options(message.chat.id)

@bot.message_handler(func=lambda m: True)
def handle_text(message):
    handle_generation(message)

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    text = {
        "–∞–Ω–∞–ª": "–ì–æ–ª–∞—è –¥–µ–≤—É—à–∫–∞, –∞–Ω–∞–ª—å–Ω—ã–π —Å–µ–∫—Å, –∫—Ä—É–ø–Ω—ã–π –ø–ª–∞–Ω, –≤–∏–¥–Ω–æ –∞–Ω—É—Å",
        "–¥–∏–ª–¥–æ": "–ì–æ–ª–∞—è –¥–µ–≤—É—à–∫–∞ —Å –¥–∏–ª–¥–æ –≤ –∞–Ω—É—Å–µ, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ, –∫—Ä—É–ø–Ω—ã–π –ø–ª–∞–Ω",
        "—Ñ–µ–º–±–æ–π": "–§–µ–º–±–æ–π –≤ —á—É–ª–∫–∞—Ö, –≤–∏–¥–Ω–æ –ø–µ–Ω–∏—Å, –∂–µ–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–æ–∑–∞, —ç—Ä–æ—Ç–∏—á–Ω–æ",
        "—Å–µ–∫—Å": "–î–µ–≤—É—à–∫–∞ —Å –¥–∏–ª–¥–æ –≤ –∞–Ω—É—Å–µ, —Å–µ–∫—Å—É–∞–ª—å–Ω–∞—è —Å—Ü–µ–Ω–∞, NSFW",
        "–ø–æ–∑—ã": "–ì–æ–ª–∞—è –¥–µ–≤—É—à–∫–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç, —ç—Ä–æ—Ç–∏—á–Ω–∞—è –ø–æ–∑–∞",
        "—Ü–≤–µ—Ç": "–ß–µ—Ä–Ω–∞—è –∫–æ–∂–∞, –≥–æ–ª–∞—è –¥–µ–≤—É—à–∫–∞, –∞–Ω–∞–ª—å–Ω–∞—è –ø–æ–∑–∞",
        "—ç—Ç–Ω–æ—Å": "–ê–∑–∏–∞—Ç–∫–∞ –≤ —á—É–ª–∫–∞—Ö, –±–æ–ª—å—à–∞—è –≥—Ä—É–¥—å, –∞–Ω–∞–ª—å–Ω—ã–π —Å–µ–∫—Å"
    }.get(call.data, "–ì–æ–ª–∞—è –¥–µ–≤—É—à–∫–∞, NSFW")

    handle_generation(telebot.types.Message(
        message_id=call.message.message_id,
        chat=call.message.chat,
        date=call.message.date,
        content_type='text',
        message_type='text',
        json_string='',
        from_user=call.from_user,
        text=text
    ))

# Webhook endpoints
@app.route('/', methods=['GET'])
def root():
    return "ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"

@app.route('/', methods=['POST'])
def webhook():
    update = telebot.types.Update.de_json(request.data.decode("utf-8"))
    bot.process_new_updates([update])
    return '', 200

if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(WEBHOOK_URL)
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))