import os
import json
import logging
import requests
from flask import Flask, request
from telebot import TeleBot, types

BOT_TOKEN = os.getenv("BOT_TOKEN")
REPLICATE_TOKEN = os.getenv("REPLICATE_TOKEN")
REPLICATE_MODEL = "aitechtree/nsfw-novel-generation"

bot = TeleBot(BOT_TOKEN)
app = Flask(__name__)
logging.basicConfig(level=logging.INFO)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
user_states = {}
user_tags = {}
user_model = {}

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–µ–≥–∏
CATEGORIES = {
    "–ø–µ—Ä—Å–æ–Ω–∞–∂–∏": ["–†–∏–∞—Å –ì—Ä–µ–º–æ—Ä–∏", "–ê–∫–µ–Ω–æ –•–∏–º–µ–¥–∑–∏–º–∞", "–ö–∞—Ñ–∫–∞", "–ï–æ–ª–∞", "–§—É –°—é–∞–Ω—å", "–ê—è—Å–µ –°–µ–π–∫–æ"],
    "–ø–æ–∑–∞": ["–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç", "–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç", "–Ω–∞ –±–æ–∫—É —Å –æ–¥–Ω–æ–π –Ω–æ–≥–æ–π –≤–≤–µ—Ä—Ö", "–ª—ë–∂–∞ –Ω–∞ —Å–ø–∏–Ω–µ —Å —Ä–∞–∑–¥–≤–∏–Ω—É—Ç—ã–º–∏ –Ω–æ–≥–∞–º–∏, —Å–æ–≥–Ω—É—Ç—ã–º–∏ –≤ –∫–æ–ª–µ–Ω—è—Ö", "–º–æ—Å—Ç", "–ø–æ–¥–≤–µ—à–µ–Ω–Ω–∞—è –Ω–∞ –≤–µ—Ä—ë–≤–∫–∞—Ö"],
    "–æ—Ç–≤–µ—Ä—Å—Ç–∏—è": ["–∞–Ω–∞–ª", "–≤–∞–≥–∏–Ω–∞", "–æ—Ä–∞–ª—å–Ω–æ"],
    "–∏–≥—Ä—É—à–∫–∏": ["–¥–∏–ª–¥–æ", "–¥–∏–ª–¥–æ –∏–∑ –∞–Ω—É—Å–∞ –≤—ã—Ö–æ–¥–∏—Ç –∏–∑–æ —Ä—Ç–∞"],
    "–≥–æ–ª–æ–≤–∞": ["–∞—Ö–µ–≥–∞–æ", "–ª–∏—Ü–æ –≤ –±–æ–ª–∏", "–ª–∏—Ü–æ –≤ —ç–∫—Å—Ç–∞–∑–µ", "–∑–æ–ª–æ—Ç–∞—è –ø–æ–º–∞–¥–∞"],
    "—Ñ—É—Ä–∏": ["–ª–∏—Å–∏—Ü–∞", "–∫—Ä–æ–ª–∏–∫", "–≤–æ–ª—á–∏—Ü–∞"],
    "—Å—Ü–µ–Ω–∞": ["–ª–∏—Ü–æ–º –∫ –∑—Ä–∏—Ç–µ–ª—é", "—Å–ø–∏–Ω–æ–π –∫ –∑—Ä–∏—Ç–µ–ª—é", "–≤–∏–¥ —Å–≤–µ—Ä—Ö—É", "–≤–∏–¥ —Å–Ω–∏–∑—É", "–≤–∏–¥ —Å–±–æ–∫—É", "–±–ª–∏–∂–µ", "–¥–∞–ª—å—à–µ"],
}

PROMPT_MAPPING = {
    "–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç": "girl doing a horizontal split on the floor, legs fully extended to both sides, viewed from front",
    "–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç": "girl doing a standing vertical split, one leg raised straight up, body stretched, viewed clearly",
    "–¥–∏–ª–¥–æ –∏–∑ –∞–Ω—É—Å–∞ –≤—ã—Ö–æ–¥–∏—Ç –∏–∑–æ —Ä—Ç–∞": "a single, realistic dildo entering anus and emerging from mouth, anatomically accurate, same color and texture",
    "–≤–∏–¥ —Å–≤–µ—Ä—Ö—É": "top-down view, camera above the girl",
    "–≤–∏–¥ —Å–Ω–∏–∑—É": "bottom-up view, as if under the floor, looking up at girl",
    "–≤–∏–¥ —Å–±–æ–∫—É": "side view, girl facing left or right",
    "–±–ª–∏–∂–µ": "close-up view of the girl",
    "–¥–∞–ª—å—à–µ": "distant full-body view of the girl",
}

NEGATIVE_PROMPT = "clothes, covering, censorship, hands covering, mosaic, blur, watermark, text, extra limbs, poorly drawn"

def build_prompt(tags):
    description = []
    for tag in tags:
        if tag in PROMPT_MAPPING:
            description.append(PROMPT_MAPPING[tag])
        else:
            description.append(tag)
    return ", ".join(description)

def generate_image(prompt):
    headers = {"Authorization": f"Token {REPLICATE_TOKEN}"}
    payload = {
        "version": "4d6740c8a246405d84341b7cbdf8d4c80926700124ba801bfcd5273768bb15a4",
        "input": {
            "prompt": prompt,
            "negative_prompt": NEGATIVE_PROMPT,
            "width": 512,
            "height": 768,
            "num_outputs": 1,
        }
    }
    response = requests.post("https://api.replicate.com/v1/predictions", headers=headers, json=payload)
    prediction = response.json()
    get_url = prediction["urls"]["get"]
    while True:
        result = requests.get(get_url, headers=headers).json()
        if result["status"] == "succeeded":
            return result["output"][0]
        elif result["status"] == "failed":
            return None

@bot.message_handler(commands=["start"])
def start(message):
    user_id = message.from_user.id
    user_states[user_id] = "selecting_category"
    user_tags[user_id] = []
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for category in CATEGORIES:
        markup.add(category)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–µ–≥–æ–≤:", reply_markup=markup)

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == "selecting_category")
def select_category(message):
    category = message.text
    user_id = message.from_user.id
    if category in CATEGORIES:
        markup = types.InlineKeyboardMarkup(row_width=2)
        for tag in CATEGORIES[category]:
            text = f"‚úÖ {tag}" if tag in user_tags[user_id] else tag
            markup.add(types.InlineKeyboardButton(text, callback_data=f"tag|{tag}"))
        markup.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back"))
        markup.add(types.InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="done"))
        bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏ —Ç–µ–≥–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("tag|"))
def toggle_tag(call):
    tag = call.data.split("|")[1]
    user_id = call.from_user.id
    if tag in user_tags[user_id]:
        user_tags[user_id].remove(tag)
    else:
        user_tags[user_id].append(tag)
    bot.answer_callback_query(call.id)
    select_category(call.message)

@bot.callback_query_handler(func=lambda call: call.data == "back")
def go_back(call):
    user_id = call.from_user.id
    start(call.message)

@bot.callback_query_handler(func=lambda call: call.data == "done")
def done_tag_selection(call):
    user_id = call.from_user.id
    prompt = build_prompt(user_tags[user_id])
    bot.send_message(call.message.chat.id, "–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
    image_url = generate_image(prompt)
    if image_url:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîÅ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —ç—Ç–∏–º–∏ —Ç–µ–≥–∞–º–∏", callback_data="done"))
        markup.add(types.InlineKeyboardButton("üéØ –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥–∏", callback_data="back"))
        markup.add(types.InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart"))
        bot.send_photo(call.message.chat.id, image_url, reply_markup=markup)
    else:
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

@bot.callback_query_handler(func=lambda call: call.data == "restart")
def restart(call):
    user_id = call.from_user.id
    user_tags[user_id] = []
    start(call.message)

@app.route(f"/{BOT_TOKEN}", methods=["POST"])
def webhook():
    bot.process_new_updates([types.Update.de_json(request.stream.read().decode("utf-8"))])
    return "ok", 200

@app.route("/", methods=["GET"])
def index():
    return "Bot is running", 200

if __name__ == "__main__":
    import time
    time.sleep(1)
    bot.remove_webhook()
    bot.set_webhook(url=os.getenv("WEBHOOK_URL") + f"/{BOT_TOKEN}")
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
