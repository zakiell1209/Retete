import os
import time
import requests
from flask import Flask, request
import telebot
from telebot import types

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏ URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("TELEGRAM_TOKEN")
REPLICATE_TOKEN = os.getenv("REPLICATE_API_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.environ.get("PORT", 5000))

# ID –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏ Replicate, –∫–æ—Ç–æ—Ä—É—é –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ
REPLICATE_MODEL = "80441e2c32a55f2fcf9b77fa0a74c6c86ad7deac51eed722b9faedb253265cb4"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
bot = telebot.TeleBot(API_TOKEN)
app = Flask(__name__)
user_settings = {} # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# --- –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –º–µ–Ω—é ---
CATEGORY_NAMES = {
    "holes": "üï≥Ô∏è –û—Ç–≤–µ—Ä—Å—Ç–∏—è",
    "toys": "üß∏ –ò–≥—Ä—É—à–∫–∏",
    "poses": "üßò –ü–æ–∑—ã",
    "clothes": "üëó –û–¥–µ–∂–¥–∞",
    "body": "üí™ –¢–µ–ª–æ",
    "ethnos": "üåç –≠—Ç–Ω–æ—Å",
    "furry": "üêæ –§—É—Ä–∏",
    "characters": "ü¶∏ –ü–µ—Ä—Å–æ–Ω–∞–∂–∏",
    "head": "ü§Ø –ì–æ–ª–æ–≤–∞",
    "fetish": "üîó –§–µ—Ç–∏—à–∏",
    "pokemon": "‚ö° –ü–æ–∫–µ–º–æ–Ω—ã"
}

# --- –¢–µ–≥–∏ —Å –Ω–æ–≤—ã–º–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è–º–∏ ---
TAGS = {
    "holes": {
        "vagina": "–í–∞–≥–∏–Ω–∞",
        "anus": "–ê–Ω—É—Å",
        "both": "–í–∞–≥–∏–Ω–∞ –∏ –∞–Ω—É—Å",
        "dilated_anus": "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω—É—Å",
        "dilated_vagina": "–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∫–∏—Å–∫–∞",
        "prolapsed_uterus": "–í—ã–ø–∞–≤—à–∞—è –º–∞—Ç–∫–∞",
        "prolapsed_anus": "–í—ã–ø–∞–≤—à–∏–π –∞–Ω—É—Å",
        "two_dildos_one_hole": "–î–≤–∞ –¥–∏–ª–¥–æ –≤ –æ–¥–Ω–æ –æ—Ç–≤–µ—Ä—Å—Ç–∏–µ"
    },
    "toys": {
        "dildo": "–î–∏–ª–¥–æ",
        "huge_dildo": "–ë–æ–ª—å—à–æ–µ –¥–∏–ª–¥–æ",
        "horse_dildo": "–ö–æ–Ω—Å–∫–∏–π –¥–∏–ª–¥–æ",
        "anal_beads": "–ê–Ω–∞–ª—å–Ω—ã–µ —à–∞—Ä–∏–∫–∏",
        "anal_plug": "–ê–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–±–∫–∞",
        "long_dildo_path": "–î–∏–ª–¥–æ —Å–∫–≤–æ–∑—å –≤—Å–µ —Ç–µ–ª–æ"
    },
    "poses": {
        "doggy": "–ù–∞ —á–µ—Ç–≤–µ—Ä–µ–Ω—å–∫–∞—Ö",
        "standing": "–°—Ç–æ—è",
        "squat": "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏–µ",
        "lying": "–õ–µ–∂–∞",
        "hor_split": "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç",
        "ver_split": "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç",
        "on_back_legs_behind_head": "–ù–∞ —Å–ø–∏–Ω–µ –Ω–æ–≥–∏ –∑–∞ –≥–æ–ª–æ–≤–æ–π",
        "on_side_leg_up": "–ù–∞ –±–æ–∫—É –Ω–æ–≥–∞ –≤–≤–µ—Ä—Ö",
        "suspended": "–ü–æ–¥–≤–µ—à–µ–Ω–∞",
        "front_facing": "–í–∏–¥ —Å–ø–µ—Ä–µ–¥–∏",
        "back_facing": "–í–∏–¥ —Å–∑–∞–¥–∏",
        "top_down_view": "–í–∏–¥ —Å–≤–µ—Ä—Ö—É",
        "bottom_up_view": "–í–∏–¥ —Å–Ω–∏–∑—É",
        "hands_spreading_vagina": "–†—É–∫–∏ —Ä–∞–∑–¥–≤–∏–≥–∞—é—Ç –≤–ª–∞–≥–∞–ª–∏—â–µ"
    },
    "clothes": {
        "stockings": "–ß—É–ª–∫–∏ –æ–±—ã—á–Ω—ã–µ",
        "stockings_fishnet": "–ß—É–ª–∫–∏ —Å–µ—Ç–æ—á–∫–æ–π",
        "bikini_tan_lines": "–õ–∏–Ω–∏–∏ –æ—Ç –∑–∞–≥–∞—Ä–∞ –≤ –±–∏–∫–∏–Ω–∏",
        "shibari": "–®–∏–±–∞—Ä–∏",
        "cow_costume": "–ö–æ—Å—Ç—é–º –∫–æ—Ä–æ–≤—ã"
    },
    "body": {
        "big_breasts": "–ë–æ–ª—å—à–∞—è –≥—Ä—É–¥—å",
        "small_breasts": "–ú–∞–ª–µ–Ω—å–∫–∞—è –≥—Ä—É–¥—å",
        "body_fit": "–ü–æ–¥—Ç—è–Ω—É—Ç–æ–µ —Ç–µ–ª–æ",
        "body_fat": "–ü—ã—à–Ω–æ–µ —Ç–µ–ª–æ",
        "body_muscular": "–ú—É—Å–∫—É–ª–∏—Å—Ç–æ–µ —Ç–µ–ª–æ",
        "age_loli": "–õ–æ–ª–∏",
        "age_milf": "–ú–∏–ª—Ñ–∞",
        "age_21": "21 –≥–æ–¥",
        "cum": "–í—Å—è –≤ —Å–ø–µ—Ä–º–µ",
        "belly_bloat": "–í–∑–¥—É—Ç–∏–µ –∂–∏–≤–æ—Ç–∞ (–ø–æ—Ö–æ–∂–µ –Ω–∞ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å)",
        "succubus_tattoo": "–¢–∞—Ç—É–∏—Ä–æ–≤–∫–∞ —Å—É–∫–∫—É–±–∞"
    },
    "ethnos": {
        "futanari": "–§—É—Ç–∞–Ω–∞—Ä–∏",
        "femboy": "–§–µ–º–±–æ–π",
        "ethnicity_asian": "–ê–∑–∏–∞—Ç–∫–∞",
        "ethnicity_european": "–ï–≤—Ä–æ–ø–µ–π–∫–∞"
    },
    "furry": {
        "furry_cow": "–§—É—Ä–∏ –∫–æ—Ä–æ–≤–∞",
        "furry_cat": "–§—É—Ä–∏ –∫–æ—à–∫–∞",
        "furry_dog": "–§—É—Ä–∏ —Å–æ–±–∞–∫–∞",
        "furry_dragon": "–§—É—Ä–∏ –¥—Ä–∞–∫–æ–Ω",
        "furry_sylveon": "–§—É—Ä–∏ —Å–∏–ª—å–≤–µ–æ–Ω",
        "furry_fox": "–§—É—Ä–∏ –ª–∏—Å–∏—Ü–∞",
        "furry_bunny": "–§—É—Ä–∏ –∫—Ä–æ–ª–∏–∫",
        "furry_wolf": "–§—É—Ä–∏ –≤–æ–ª—á–∏—Ü–∞"
    },
    "head": {
        "ahegao": "–ê—Ö–µ–≥–∞–æ",
        "pain_face": "–õ–∏—Ü–æ –≤ –±–æ–ª–∏",
        "ecstasy_face": "–õ–∏—Ü–æ –≤ —ç–∫—Å—Ç–∞–∑–µ",
        "gold_lipstick": "–ó–æ–ª–æ—Ç–∞—è –ø–æ–º–∞–¥–∞"
    },
    "fetish": {
        "nipple_piercing": "–ü–∏—Ä—Å–∏–Ω–≥ —Å–æ—Å–∫–æ–≤",
        "clitoral_piercing": "–ü–∏—Ä—Å–∏–Ω–≥ –∫–ª–∏—Ç–æ—Ä–∞",
        "foot_fetish": "–§—É—Ç—Ñ–µ—Ç–∏—à",
        "footjob": "–§—É—Ç–¥–∂–æ–±",
        "mouth_nipples": "–í–º–µ—Å—Ç–æ —Å–æ—Å–∫–æ–≤ —Ä—Ç—ã"
    },
    "pokemon": {
        "reshiram": "–†–µ—à–∏—Ä–∞–º",
        "mew": "–ú—é",
        "mewtwo": "–ú—é—Ç—É",
        "gardevoir": "–ì–∞—Ä–¥–µ–≤—É–∞—Ä"
    },
    "characters": {
        "rias": "–†–∏–∞—Å –ì—Ä–µ–≥–æ—Ä–∏",
        "akeno": "–ê–∫–µ–Ω–æ –•–∏–º–µ–¥–∂–∏–º–∞",
        "kafka": "–ö–∞—Ñ–∫–∞",
        "eula": "–ï–æ–ª–∞",
        "fu_xuan": "–§—É –°—é–∞–Ω—å",
        "yor_forger": "–ô–æ—Ä –§–æ—Ä–¥–∂–µ—Ä",
        "2b_nier": "2B (NieR Automata)",
        "esdeath": "–ï—Å–¥–µ—Å",
        "formidable": "Formidable",
        "sparkle": "–ò—Å–∫–æ—Ä–∫–∞",
        "acheron": "–ì–µ–æ—Ü–∏–Ω–∞",
        "castoria": "–ö–∞—Å—Ç–æ—Ä–∏—è",
        "lady_dimitrescu": "–õ–µ–¥–∏ –î–∏–º–∏—Ç—Ä–µ—Å–∫—É",
        "chun_li": "–ß—É–Ω –õ–∏",
        "atomic_heart_twins": "–ë–ª–∏–∑–Ω—è—à–∫–∏ (Atomic Heart)",
        "yoruichi_shihoin": "–®–∏—Ö–æ–∏–Ω –ô–æ—Ä–∏–∏—á–∏",
        "saber": "–°–µ–π–±–µ—Ä",
        "mona": "–ú–æ–Ω–∞",
        "klee": "–ö–ª–∏",
        "raiden_shogun": "–†–∞–π–¥–µ–Ω",
        "astolfo": "–ê—Å—Ç–æ–ª—å—Ñ–æ",
        "hestia": "–ì–µ—Å—Ç–∏—è",
        "lucifer_helltaker": "–õ—é—Ü–∏—Ñ–µ—Ä (Helltaker)",
        "freya_danmachi": "–§—Ä–µ—è (Danmachi)",
        "aphrodite_ragnarok": "–ê—Ñ—Ä–æ–¥–∏—Ç–∞ (–ü–æ–≤–µ—Å—Ç—å –æ –∫–æ–Ω—Ü–µ —Å–≤–µ—Ç–∞)",
        "hinata_naruto": "–•–∏–Ω–∞—Ç–∞ (–ù–∞—Ä—É—Ç–æ)",
        "tsunade_naruto": "–¶—É–Ω–∞–¥–µ (–ù–∞—Ä—É—Ç–æ)",
        "albedo_overlord": "–ê–ª—å–±–µ–¥–æ (–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å)",
        "shalltear_overlord": "–®–∞–ª—Ç–∏—Ä (–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å)",
        "yumeko_kakegurui": "–Æ–º–µ–∫–æ –î–∂–∞–±–∞–º–∏ (–ë–µ–∑—É–º–Ω—ã–π –∞–∑–∞—Ä—Ç)",
        "kirari_kakegurui": "–ö–∏—Ä–∞—Ä–∏ –ú–æ–º–æ–±–∞–º–∏ (–ë–µ–∑—É–º–Ω—ã–π –∞–∑–∞—Ä—Ç)",
        "mary_kakegurui": "–ú—ç—Ä–∏ –°–∞–æ—Ç–æ–º—ç (–ë–µ–∑—É–º–Ω—ã–π –∞–∑–∞—Ä—Ç)",
        "mei_mei_jujutsu": "–ú—ç–π –ú—ç–π (–ú–∞–≥–∏—á–µ—Å–∫–∞—è –±–∏—Ç–≤–∞)",
        "jessie_pokemon": "–î–∂–µ—Å—Å–∏ (–ü–æ–∫–µ–º–æ–Ω—ã)",
        "lusamine_pokemon": "–õ—É—Å–∞–º–∏–Ω–µ (–ü–æ–∫–µ–º–æ–Ω—ã)",
        "umbreon_pokemon": "–≠–º–±—Ä–µ–æ–Ω (–ü–æ–∫–µ–º–æ–Ω—ã)",
        "lugia_pokemon": "–õ—É–≥–∏—è (–ü–æ–∫–µ–º–æ–Ω—ã)",
        "shadow_lugia_pokemon": "–®–∞–¥–æ—É –õ—É–≥–∏—è (–ü–æ–∫–µ–º–æ–Ω—ã)",
        "lopunny_pokemon": "–õ–æ–ø–∞–Ω–Ω–∏ (–ü–æ–∫–µ–º–æ–Ω—ã)",
        "goodra_pokemon": "–ì—É–¥—Ä–∞ (–ü–æ–∫–µ–º–æ–Ω—ã)",
        "paimon_genshin": "–ü–∞–π–º–æ–Ω (Genshin Impact)",
        "ellen_joe_zzz": "–≠–ª–ª–µ–Ω –î–∂–æ (Zenless Zone Zero)",
        "mirelia_melromarc": "–ú–∏—Ä–µ–ª–∏—è –ö. –ú–µ–ª—Ä–æ–º–∞—Ä–∫ (–ì–µ—Ä–æ–π –©–∏—Ç–∞)",
        "malty_melromarc": "–ú–∞–ª—Ç–∏ –°. –ú–µ–ª—Ä–æ–º–∞—Ä–∫ (–ì–µ—Ä–æ–π –©–∏—Ç–∞)",
        "xenovia_quarta": "–ö—Å–µ–Ω–æ–≤–∏—è –ö–≤–∞—Ä—Ç–∞ (–î–µ–º–æ–Ω—ã —Å—Ç–∞—Ä—à–µ–π —à–∫–æ–ª—ã)",
        "serafall_leviathan": "–°–µ—Ä–∞—Ñ–∞–ª–ª –õ–µ–≤–∏–∞—Ñ–∞–Ω (–î–µ–º–æ–Ω—ã —Å—Ç–∞—Ä—à–µ–π —à–∫–æ–ª—ã)",
        "asia_argento": "–ê–∑–∏—è –ê—Ä–¥–∂–µ–Ω—Ç–æ (–î–µ–º–æ–Ω—ã —Å—Ç–∞—Ä—à–µ–π —à–∫–æ–ª—ã)",
        "koneko_toujou": "–ö–æ–Ω–µ–∫–æ –¢–æ–¥–∑—ë (–î–µ–º–æ–Ω—ã —Å—Ç–∞—Ä—à–µ–π —à–∫–æ–ª—ã)",
        "shidou_irina": "–®–∏–¥–æ –ò—Ä–∏–Ω–∞ (–î–µ–º–æ–Ω—ã —Å—Ç–∞—Ä—à–µ–π —à–∫–æ–ª—ã)",
        "gasper_vladi": "–ì–∞—Å–ø–µ—Ä –í–ª–∞–¥–∏ (–î–µ–º–æ–Ω—ã —Å—Ç–∞—Ä—à–µ–π —à–∫–æ–ª—ã)",
        "rossweisse_dxd": "–†–æ—Å—Å–≤–∞–π—Å—Å–µ (–î–µ–º–æ–Ω—ã —Å—Ç–∞—Ä—à–µ–π —à–∫–æ–ª—ã)",
        "yasaka_dxd": "–Ø—Å–∞–∫–∞ (High School DxD)",
        "grayfia_lucifuge": "–ì—Ä–µ–π—Ñ–∏—è –õ—é—Ü–∏—Ñ—É–≥ (–î–µ–º–æ–Ω—ã —Å—Ç–∞—Ä—à–µ–π —à–∫–æ–ª—ã)"
    }
}

# --- –ü—Ä–æ–º–ø—Ç—ã –¥–ª—è –º–æ–¥–µ–ª–∏ ---
CHARACTER_EXTRA = {
    "rias": "rias gremory, red long hair, blue eyes, pale skin, large breasts, highschool dxd",
    "akeno": "akeno himejima, long black hair, purple eyes, large breasts, highschool dxd",
    "kafka": "kafka, purple wavy hair, cold expression, honkai star rail",
    "eula": "eula, light blue hair, fair skin, genshin impact",
    "fu_xuan": "fu xuan, pink hair, honkai star rail",
    "yor_forger": "yor forger, spy x family, black hair, red dress",
    "2b_nier": "2b, nier automata, white hair, black dress",
    "esdeath": "esdeath, akame ga kill, blue hair, military uniform, high heels",
    "formidable": "formidable, azur lane, long white hair, dress",
    "sparkle": "sparkle, honkai star rail, pink hair, elegant dress, theatrical",
    "acheron": "acheron, honkai star rail, purple hair, long coat, samurai",
    "castoria": "castoria, fate grand order, white hair, dress, long sleeves",
    "lady_dimitrescu": "lady dimitrescu, resident evil, tall female, white dress, elegant hat, sharp claws, mature female",
    "chun_li": "chun li, street fighter, muscular thighs, qipao, hair buns",
    "atomic_heart_twins": "robot, twin sisters, black bodysuit, black hair, white hair, atomic heart",
    "yoruichi_shihoin": "yoruichi shihoin, bleach, dark skin, purple hair",
    "saber": "saber, artoria pendragon, fate series, blonde hair, blue dress",
    "mona": "mona, genshin impact, black hair, leotard, golden headdress",
    "klee": "klee, genshin impact, blonde hair, red dress, explosive",
    "raiden_shogun": "raiden shogun, genshin impact, purple hair, kimono, electro archon",
    "astolfo": "astolfo, fate series, pink hair, femboy, androgynous",
    "hestia": "hestia, danmachi, black hair, blue ribbons, white dress",
    "lucifer_helltaker": "lucifer, helltaker, long black hair, business suit",
    "freya_danmachi": "freya, danmachi, long silver hair, purple eyes, elegant dress",
    "aphrodite_ragnarok": "aphrodite, record of ragnarok, large breasts, blonde hair, revealing outfit",
    "hinata_naruto": "hinata hyuga, naruto, long dark blue hair, byakugan, shy, large breasts",
    "tsunade_naruto": "tsunade, naruto, blonde hair, large breasts, strong, medical ninja",
    "albedo_overlord": "albedo, overlord, succubus, black wings, white dress, long black hair",
    "shalltear_overlord": "shalltear bloodfallen, overlord, vampire, short blonde hair, frilly dress, parasol",
    "yumeko_kakegurui": "yumeko jabami, kakegurui, long black hair, red eyes, school uniform, insane smile",
    "kirari_kakegurui": "kirari momobami, kakegurui, white hair, blue lips, school uniform, student council president",
    "mary_kakegurui": "mary saotome, kakegurui, blonde hair, school uniform, twin tails",
    "mei_mei_jujutsu": "mei mei, jujutsu kaisen, long black hair, axe, confident expression",
    # --- –ù–æ–≤—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏ ---
    "jessie_pokemon": "jessie, pokemon, team rocket, red hair, long hair, ponytail",
    "lusamine_pokemon": "lusamine, pokemon, aether foundation, blonde hair, long hair, dress",
    "umbreon_pokemon": "umbreon, pokemon, dark type, quadruped, black fur, yellow rings",
    "lugia_pokemon": "lugia, pokemon, legendary pokemon, psychic type, flying type, white body, blue fins",
    "shadow_lugia_pokemon": "shadow lugia, pokemon, legendary pokemon, dark type, flying type, corrupted, dark aura",
    "lopunny_pokemon": "lopunny, pokemon, normal type, fighting type, rabbit, furry, long ears, fluffy tail",
    "goodra_pokemon": "goodra, pokemon, dragon type, gooey, slimy skin, soft body",
    "paimon_genshin": "paimon, genshin impact, floating companion, small body, white hair, crown, emergency food",
    "ellen_joe_zzz": "ellen joe, zenless zone zero, long blonde hair, school uniform, glasses, student",
    "mirelia_melromarc": "mirelia q melromarc, the rising of the shield hero, queen, blonde hair, elegant dress",
    "malty_melromarc": "malty s melromarc, the rising of the shield hero, bitch, cruel smile, red hair, blonde hair, princess, villainess",
    "xenovia_quarta": "xenovia quarta, highschool dxd, blue hair, short hair, sword, holy sword, devil wings, nun uniform",
    "serafall_leviathan": "serafall leviathan, highschool dxd, magical girl outfit, pink hair, magical wand, devil, large breasts",
    "asia_argento": "asia argento, highschool dxd, blonde hair, long hair, nun, innocent, healing magic, dragon slayer, devil wings",
    "koneko_toujou": "koneko toujou, highschool dxd, white hair, cat ears, cat tail, small breasts, stoic expression",
    "shidou_irina": "shidou irina, highschool dxd, blonde hair, twin tails, energetic, holy sword, angel wings, exorcist",
    "gasper_vladi": "gasper vladi, highschool dxd, male, trap, feminine clothing, long blonde hair, shy, vampire, crossdresser",
    "rossweisse_dxd": "rossweisse, highschool dxd, valkyrie, long silver hair, glasses, mature, large breasts",
    "yasaka_dxd": "yasaka, highschool dxd, kitsune, nine tails, fox ears, kimono, mature woman",
    "grayfia_lucifuge": "grayfia lucifuge, highschool dxd, maid outfit, long silver hair, red eyes, ice magic, sexy maid"
}

TAG_PROMPTS = {
    **CHARACTER_EXTRA,
    "vagina": "spread pussy",
    "anus": "spread anus",
    "both": "spread pussy and anus",
    "dilated_anus": "dilated anus, anus stretched, open anus, internal view of anus, anus gaping",
    "dilated_vagina": "dilated vagina, vagina stretched, open pussy, internal view of vagina, vagina gaping, spread pussy, labia spread, realistic, detailed, high focus",
    "prolapsed_uterus": "prolapsed uterus, uterus exposed, visible uterus",
    "prolapsed_anus": "prolapsed anus, anus exposed, visible anus",
    "two_dildos_one_hole": "two dildos inserted, two dildos into one orifice",
    "dildo": "dildo inserted",
    "huge_dildo": "huge dildo",
    "horse_dildo": "horse dildo",
    "anal_beads": "anal beads inserted",
    "anal_plug": "anal plug",
    "long_dildo_path": (
        "dildo inserted into anus, pushing visibly through intestines with clear belly bulge, "
        "exiting from mouth, seamless and continuous dildo, consistent texture, realistic rubber"
    ),
    "doggy": "doggy style, on all fours, hands on floor",
    "squat": "squatting pose, hands behind head",
    "lying": "lying down",
    "hor_split": "horizontal split, legs stretched fully to sides, pelvis on floor, inner thighs visible",
    "ver_split": "vertical split, holding own raised leg",
    "on_back_legs_behind_head": "on back, legs behind head",
    "on_side_leg_up": "on side with leg raised",
    "suspended": "suspended",
    "front_facing": "front to viewer",
    "back_facing": "back to viewer",
    "top_down_view": "shot from above, top-down view",
    "bottom_up_view": "shot from below, bottom-up view",
    "hands_spreading_vagina": "hands spreading vagina",
    "stockings": "wearing stockings only",
    "stockings_fishnet": "fishnet stockings",
    "bikini_tan_lines": "bikini tan lines",
    "shibari": "shibari ropes",
    "cow_costume": "cow costume, cow ears, cow horns, cow tail, wearing stockings only",
    "big_breasts": "big breasts",
    "small_breasts": "small breasts",
    "body_fit": "fit body",
    "body_fat": "curvy body",
    "body_muscular": "muscular body",
    "age_loli": "loli",
    "age_milf": "milf",
    "age_21": "age 21",
    "cum": "cum covered",
    "belly_bloat": "belly bulge, pregnant looking belly",
    "succubus_tattoo": "succubus tattoo on lower abdomen",
    "futanari": "futanari",
    "femboy": "male, boy, very feminine body, femboy, androgynous, flat chest, penis, testicles, thin waist, wide hips, boyish hips, no breasts",
    "ethnicity_asian": "asian girl",
    "ethnicity_european": "european girl",
    "furry_cow": "furry cow girl, cow costume",
    "furry_cat": "furry cat girl, cat costume",
    "furry_dog": "furry dog girl, dog costume",
    "furry_dragon": "furry dragon girl, dragon costume",
    "furry_sylveon": "furry sylveon, sylveon costume, pink, ribbons, sexy",
    "furry_fox": "furry fox girl, fox costume",
    "furry_bunny": "furry bunny girl, bunny costume",
    "furry_wolf": "furry wolf girl, wolf costume",
    "ahegao": "ahegao face",
    "pain_face": "face in pain",
    "ecstasy_face": "ecstasy face",
    "gold_lipstick": "gold lipstick",
    "nipple_piercing": "nipple piercing",
    "clitoral_piercing": "clitoral piercing",
    "foot_fetish": "foot fetish",
    "footjob": "footjob",
    "mouth_nipples": "mouths instead of nipples",
    "reshiram": "reshiram, pokemon",
    "mew": "mew, pokemon",
    "mewtwo": "mewtwo, pokemon",
    "gardevoir": "gardevoir, pokemon"
}

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä ---
def main_menu():
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞."""
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üß© –í—ã–±—Ä–∞—Ç—å —Ç–µ–≥–∏", callback_data="choose_tags"))
    kb.add(types.InlineKeyboardButton("üé® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="generate"))
    return kb

def category_menu():
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–µ–≥–æ–≤."""
    kb = types.InlineKeyboardMarkup(row_width=2)
    for key, name in CATEGORY_NAMES.items():
        kb.add(types.InlineKeyboardButton(name, callback_data=f"cat_{key}"))
    kb.add(types.InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="done_tags"))
    return kb

def tag_menu(category, selected_tags):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–æ–≤ –≤–Ω—É—Ç—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    kb = types.InlineKeyboardMarkup(row_width=2)
    for tag_key, tag_name in TAGS[category].items():
        label = f"‚úÖ {tag_name}" if tag_key in selected_tags else tag_name
        kb.add(types.InlineKeyboardButton(label, callback_data=f"tag_{category}_{tag_key}"))
    kb.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_cat"))
    return kb

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–ª–±—ç–∫–æ–≤ ---
@bot.message_handler(commands=["start"])
def start(msg):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    cid = msg.chat.id
    user_settings[cid] = {"tags": [], "last_cat": None}
    bot.send_message(cid, "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –¥–µ–ª–∞–µ–º?", reply_markup=main_menu())

@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –∫–æ–ª–±—ç–∫–∞."""
    cid = call.message.chat.id
    if cid not in user_settings:
        user_settings[cid] = {"tags": [], "last_cat": None}

    data = call.data

    if data == "choose_tags":
        bot.edit_message_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–µ–≥–æ–≤:", cid, call.message.message_id, reply_markup=category_menu())

    elif data.startswith("cat_"):
        cat = data[4:]
        user_settings[cid]["last_cat"] = cat
        selected = user_settings[cid]["tags"]
        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å–æ —Å–º–∞–π–ª–∏–∫–æ–º
        category_display_name = CATEGORY_NAMES.get(cat, cat)
        bot.edit_message_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_display_name}", cid, call.message.message_id, reply_markup=tag_menu(cat, selected))

    elif data.startswith("tag_"):
        _, cat, tag = data.split("_", 2)
        tags = user_settings[cid]["tags"]
        if tag in tags:
            tags.remove(tag)
        else:
            tags.append(tag)
        bot.edit_message_reply_markup(cid, call.message.message_id, reply_markup=tag_menu(cat, tags))

    elif data == "done_tags":
        bot.edit_message_text("–¢–µ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", cid, call.message.message_id, reply_markup=main_menu())

    elif data == "back_to_cat":
        bot.edit_message_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", cid, call.message.message_id, reply_markup=category_menu())

    elif data == "generate":
        tags = user_settings[cid]["tags"]
        if not tags:
            bot.send_message(cid, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–µ–≥–∏!")
            return

        prompt_info = build_prompt(tags)
        positive_prompt = prompt_info["positive_prompt"]
        negative_prompt = prompt_info["negative_prompt"]
        
        user_settings[cid]["last_prompt_tags"] = tags.copy()

        bot.send_message(cid, "‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        url = replicate_generate(positive_prompt, negative_prompt)
        if url:
            kb = types.InlineKeyboardMarkup()
            kb.add(
                types.InlineKeyboardButton("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start"),
                types.InlineKeyboardButton("üîß –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥–∏", callback_data="edit_tags"),
                types.InlineKeyboardButton("‚û° –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —ç—Ç–∏–º–∏", callback_data="generate")
            )
            bot.send_photo(cid, url, caption="‚úÖ –ì–æ—Ç–æ–≤–æ!", reply_markup=kb)
        else:
            bot.send_message(cid, "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    elif data == "edit_tags":
        if "last_prompt_tags" in user_settings[cid]:
            user_settings[cid]["tags"] = user_settings[cid]["last_prompt_tags"]
            bot.send_message(cid, "–ò–∑–º–µ–Ω—è–µ–º —Ç–µ–≥–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", reply_markup=category_menu())
        else:
            bot.send_message(cid, "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π –≥–µ–Ω–µ—Ä–∞—Ü–∏—é.")

    elif data == "start":
        user_settings[cid] = {"tags": [], "last_cat": None}
        bot.send_message(cid, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã. –ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ!", reply_markup=main_menu())

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ–≥–∞ ---
def tag_category(tag):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫ –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Ç–µ–≥."""
    for cat, items in TAGS.items():
        if tag in items:
            if cat in ["body", "ethnos"]: # –û–±—ä–µ–¥–∏–Ω—è–µ–º "body" –∏ "ethnos" –≤ –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é "body" –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
                return "body"
            if cat == "poses":
                return "pose"
            if cat == "holes":
                return "holes"
            if cat == "toys":
                return "toys"
            if cat == "clothes":
                return "clothes"
            if cat == "fetish":
                return "fetish"
            if cat == "head": # "head" –¥–ª—è –ª–∏—Ü–∞
                return "face"
            if cat == "pokemon":
                return "pokemon"
            if cat == "characters": # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
                return "character"
    return None

# --- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ ---
def build_prompt(tags):
    """
    –°—Ç—Ä–æ–∏—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –º–æ–¥–µ–ª–∏ Replicate –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤,
    –∏—Å–ø–æ–ª—å–∑—É—è –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤.
    """
    base = [
        "masterpiece", "best quality", "ultra detailed", "anime style", "highly detailed",
        "expressive eyes", "perfect lighting", "volumetric lighting", "fully nude", "solo"
    ]

    priority = {
        "character": [],
        "furry": [],
        "body": [],
        "pose": [],
        "holes": [],
        "toys": [],
        "clothes": [],
        "fetish": [],
        "face": [],
        "pokemon": []
    }
    
    base_negative = (
        "lowres, bad anatomy, bad hands, bad face, deformed, disfigured, poorly drawn, "
        "missing limbs, extra limbs, fused fingers, jpeg artifacts, signature, watermark, "
        "blurry, cropped, worst quality, low quality, text, error, mutated, censored, "
        "hands on chest, hands covering breasts, clothing covering genitals, shirt, bra, bikini, "
        "vagina not visible, anus not visible, penis not visible, bad proportions, "
        "all clothes, all clothing" # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è —É—Å–∏–ª–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –æ–¥–µ–∂–¥—ã
    )

    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏ –∏ —Å–ø–µ—Ü. –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    unique = set(tags)
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –±–æ–ª—å—à–∏–º –≥—Ä—É–¥—è–º
    if "big_breasts" in unique and "small_breasts" in unique:
        unique.remove("small_breasts") 
    
    # –ö–æ—Å—Ç—é–º –∫–æ—Ä–æ–≤—ã —É–∂–µ –≤–∫–ª—é—á—ë–Ω –≤ furry_cow
    if "furry_cow" in unique:
        unique.discard("cow_costume") 

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    for tag in unique:
        if tag in CHARACTER_EXTRA:
            priority["character"].append(CHARACTER_EXTRA[tag])
        elif tag.startswith("furry_"):
            priority["furry"].append(TAG_PROMPTS.get(tag, tag))
        elif tag in TAG_PROMPTS:
            key = tag_category(tag)
            if key:
                priority[key].append(TAG_PROMPTS[tag])

    prompt_parts = base[:]
    # –ü–æ—Ä—è–¥–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞–∂–µ–Ω: –ø–µ—Ä—Å–æ–Ω–∞–∂–∏, —Ñ—É—Ä–∏, –ø–æ–∫–µ–º–æ–Ω—ã, —Ç–µ–ª–æ, –ø–æ–∑—ã, –æ—Ç–≤–µ—Ä—Å—Ç–∏—è, –∏–≥—Ä—É—à–∫–∏, –æ–¥–µ–∂–¥–∞, —Ñ–µ—Ç–∏—à–∏, –ª–∏—Ü–æ
    for section in ["character", "furry", "pokemon", "body", "pose", "holes", "toys", "clothes", "fetish", "face"]:
        prompt_parts.extend(priority[section])

    # –¢–∞–Ω–ª–∞–π–Ω—ã —É–±–∏—Ä–∞—é—Ç –∫—É–ø–∞–ª—å–Ω–∏–∫ –∏–∑ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    if "bikini_tan_lines" in unique:
        base_negative += ", bikini"

    return {
        "positive_prompt": ", ".join(prompt_parts),
        "negative_prompt": base_negative
    } 

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Replicate ---
def replicate_generate(positive_prompt, negative_prompt):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Replicate API,
    –∏—Å–ø–æ–ª—å–∑—É—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏.
    """
    url = "https://api.replicate.com/v1/predictions"
    headers = {
        "Authorization": f"Token {REPLICATE_TOKEN}",
        "Content-Type": "application/json"
    }
    json_data = {
        "version": REPLICATE_MODEL,
        "input": {
            "prompt": positive_prompt,
            "negative_prompt": negative_prompt,
            "prepend_preprompt": False,
            "width": 1024,
            "height": 1024,
            "steps": 75,
            "guidance_scale": 18,
            "scheduler": "DPM++ 2M SDE Karras",
            "adetailer_face": True,
            "adetailer_hand": True,
            "seed": -1
        }
    }

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    r = requests.post(url, headers=headers, json=json_data)
    if r.status_code != 201:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {r.status_code} - {r.text}")
        print(f"Request JSON: {json_data}")
        return None

    status_url = r.json()["urls"]["get"]

    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–¥–æ 3 –º–∏–Ω—É—Ç)
    for i in range(90):
        time.sleep(2)
        r = requests.get(status_url, headers=headers)
        if r.status_code != 200:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {r.status_code} - {r.text}")
            return None
        data = r.json()
        if data["status"] == "succeeded":
            return data["output"][0] if isinstance(data["output"], list) and data["output"] else None
        elif data["status"] == "failed":
            print(f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {data.get('error', '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ')}")
            print(f"Request JSON: {json_data}")
            return None

    print("–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ.")
    return None

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞ Flask ---
@app.route("/", methods=["POST"])
def webhook():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram."""
    json_str = request.stream.read().decode("utf-8")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "ok", 200

@app.route("/", methods=["GET"])
def home():
    """–ü—Ä–æ—Å—Ç–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    return "–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç", 200

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)
    app.run(host="0.0.0.0", port=PORT)
