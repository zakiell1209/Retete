import os
import time
import requests
import telebot
from telebot import types
from flask import Flask, request

API_TOKEN = os.getenv("TELEGRAM_TOKEN")
REPLICATE_TOKEN = os.getenv("REPLICATE_API_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://retete.onrender.com")

bot = telebot.TeleBot(API_TOKEN)
app = Flask(__name__)

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ redis/db –¥–ª—è –º—É–ª—å—Ç–∏–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
user_choices = {}

# –ü—Ä–æ–º—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –æ–ø—Ü–∏–∏
PROMPT_PARTS = {
    "anal": "anal sex, anus, detailed anal penetration",
    "dildo": "dildo, large dildo, realistic dildo, inserted dildo",
    "poses": {
        "doggy": "doggy style position, bent over",
        "vertical_splits": "vertical splits pose, flexible legs",
        "squatting": "squatting pose, low stance",
        "missionary": "missionary position, face-to-face",
    },
    "sex_scene": "erotic sex scene, explicit, intimate interaction, realistic anatomy",
    "femboy": (
        "femboy, slender body, feminine face, soft skin, slight makeup, "
        "androgynous features, lingerie, slim waist, cute expression"
    )
}

# –§—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∫–∏ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –ø—Ä–æ–º—Ç–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π
def build_prompt(base_text, selections):
    prompt = base_text.strip() if base_text else ""
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏
    if "anal" in selections:
        prompt += ", " + PROMPT_PARTS["anal"]
    if "dildo" in selections:
        prompt += ", " + PROMPT_PARTS["dildo"]
    if "sex_scene" in selections:
        prompt += ", " + PROMPT_PARTS["sex_scene"]
    if "femboy" in selections:
        prompt += ", " + PROMPT_PARTS["femboy"]

    # –ü–æ–∑–∏—Ü–∏–∏ ‚Äî –∏—Ö –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ
    poses_selected = [p for p in selections if p.startswith("pose_")]
    for pose_key in poses_selected:
        pose_name = pose_key.replace("pose_", "")
        pose_prompt = PROMPT_PARTS["poses"].get(pose_name)
        if pose_prompt:
            prompt += ", " + pose_prompt

    # –ë–∞–∑–æ–≤—ã–µ —É—Å–∏–ª–∏—Ç–µ–ª–∏ NSFW (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –ø–æ–¥ –∑–∞–ø—Ä–æ—Å)
    prompt += ", masterpiece, ultra detailed, 4k, realistic, NSFW"
    return prompt.strip()

# –£—Å–∏–ª–∏—Ç–µ–ª–∏ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—Å—Ç–∞–≤–∏–ª)
def enhance_nsfw_female(p): return p + ", nude, erotic, sensual, solo, young female, seductive, large breasts, soft skin"
def enhance_futanari(p): return p + ", futanari, shemale, dickgirl, big breasts, penis, dildo, dildo anal, anal, nude, erotic pose, solo, highly detailed"
def enhance_femboy(p): return p + ", " + PROMPT_PARTS["femboy"]
def enhance_shibari(p): return p + ", shibari, rope bondage, tied up, detailed knots, erotic ropes, submissive pose, cinematic"

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Replicate
def generate_image(prompt):
    url = "https://api.replicate.com/v1/predictions"
    headers = {
        "Authorization": f"Token {REPLICATE_TOKEN}",
        "Content-Type": "application/json"
    }
    data = {
        "version": "fb4f086702d6a301ca32c170d926239324a7b7b2f0afc3d232a9c4be382dc3fa",
        "input": {"prompt": prompt}
    }
    response = requests.post(url, headers=headers, json=data)
    if response.status_code == 201:
        prediction = response.json()
        return prediction["urls"]["get"], None
    return None, f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {response.status_code} {response.text}"

# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ ‚Äî –∫–Ω–æ–ø–∫–∏-–∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
def build_selection_keyboard(user_id):
    selections = user_choices.get(user_id, set())

    def button_text(name, key):
        return ("‚úÖ " if key in selections else "‚òëÔ∏è ") + name

    markup = types.InlineKeyboardMarkup(row_width=2)

    # –ê–Ω–∞–ª –∏ –î–∏–ª–¥–æ
    markup.add(
        types.InlineKeyboardButton(button_text("–ê–Ω–∞–ª", "anal"), callback_data="toggle_anal"),
        types.InlineKeyboardButton(button_text("–î–∏–ª–¥–æ", "dildo"), callback_data="toggle_dildo")
    )
    # –ü–æ–∑–∏—Ü–∏–∏ (–ø–æ 2 –Ω–∞ —Ä—è–¥)
    markup.add(
        types.InlineKeyboardButton(button_text("–ü–æ–∑–∞: –†–∞–∫–æ–º", "pose_doggy"), callback_data="toggle_pose_doggy"),
        types.InlineKeyboardButton(button_text("–ü–æ–∑–∞: –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç", "pose_vertical_splits"), callback_data="toggle_pose_vertical_splits")
    )
    markup.add(
        types.InlineKeyboardButton(button_text("–ü–æ–∑–∞: –ù–∞ –∫–æ—Ä—Ç–æ—á–∫–∞—Ö", "pose_squatting"), callback_data="toggle_pose_squatting"),
        types.InlineKeyboardButton(button_text("–ü–æ–∑–∞: –ú–∏—Å—Å–∏–æ–Ω–µ—Ä—Å–∫–∞—è", "pose_missionary"), callback_data="toggle_pose_missionary")
    )
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
    markup.add(
        types.InlineKeyboardButton(button_text("–°—Ü–µ–Ω–∞ —Å–µ–∫—Å–∞", "sex_scene"), callback_data="toggle_sex_scene"),
        types.InlineKeyboardButton(button_text("–§–µ–º–±–æ–π", "femboy"), callback_data="toggle_femboy")
    )
    # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    markup.add(types.InlineKeyboardButton("üöÄ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="generate"))

    return markup

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ–ø—Ü–∏–π
@bot.callback_query_handler(func=lambda call: call.data.startswith("toggle_") or call.data == "generate")
def callback_handler(call):
    user_id = call.from_user.id
    if user_id not in user_choices:
        user_choices[user_id] = set()

    if call.data.startswith("toggle_"):
        key = call.data[len("toggle_"):]
        if key in user_choices[user_id]:
            user_choices[user_id].remove(key)
        else:
            user_choices[user_id].add(key)
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
        bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      reply_markup=build_selection_keyboard(user_id))
        bot.answer_callback_query(call.id, text=f"{key} {'–≤—ã–±—Ä–∞–Ω–æ' if key in user_choices[user_id] else '—Å–Ω—è—Ç–æ'}")
    elif call.data == "generate":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–∞–∑–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        msg = bot.send_message(call.message.chat.id, "üìù –í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–≥–æ–ª–∞—è –¥–µ–≤—É—à–∫–∞, –≤–∏–¥–Ω—ã –≥—É–±—ã, —Å–≤–µ—Ç–ª–∞—è –∫–æ–∂–∞'):")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_choices[user_id] = user_choices[user_id]  # –ø—Ä–æ—Å—Ç–æ —á—Ç–æ–±—ã –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω–Ω—ã–º
        bot.register_next_step_handler(msg, generate_with_selection, user_id)
        bot.answer_callback_query(call.id)

def generate_with_selection(message, user_id):
    selections = user_choices.get(user_id, set())
    base_text = message.text

    prompt = build_prompt(base_text, selections)

    msg_wait = bot.send_message(message.chat.id, "üîû –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–¥–æ–∂–¥–∏...")

    status_url, error = generate_image(prompt)
    if error:
        bot.edit_message_text(error, chat_id=message.chat.id, message_id=msg_wait.message_id)
        return

    max_attempts = 45
    delay_seconds = 3

    for attempt in range(max_attempts):
        res = requests.get(status_url, headers={"Authorization": f"Token {REPLICATE_TOKEN}"})
        if res.status_code != 200:
            bot.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: {res.status_code} {res.text}",
                                  chat_id=message.chat.id, message_id=msg_wait.message_id)
            return
        status = res.json()
        if status.get("status") == "succeeded":
            img = status["output"][0]
            bot.delete_message(message.chat.id, msg_wait.message_id)
            bot.send_photo(message.chat.id, img)
            # –ü–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
            user_choices[user_id] = set()
            bot.send_message(message.chat.id, "‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º—ã –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.", reply_markup=build_selection_keyboard(user_id))
            return
        elif status.get("status") == "failed":
            bot.edit_message_text("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å.",
                                  chat_id=message.chat.id, message_id=msg_wait.message_id)
            return
        if attempt % 5 == 0:
            bot.edit_message_text(f"üîû –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–¥–æ–∂–¥–∏... ({attempt * delay_seconds}s –ø—Ä–æ—à–ª–æ)",
                                  chat_id=message.chat.id, message_id=msg_wait.message_id)
        time.sleep(delay_seconds)

    bot.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞ –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è.",
                          chat_id=message.chat.id, message_id=msg_wait.message_id)

@bot.message_handler(commands=['start'])
def start(message):
    user_choices[message.from_user.id] = set()
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–º–æ–∂–Ω–æ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å):", reply_markup=build_selection_keyboard(message.from_user.id))

@bot.message_handler(func=lambda m: True)
def handle_any_message(message):
    user_choices[message.from_user.id] = set()
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /start, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

# Flask Webhook
@app.route('/', methods=['POST'])
def webhook():
    update = telebot.types.Update.de_json(request.data.decode("utf-8"))
    bot.process_new_updates([update])
    return '', 200

@app.route('/', methods=['GET'])
def index():
    return 'ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç'

if __name__ == '__main__':
    bot.remove_webhook()
    bot.set_webhook(WEBHOOK_URL)
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))