import os
import time
import requests
import telebot
from telebot import types
from flask import Flask, request

API_TOKEN = os.getenv("TELEGRAM_TOKEN")
REPLICATE_TOKEN = os.getenv("REPLICATE_API_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://retete.onrender.com")

bot = telebot.TeleBot(API_TOKEN)
app = Flask(__name__)

# –£—Å–∏–ª–∏—Ç–µ–ª–∏ –ø—Ä–æ–º—Ç–æ–≤
def enhance_nsfw_female(p): return p + ", nude, erotic, sensual, solo, young female, seductive, large breasts, soft skin, masterpiece, ultra detailed, NSFW"
def enhance_futanari(p): return p + ", futanari, shemale, dickgirl, big breasts, penis, dildo, dildo anal, anal, nude, erotic pose, solo, highly detailed, NSFW"
def enhance_femboy(p): return p + ", femboy, cute male, feminine face, soft skin, lingerie, erotic, slim waist, NSFW, solo"
def enhance_shibari(p): return p + ", shibari, rope bondage, tied up, detailed knots, erotic ropes, submissive pose, NSFW, cinematic"

# –°–ª–æ–≤–∞—Ä—å —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏ –∏ –∑–∞–º–µ–Ω–∞–º–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
PROMPT_SYNONYMS = {
    "–∞–Ω–∞–ª": ["anal", "–∞–Ω–∞–ª—å–Ω—ã–π", "–∑–∞–¥–Ω–∏—Ü–∞", "–∞–Ω—É—Å", "–∑–∞–¥–Ω–∏–π –ø—Ä–æ—Ö–æ–¥"],
    "–¥–∏–ª–¥–æ": ["dildo", "–±–æ–ª—å—à–æ–π –¥–∏–ª–¥–æ", "–∫–æ–Ω—Å–∫–∏–π –¥–∏–ª–¥–æ", "–∞–Ω–∞–ª—å–Ω—ã–π –¥–∏–ª–¥–æ", "–∏–≥—Ä—É—à–∫–∞"],
    "–ø–æ–∑–∞": ["—Ä–∞–∫–æ–º", "–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç", "–Ω–∞ –∫–æ—Ä—Ç–æ—á–∫–∞—Ö", "–ø–æ–∑–∞"],
    "–∫–∏—Å–∫–∞": ["–≤–∏–¥–Ω–æ –∫–∏—Å–∫—É", "–ø–∏—Å–∏ –≤–∏–¥–Ω–æ", "–ø–∏—Å—å–∫–∞", "–≤—É–ª—å–≤–∞", "–∫–∏—Å–∫–∞", "–≤–∞–≥–∏–Ω–∞"],
    "—Ä–∞–∑–º–µ—Ä –≥—Ä—É–¥–∏": ["–±–æ–ª—å—à–∞—è –≥—Ä—É–¥—å", "–º–∞–ª–µ–Ω—å–∫–∞—è –≥—Ä—É–¥—å", "—Å—Ä–µ–¥–Ω—è—è –≥—Ä—É–¥—å", "–æ–≥—Ä–æ–º–Ω—ã–µ —Å–∏—Å—å–∫–∏", "–º–∞–ª–µ–Ω—å–∫–∏–µ —Å–∏—Å—å–∫–∏"],
    "–ø–∏—Ä—Å–∏–Ω–≥": ["–ø–∏—Ä—Å–∏–Ω–≥", "–ø—Ä–æ–∫–∞–ª—ã–≤–∞–Ω–∏–µ", "–∫–æ–ª—å—Ü–æ", "—Å–µ—Ä–µ–∂–∫–∞"],
    "—á—É–ª–∫–∏": ["—á—É–ª–∫–∏", "—á—É–ª–æ—á–µ–∫", "—Å–µ—Ç–∫–∞", "—Å–µ—Ç—á–∞—Ç—ã–µ —á—É–ª–∫–∏", "—á—É–ª–æ—á–∫–∏"]
}

def expand_prompt_synonyms(prompt: str) -> str:
    prompt_lower = prompt.lower()
    expansions = []
    for key, synonyms in PROMPT_SYNONYMS.items():
        for syn in synonyms:
            if syn in prompt_lower:
                expansions.append(key)
                break
    return ", ".join(expansions)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ —á–µ—Ä–µ–∑ Replicate
def generate_image(prompt):
    url = "https://api.replicate.com/v1/predictions"
    headers = {
        "Authorization": f"Token {REPLICATE_TOKEN}",
        "Content-Type": "application/json"
    }
    data = {
        "version": "fb4f086702d6a301ca32c170d926239324a7b7b2f0afc3d232a9c4be382dc3fa",
        "input": {"prompt": prompt}
    }
    response = requests.post(url, headers=headers, json=data)
    if response.status_code == 201:
        prediction = response.json()
        return prediction["urls"]["get"], None
    return None, f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {response.status_code} {response.text}"

def send_enhancement_buttons(chat_id):
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("üéÄ NSFW –¥–ª—è –∂–µ–Ω—â–∏–Ω", callback_data="nsfw_female"),
        types.InlineKeyboardButton("‚ößÔ∏è –§—É—Ç–∞–Ω–∞—Ä–∏", callback_data="futanari")
    )
    markup.row(
        types.InlineKeyboardButton("üßë‚Äçüé§ –§–µ–º–±–æ–π", callback_data="femboy"),
        types.InlineKeyboardButton("ü™¢ –®–∏–±–∞—Ä–∏", callback_data="shibari")
    )
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", reply_markup=markup)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –æ–∂–∏–¥–∞–Ω–∏–µ–º
def generate_custom_image(message, enhancer):
    base_prompt = message.text.strip()
    expansions = expand_prompt_synonyms(base_prompt)
    final_prompt = base_prompt
    if expansions:
        final_prompt += ", " + expansions
    final_prompt = enhancer(final_prompt)

    msg_wait = bot.send_message(message.chat.id, "üîû –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–¥–æ–∂–¥–∏...")

    status_url, error = generate_image(final_prompt)
    if error:
        bot.edit_message_text(error, chat_id=message.chat.id, message_id=msg_wait.message_id)
        return

    max_attempts = 45
    delay_seconds = 3

    for attempt in range(max_attempts):
        res = requests.get(status_url, headers={"Authorization": f"Token {REPLICATE_TOKEN}"})
        if res.status_code != 200:
            bot.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: {res.status_code} {res.text}",
                                  chat_id=message.chat.id, message_id=msg_wait.message_id)
            return
        status = res.json()
        if status.get("status") == "succeeded":
            img = status["output"][0]
            bot.delete_message(message.chat.id, msg_wait.message_id)
            bot.send_photo(message.chat.id, img)
            send_enhancement_buttons(message.chat.id)
            return
        elif status.get("status") == "failed":
            bot.edit_message_text("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å.",
                                  chat_id=message.chat.id, message_id=msg_wait.message_id)
            return
        if attempt % 5 == 0:
            bot.edit_message_text(f"üîû –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–¥–æ–∂–¥–∏... ({attempt * delay_seconds}s –ø—Ä–æ—à–ª–æ)",
                                  chat_id=message.chat.id, message_id=msg_wait.message_id)
        time.sleep(delay_seconds)

    bot.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞ –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è.",
                          chat_id=message.chat.id, message_id=msg_wait.message_id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    mode = call.data
    prompt_msg = {
        "nsfw_female": "üìù –û–ø–∏—à–∏ –¥–µ–≤—É—à–∫—É:",
        "futanari": "üìù –û–ø–∏—à–∏ —Ñ—É—Ç–∞–Ω–∞—Ä–∏-—Å—Ü–µ–Ω—É:",
        "femboy": "üìù –û–ø–∏—à–∏ —Ñ–µ–º–±–æ—è:",
        "shibari": "üìù –û–ø–∏—à–∏ —Å—Ü–µ–Ω—É —Å —à–∏–±–∞—Ä–∏:"
    }.get(mode, "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")

    enhancers = {
        "nsfw_female": enhance_nsfw_female,
        "futanari": enhance_futanari,
        "femboy": enhance_femboy,
        "shibari": enhance_shibari
    }

    msg = bot.send_message(call.message.chat.id, prompt_msg)
    bot.register_next_step_handler(msg, lambda m: generate_custom_image(m, enhancers[mode]))

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start(message):
    send_enhancement_buttons(message.chat.id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
@bot.message_handler(func=lambda m: True)
def handle_prompt(message):
    bot.send_message(message.chat.id, "üîÅ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ–±—ã—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ —É—Å–∏–ª–µ–Ω–∏—è...")
    generate_custom_image(message, lambda p: p)

# Flask Webhook
@app.route('/', methods=['POST'])
def webhook():
    update = telebot.types.Update.de_json(request.data.decode("utf-8"))
    bot.process_new_updates([update])
    return '', 200

@app.route('/', methods=['GET'])
def index():
    return 'ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç'

if __name__ == '__main__':
    bot.remove_webhook()
    bot.set_webhook(WEBHOOK_URL)
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))