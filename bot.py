import os
import time
import requests
from flask import Flask, request
import telebot
from telebot import types

API_TOKEN = os.getenv("TELEGRAM_TOKEN")
REPLICATE_TOKEN = os.getenv("REPLICATE_API_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.environ.get("PORT", 5000))

REPLICATE_MODELS = {
    "anime": "c1d5b02687df6081c7953c74bcc527858702e8c153c9382012ccc3906752d3ec",
    "realism": "stability-ai/stable-diffusion:ac732df8",
    "3d": "stability-ai/stable-diffusion-3-medium"
}

bot = telebot.TeleBot(API_TOKEN)
app = Flask(__name__)
user_settings = {}

# ==== –í–°–ï –¢–ï–ì–ò ====
TAGS = {
    "holes": ["vagina", "anal", "both"],
    "toys": ["dildo", "anal_beads", "anal_plug", "gag", "piercing"],
    "poses": [
        "doggy", "standing", "splits", "squat", "lying",
        "vertical_splits", "horizontal_splits", "lying_legs_apart",
        "side_leg_up", "facing_viewer", "back_to_viewer",
        "bridge_pose", "suspended_rope"
    ],
    "clothes": ["stockings", "bikini", "mask", "heels", "shibari", "cow_costume", "bikini_tan_lines"],
    "body": ["loli", "milf", "age_21", "thin", "muscular", "curvy", "normal"],
    "ethnicity": ["femboy", "ethnicity_asian", "ethnicity_european"],
    "furry": ["furry_cow", "furry_cat", "furry_dog", "furry_dragon", "furry_silveon"]
}

CATEGORY_NAMES_EMOJI = {
    "holes": "–û—Ç–≤–µ—Ä—Å—Ç–∏—è üï≥Ô∏è",
    "toys": "–ò–≥—Ä—É—à–∫–∏ üß∏",
    "poses": "–ü–æ–∑–∏—Ü–∏–∏ ü§∏‚Äç‚ôÄÔ∏è",
    "clothes": "–û–¥–µ–∂–¥–∞ üëó",
    "body": "–¢–µ–ª–æ üí™",
    "ethnicity": "–≠—Ç–Ω–æ—Å üåç",
    "furry": "–§—É—Ä–∏ üêæ"
}

CLOTHES_NAMES_EMOJI = {
    "stockings": "–ß—É–ª–∫–∏ üß¶", "bikini": "–ë–∏–∫–∏–Ω–∏ üëô", "mask": "–ú–∞—Å–∫–∞ üò∑", "heels": "–¢—É—Ñ–ª–∏ üë†",
    "shibari": "–®–∏–±–∞—Ä–∏ ‚õìÔ∏è", "cow_costume": "–ö–æ—Å—Ç—é–º –∫–æ—Ä–æ–≤—ã üêÑ", "bikini_tan_lines": "–ó–∞–≥–∞—Ä –æ—Ç –±–∏–∫–∏–Ω–∏ ‚òÄÔ∏è"
}

TAG_NAMES_EMOJI = {
    "holes": {"vagina": "–í–∞–≥–∏–Ω–∞ ‚ôÄÔ∏è", "anal": "–ê–Ω–∞–ª üçë", "both": "–û–±–∞ üî•"},
    "toys": {"dildo": "–î–∏–ª–¥–æ üçÜ", "anal_beads": "–ê–Ω–∞–ª—å–Ω—ã–µ –±—É—Å—ã üî¥", "anal_plug": "–ü—Ä–æ–±–∫–∞ üîµ", "gag": "–ö–ª—è–ø üò∂", "piercing": "–ü–∏—Ä—Å–∏–Ω–≥ üíé"},
    "poses": {
        "doggy": "–î–æ–≥–≥–∏ üêï",
        "standing": "–°—Ç–æ—è üßç",
        "splits": "–®–ø–∞–≥–∞—Ç ü§∏",
        "squat": "–ü—Ä–∏—Å–µ–¥ üßé",
        "lying": "–õ–µ–∂–∞ üõå",
        "vertical_splits": "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç ‚ÜïÔ∏è",
        "horizontal_splits": "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç ‚ÜîÔ∏è",
        "lying_legs_apart": "–õ–µ–∂–∞, –Ω–æ–≥–∏ –≤—Ä–æ–∑—å üõå",
        "side_leg_up": "–ù–∞ –±–æ–∫—É, –Ω–æ–≥–∞ –≤–≤–µ—Ä—Ö ü¶µ",
        "facing_viewer": "–õ–∏—Ü–æ–º –∫ –∑—Ä–∏—Ç–µ–ª—é üëÅ",
        "back_to_viewer": "–°–ø–∏–Ω–æ–π –∫ –∑—Ä–∏—Ç–µ–ª—é üîô",
        "bridge_pose": "–ú–æ—Å—Ç üåâ",
        "suspended_rope": "–ü–æ–¥–≤–µ—à–µ–Ω–∞ –Ω–∞ –≤–µ—Ä—ë–≤–∫–∞—Ö ü™¢"
    },
    "body": {
        "loli": "–õ–æ–ª–∏ üëß",
        "milf": "–ú–∏–ª—Ñ–∞ üë©‚Äçü¶≥",
        "age_21": "–í–æ–∑—Ä–∞—Å—Ç 21 üéÇ",
        "thin": "–•—É–¥–æ–µ ü¶¥",
        "muscular": "–ù–∞–∫–∞—á–∞–Ω–æ–µ üí™",
        "curvy": "–ü—ã—à–Ω–æ–µ üçë",
        "normal": "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ üôÇ"
    },
    "ethnicity": {"femboy": "–§–µ–º–±–æ–π ‚öß", "ethnicity_asian": "–ê–∑–∏–∞—Ç–∫–∞ üà∂", "ethnicity_european": "–ï–≤—Ä–æ–ø–µ–π–∫–∞ üá™üá∫"},
    "furry": {
        "furry_cow": "–§—É—Ä–∏ –∫–æ—Ä–æ–≤–∞ üêÑ",
        "furry_cat": "–§—É—Ä–∏ –∫–æ—à–∫–∞ üê±",
        "furry_dog": "–§—É—Ä–∏ —Å–æ–±–∞–∫–∞ üê∂",
        "furry_dragon": "–§—É—Ä–∏ –¥—Ä–∞–∫–æ–Ω üêâ",
        "furry_silveon": "–§—É—Ä–∏ —Å–∏–ª—å–≤–µ–æ–Ω ü¶Ñ"
    },
    "clothes": CLOTHES_NAMES_EMOJI
}

# ==== –ö–õ–ê–í–ò–ê–¢–£–†–´ ====
def main_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("üé® –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å", callback_data="model"),
        types.InlineKeyboardButton("üß© –í—ã–±—Ä–∞—Ç—å —Ç–µ–≥–∏", callback_data="tags"),
        types.InlineKeyboardButton("‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="generate")
    )
    return markup

def model_keyboard():
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("üñå –ê–Ω–∏–º–µ", callback_data="model_anime"),
        types.InlineKeyboardButton("üì∑ –†–µ–∞–ª–∏–∑–º", callback_data="model_realism"),
        types.InlineKeyboardButton("üß± 3D", callback_data="model_3d"),
        types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="main_menu")
    )
    return markup

def category_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=2)
    for cat in CATEGORY_NAMES_EMOJI:
        markup.add(types.InlineKeyboardButton(CATEGORY_NAMES_EMOJI[cat], callback_data=f"cat_{cat}"))
    markup.add(types.InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="tags_done"))
    return markup

def tags_keyboard(category, selected_tags):
    markup = types.InlineKeyboardMarkup(row_width=2)
    for tag in TAGS.get(category, []):
        name = TAG_NAMES_EMOJI.get(category, {}).get(tag, tag)
        if tag in selected_tags:
            name = "‚úÖ " + name
        markup.add(types.InlineKeyboardButton(name, callback_data=f"tag_{tag}"))
    markup.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="tags_back"))
    return markup

def postgen_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", callback_data="continue_generation"),
        types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–≥–∏", callback_data="edit_tags"),
        types.InlineKeyboardButton("‚ôªÔ∏è –ù–∞—á–∞—Ç—å –≤—ã–±–æ—Ä —Ç–µ–≥–æ–≤ –∑–∞–Ω–æ–≤–æ", callback_data="restart_tags"),
        types.InlineKeyboardButton("‚¨Ö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    return markup

# ==== –û–ë–†–ê–ë–û–¢–ö–ê ====
@bot.message_handler(commands=["start"])
def start(message):
    cid = message.chat.id
    user_settings[cid] = {"features": [], "model": "anime", "waiting_for_prompt": False}
    bot.send_message(cid, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard())

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    cid = call.message.chat.id
    data = call.data
    if cid not in user_settings:
        user_settings[cid] = {"features": [], "model": "anime", "waiting_for_prompt": False}

    if data == "model":
        bot.edit_message_text("–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å:", cid, call.message.message_id, reply_markup=model_keyboard())

    elif data.startswith("model_"):
        model = data.split("_")[1]
        user_settings[cid]["model"] = model
        bot.edit_message_text(f"–ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {model}", cid, call.message.message_id, reply_markup=main_keyboard())

    elif data == "tags":
        bot.edit_message_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", cid, call.message.message_id, reply_markup=category_keyboard())

    elif data.startswith("cat_"):
        cat = data.split("_")[1]
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏ —Ç–µ–≥–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {CATEGORY_NAMES_EMOJI[cat]}:", cid, call.message.message_id, reply_markup=tags_keyboard(cat, user_settings[cid]["features"]))

    elif data.startswith("tag_"):
        tag = data.split("_")[1]
        tags = user_settings[cid]["features"]
        if tag in tags:
            tags.remove(tag)
            status = "—É–¥–∞–ª—ë–Ω"
        else:
            tags.append(tag)
            status = "–¥–æ–±–∞–≤–ª–µ–Ω"
        user_settings[cid]["features"] = tags
        name = None
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–µ–≥–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏
        for cat_key, cat_tags in TAGS.items():
            if tag in cat_tags:
                name = TAG_NAMES_EMOJI.get(cat_key, {}).get(tag, tag)
                current_category = cat_key
                break
        bot.answer_callback_query(call.id, f"{name} {status}")
        # –û—Å—Ç–∞—ë–º—Å—è –≤ —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        bot.edit_message_reply_markup(cid, call.message.message_id, reply_markup=tags_keyboard(current_category, tags))

    elif data == "tags_done":
        bot.edit_message_text("–¢–µ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", cid, call.message.message_id, reply_markup=main_keyboard())

    elif data == "tags_back":
        bot.edit_message_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", cid, call.message.message_id, reply_markup=category_keyboard())

    elif data == "generate":
        user_settings[cid]["waiting_for_prompt"] = True
        bot.send_message(cid, "‚úèÔ∏è –í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏:")

    elif data == "continue_generation":
        user_settings[cid]["waiting_for_prompt"] = True
        bot.send_message(cid, "‚úèÔ∏è –í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ (–±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Ç–µ–∫—É—â–∏–µ —Ç–µ–≥–∏):")

    elif data == "edit_tags":
        bot.send_message(cid, "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–≥–æ–≤:", reply_markup=category_keyboard())

    elif data == "restart_tags":
        user_settings[cid]["features"] = []
        bot.send_message(cid, "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–æ–≤ –∑–∞–Ω–æ–≤–æ:", reply_markup=category_keyboard())

    elif data == "main_menu":
        bot.edit_message_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", cid, call.message.message_id, reply_markup=main_keyboard())

@bot.message_handler(func=lambda m: user_settings.get(m.chat.id, {}).get("waiting_for_prompt"))
def handle_prompt(message):
    cid = message.chat.id
    user_settings[cid]["waiting_for_prompt"] = False
    base = message.text
    features = user_settings[cid]["features"]
    model_key = user_settings[cid]["model"]
    model_id = REPLICATE_MODELS.get(model_key, REPLICATE_MODELS["anime"])
    full_prompt = build_prompt(base, features)

    bot.send_message(cid, "‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    status_url, err = generate_image(full_prompt, model_id)
    if err:
        bot.send_message(cid, err)
        return

    image_url = wait_for_image(status_url)
    if image_url:
        bot.send_photo(cid, image_url, caption="–í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç!", reply_markup=postgen_keyboard())
    else:
        bot.send_message(cid, "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

# ==== –ü–†–û–ú–¢ ====
def build_prompt(base, tags):
    additions = []
    map_tag = {
        # Holes
        "vagina": "vaginal penetration",
        "anal": "anal penetration",
        "both": "double penetration",
        # Toys
        "dildo": "dildo",
        "anal_beads": "anal beads",
        "anal_plug": "anal plug",
        "gag": "gag",
        "piercing": "body piercing",
        # Poses
        "doggy": "doggy style",
        "standing": "standing pose",
        "splits": "splits",
        "squat": "squatting",
        "lying": "laying",
        "vertical_splits": "doing a vertical split, one leg up",
        "horizontal_splits": "doing a horizontal split, legs wide apart",
        "lying_legs_apart": "lying on back with legs spread apart",
        "side_leg_up": "lying on side with one leg lifted",
        "facing_viewer": "facing the viewer directly",
        "back_to_viewer": "back turned to viewer",
        "bridge_pose": "bridge pose, arched back",
        "suspended_rope": "suspended by ropes, rope bondage",
        # Clothes
        "stockings": "stockings",
        "bikini": "bikini",
        "mask": "mask",
        "heels": "high heels",
        "shibari": "shibari",
        "cow_costume": "woman in cow print stockings with cow horns and tail, no underwear",
        "bikini_tan_lines": "tanned skin with white bikini tan lines",
        # Body
        "loli": "young girl, loli style",
        "milf": "mature woman, milf",
        "age_21": "age 21 years old",
        "thin": "thin body",
        "muscular": "muscular body",
        "curvy": "curvy body",
        "normal": "normal body",
        # Ethnicity
        "femboy": "femboy",
        "ethnicity_asian": "asian girl",
        "ethnicity_european": "european girl",
        # Furry (Silveon - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ—Ö–æ–∂ –Ω–∞ –°–∏–ª—å–≤–µ–æ–Ω–∞ –∏–∑ –∏–≥—Ä/–∞–Ω–∏–º–µ)
        "furry_cow": "furry cow",
        "furry_cat": "furry cat",
        "furry_dog": "furry dog",
        "furry_dragon": "furry dragon",
        "furry_silveon": ("silveon anthro, majestic and elegant, with glowing markings, soft blue and purple hues, anime style, fantasy creature, detailed fur"),
        # Skin
        "skin_white": "white skin",
        "skin_black": "black skin"
    }
    for tag in tags:
        additions.append(map_tag.get(tag, tag))
    additions.append("nsfw, masterpiece, ultra detailed")
    return base + ", " + ", ".join(additions)

# ==== –ì–ï–ù–ï–†–ê–¶–ò–Ø ====
def generate_image(prompt, model_version):
    url = "https://api.replicate.com/v1/predictions"
    headers = {"Authorization": f"Token {REPLICATE_TOKEN}", "Content-Type": "application/json"}
    data = {"version": model_version, "input": {"prompt": prompt}}
    response = requests.post(url, headers=headers, json=data)
    if response.status_code == 201:
        return response.json()["urls"]["get"], None
    return None, "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"

def wait_for_image(status_url):
    headers = {"Authorization": f"Token {REPLICATE_TOKEN}"}
    for _ in range(40):
        time.sleep(2)
        res = requests.get(status_url, headers=headers)
        if res.status_code == 200:
            data = res.json()
            if data["status"] == "succeeded":
                return data["output"][0] if isinstance(data["output"], list) else data["output"]
            elif data["status"] == "failed":
                return None
    return None

# ==== –í–ï–ë–•–£–ö ====
@app.route("/", methods=["POST"])
def webhook():
    json_string = request.get_data().decode("utf-8")
    update = telebot.types.Update.de_json(json_string)
    bot.process_new_updates([update])
    return "OK", 200

@app.route("/", methods=["GET"])
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç", 200

if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)
    app.run(host="0.0.0.0", port=PORT)