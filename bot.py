# --- bot.py ---
import os
import time
import requests
from flask import Flask, request
import telebot
from telebot import types

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏ URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("TELEGRAM_TOKEN")
REPLICATE_TOKEN = os.getenv("REPLICATE_API_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.environ.get("PORT", 5000))

# ID –º–æ–¥–µ–ª–∏ Replicate, –∫–æ—Ç–æ—Ä—É—é –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ
REPLICATE_MODEL = "c1d5b02687df6081c7953c74bcc527858702e8c153c9382012ccc3906752d3ec"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
bot = telebot.TeleBot(API_TOKEN)
app = Flask(__name__)
user_settings = {} # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# –ù–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–æ–≤
CATEGORY_NAMES = {
    "holes": "–û—Ç–≤–µ—Ä—Å—Ç–∏—è",
    "toys": "–ò–≥—Ä—É—à–∫–∏",
    "poses": "–ü–æ–∑—ã",
    "clothes": "–û–¥–µ–∂–¥–∞",
    "body": "–¢–µ–ª–æ",
    "ethnos": "–≠—Ç–Ω–æ—Å",
    "furry": "–§—É—Ä–∏",
    "characters": "–ü–µ—Ä—Å–æ–Ω–∞–∂–∏",
    "head": "–ì–æ–ª–æ–≤–∞"
}

# –°–ª–æ–≤–∞—Ä—å —Ç–µ–≥–æ–≤, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
TAGS = {
    "holes": {
        "vagina": "–í–∞–≥–∏–Ω–∞",
        "anal": "–ê–Ω—É—Å",
        "both": "–í–∞–≥–∏–Ω–∞ –∏ –∞–Ω—É—Å",
        "prolapsed_uterus": "–í—ã–ø–∞–≤—à–∞—è –º–∞—Ç–∫–∞", 
        "prolapsed_anus": "–í—ã–ø–∞–≤—à–∏–π –∞–Ω—É—Å",     
        "dilated_anus": "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω—É—Å",    
        "dilated_vagina": "–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∫–∏—Å–∫–∞"  
    },
    "toys": {
        "dildo": "–î–∏–ª–¥–æ",
        "huge_dildo": "–ë–æ–ª—å—à–æ–µ –¥–∏–ª–¥–æ",
        "horse_dildo": "–õ–æ—à–∞–¥–∏–Ω–æ–µ –¥–∏–ª–¥–æ",
        "anal_beads": "–ê–Ω–∞–ª—å–Ω—ã–µ –±—É—Å—ã",
        "anal_plug": "–ê–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–±–∫–∞",
        "anal_expander": "–ê–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—à–∏—Ä–∏—Ç–µ–ª—å",
        "gag": "–ö–ª—è–ø",
        "piercing": "–ü–∏—Ä—Å–∏–Ω–≥",
        "long_dildo_path": "–î–∏–ª–¥–æ –∏–∑ –∞–Ω—É—Å–∞ –≤—ã—Ö–æ–¥–∏—Ç –∏–∑–æ —Ä—Ç–∞"
    },
    "poses": {
        "doggy": "–ù–∞–µ–∑–¥–Ω–∏—Ü–∞ (–¥–æ–≥–≥–∏-—Å—Ç–∞–π–ª)",
        "standing": "–°—Ç–æ—è",
        "splits": "–®–ø–∞–≥–∞—Ç",
        "squat": "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏–µ",
        "lying": "–õ–µ–∂–∞",
        "hor_split": "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç",
        "ver_split": "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç",
        "side_up_leg": "–ù–∞ –±–æ–∫—É —Å –ø–æ–¥–Ω—è—Ç–æ–π –Ω–æ–≥–æ–π",
        "front_facing": "–õ–∏—Ü–æ–º –∫ –∑—Ä–∏—Ç–µ–ª—é",
        "back_facing": "–°–ø–∏–Ω–æ–π –∫ –∑—Ä–∏—Ç–µ–ª—é",
        "lying_knees_up": "–õ–µ–∂–∞ —Å —Å–æ–≥–Ω—É—Ç—ã–º–∏ –∫–æ–ª–µ–Ω—è–º–∏",
        "bridge": "–ú–æ—Å—Ç",
        "suspended": "–ü–æ–¥–≤–µ—à–µ–Ω–∞"
    },
    "clothes": {
        "stockings": "–ß—É–ª–∫–∏",
        "bikini_tan_lines": "–ó–∞–≥–∞—Ä –æ—Ç –±–∏–∫–∏–Ω–∏",
        "mask": "–ú–∞—Å–∫–∞",
        "heels": "–ö–∞–±–ª—É–∫–∏",
        "shibari": "–®–∏–±–∞—Ä–∏"
    },
    "body": {
        "big_breasts": "–ë–æ–ª—å—à–∞—è –≥—Ä—É–¥—å",
        "small_breasts": "–ú–∞–ª–µ–Ω—å–∫–∞—è –≥—Ä—É–¥—å",
        "skin_white": "–ë–µ–ª–∞—è –∫–æ–∂–∞",
        "skin_black": "–ß—ë—Ä–Ω–∞—è –∫–æ–∂–∞",
        "body_fat": "–ü—ã—à–Ω–æ–µ —Ç–µ–ª–æ",
        "body_thin": "–•—É–¥–æ–µ —Ç–µ–ª–æ",
        "body_normal": "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ç–µ–ª–æ",
        "body_fit": "–ü–æ–¥—Ç—è–Ω—É—Ç–æ–µ —Ç–µ–ª–æ",
        "body_muscular": "–ú—É—Å–∫—É–ª–∏—Å—Ç–æ–µ —Ç–µ–ª–æ",
        "age_loli": "–õ–æ–ª–∏",
        "age_milf": "–ú–∏–ª—Ñ–∞",
        "age_21": "–í–æ–∑—Ä–∞—Å—Ç 21",
        "cum": "–í—Å—è –≤ —Å–ø–µ—Ä–º–µ",
        "belly_bloat": "–í–∑–¥—É—Ç–∏–µ –∂–∏–≤–æ—Ç–∞",
        "succubus_tattoo": "–¢–∞—Ç—É –≤–Ω–∏–∑—É –∂–∏–≤–æ—Ç–∞"
    },
    "ethnos": {
        "futanari": "–§—É—Ç–∞–Ω–∞—Ä–∏",
        "femboy": "–§–µ–º–±–æ–π", 
        "ethnicity_asian": "–ê–∑–∏–∞—Ç–∫–∞",
        "ethnicity_european": "–ï–≤—Ä–æ–ø–µ–π–∫–∞"
    },
    "furry": {
        "furry_cow": "–§—É—Ä–∏ –∫–æ—Ä–æ–≤–∞",
        "furry_cat": "–§—É—Ä–∏ –∫–æ—à–∫–∞",
        "furry_dog": "–§—É—Ä–∏ —Å–æ–±–∞–∫–∞",
        "furry_dragon": "–§—É—Ä–∏ –¥—Ä–∞–∫–æ–Ω",
        "furry_sylveon": "–§—É—Ä–∏ —Å–∏–ª—å–≤–µ–æ–Ω",
        "furry_fox": "–§—É—Ä–∏ –ª–∏—Å–∏—Ü–∞",
        "furry_bunny": "–§—É—Ä–∏ –∫—Ä–æ–ª–∏–∫",
        "furry_wolf": "–§—É—Ä–∏ –≤–æ–ª—á–∏—Ü–∞"
    },
    "characters": {
        "rias": "–†–∏–∞—Å –ì—Ä–µ–º–æ—Ä–∏",
        "akeno": "–ê–∫–µ–Ω–æ –•–∏–º–µ–¥–∑–∏–º–∞",
        "kafka": "–ö–∞—Ñ–∫–∞ (–•–æ–Ω–∫–∞–π)",
        "eula": "–ï–æ–ª–∞ (–ì–µ–Ω—à–∏–Ω)",
        "fu_xuan": "–§—É –°—é–∞–Ω—å (–•–æ–Ω–∫–∞–π)",
        "ayase": "–ê—è—Å–µ –°–µ–π–∫–æ"
    },
    "head": {
        "ahegao": "–ê—Ö–µ–≥–∞–æ",
        "pain_face": "–õ–∏—Ü–æ –≤ –±–æ–ª–∏",
        "ecstasy_face": "–õ–∏—Ü–æ –≤ —ç–∫—Å—Ç–∞–∑–µ",
        "gold_lipstick": "–ó–æ–ª–æ—Ç–∞—è –ø–æ–º–∞–¥–∞"
    }
}

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
CHARACTER_EXTRA = {
    "rias": "red long hair, blue eyes, pale skin, large breasts, rias gremory, highschool dxd",
    "akeno": "long black hair, purple eyes, large breasts, akeno himejima, highschool dxd",
    "kafka": "purple wavy hair, cold expression, kafka, honkai star rail",
    "eula": "light blue hair, fair skin, eula, genshin impact",
    "fu_xuan": "pink hair, fu xuan, honkai star rail",
    "ayase": "black hair, school uniform, ayase seiko"
}

# –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è —Ç–µ–≥–æ–≤
TAG_PROMPTS = {
    **CHARACTER_EXTRA,
    "vagina": "spread pussy",
    "anal": "spread anus",
    "both": "spread pussy and anus",
    "prolapsed_uterus": "prolapsed uterus, uterus exposed, visible uterus", 
    "prolapsed_anus": "prolapsed anus, anus exposed, visible anus",         
    "dilated_anus": "dilated anus, anus stretched, internal view of anus, anus gaping", 
    "dilated_vagina": "dilated vagina, vagina stretched, internal view of vagina, vagina gaping, spread pussy, labia spread", 
    "dildo": "dildo inserted",
    "huge_dildo": "huge dildo",
    "horse_dildo": "horse dildo",
    "anal_beads": "anal beads inserted",
    "anal_plug": "anal plug",
    "anal_expander": "anal expander stretching anus",
    "gag": "ball gag",
    "piercing": "nipple and genital piercings",
    "long_dildo_path": (
        "dildo inserted into anus, pushing visibly through intestines with clear belly bulge, "
        "exiting from mouth, seamless and continuous dildo, consistent texture, realistic rubber"
    ),
    "doggy": "doggy style",
    "standing": "standing pose",
    "splits": "doing a split",
    "hor_split": (
        "horizontal split, legs stretched fully to sides, pelvis on floor, thighs spread open, "
        "inner thighs visible, high detail"
    ),
    "ver_split": "vertical split",
    "side_up_leg": "on side with leg raised",
    "front_facing": "facing viewer",
    "back_facing": "back to viewer",
    "lying_knees_up": "legs up, knees bent",
    "bridge": "arched back bridge pose",
    "suspended": "suspended by ropes",
    "stockings": "wearing stockings only",
    "mask": "mask on face",
    "heels": "high heels with red soles",
    "shibari": "shibari ropes",
    "big_breasts": "big breasts",
    "small_breasts": "small breasts",
    "skin_white": "white skin",
    "skin_black": "black skin",
    "body_fat": "curvy body",
    "body_thin": "thin body",
    "body_normal": "average body",
    "body_fit": "fit body",
    "body_muscular": "muscular body",
    "age_loli": "loli",
    "age_milf": "milf",
    "age_21": "age 21",
    "cum": "cum covered",
    "belly_bloat": "belly bulge from toy",
    "succubus_tattoo": "succubus tattoo on lower abdomen",
    "futanari": "futanari girl with large breasts",
    "femboy": "male, boy, very feminine body, femboy, androgynous, flat chest, penis, testicles", # –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ò –£–°–ò–õ–ï–ù–ù–´–ô –ü–†–û–ú–ü–¢ –î–õ–Ø –§–ï–ú–ë–û–Ø
    "ethnicity_asian": "asian girl",
    "ethnicity_european": "european girl",
    "furry_cow": "furry cow girl",
    "furry_cat": "furry cat girl",
    "furry_dog": "furry dog girl",
    "furry_dragon": "furry dragon girl",
    "furry_sylveon": "furry sylveon, pink, ribbons, sexy",
    "furry_fox": "furry fox girl",
    "furry_bunny": "furry bunny girl",
    "furry_wolf": "furry wolf girl",
    "ahegao": "ahegao face",
    "pain_face": "face in pain",
    "ecstasy_face": "ecstasy face",
    "gold_lipstick": "gold lipstick"
}

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä ---
def main_menu():
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞."""
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üß© –í—ã–±—Ä–∞—Ç—å —Ç–µ–≥–∏", callback_data="choose_tags"))
    kb.add(types.InlineKeyboardButton("üé® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="generate"))
    return kb

def category_menu():
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–µ–≥–æ–≤."""
    kb = types.InlineKeyboardMarkup(row_width=2)
    for key, name in CATEGORY_NAMES.items():
        kb.add(types.InlineKeyboardButton(name, callback_data=f"cat_{key}"))
    kb.add(types.InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="done_tags"))
    return kb

def tag_menu(category, selected_tags):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–æ–≤ –≤–Ω—É—Ç—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    kb = types.InlineKeyboardMarkup(row_width=2)
    for tag_key, tag_name in TAGS[category].items():
        label = f"‚úÖ {tag_name}" if tag_key in selected_tags else tag_name
        kb.add(types.InlineKeyboardButton(label, callback_data=f"tag_{category}_{tag_key}"))
    kb.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_cat"))
    return kb

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–ª–±—ç–∫–æ–≤ ---
@bot.message_handler(commands=["start"])
def start(msg):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    cid = msg.chat.id
    user_settings[cid] = {"tags": [], "last_cat": None} # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.send_message(cid, "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –¥–µ–ª–∞–µ–º?", reply_markup=main_menu())

@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –∫–æ–ª–±—ç–∫–∞."""
    cid = call.message.chat.id
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if cid not in user_settings:
        user_settings[cid] = {"tags": [], "last_cat": None}

    data = call.data # –î–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–ª–±—ç–∫–∞ –∫–Ω–æ–ø–∫–∏

    if data == "choose_tags":
        bot.edit_message_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–µ–≥–æ–≤:", cid, call.message.message_id, reply_markup=category_menu())

    elif data.startswith("cat_"):
        cat = data[4:] # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        user_settings[cid]["last_cat"] = cat # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        selected = user_settings[cid]["tags"] # –¢–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏
        bot.edit_message_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {CATEGORY_NAMES[cat]}", cid, call.message.message_id, reply_markup=tag_menu(cat, selected))

    elif data.startswith("tag_"):
        _, cat, tag = data.split("_", 2) # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —Ç–µ–≥
        tags = user_settings[cid]["tags"]
        if tag in tags:
            tags.remove(tag) # –ï—Å–ª–∏ —Ç–µ–≥ —É–∂–µ –≤—ã–±—Ä–∞–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ
        else:
            tags.append(tag) # –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º
        bot.edit_message_reply_markup(cid, call.message.message_id, reply_markup=tag_menu(cat, tags))

    elif data == "done_tags":
        bot.edit_message_text("–¢–µ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", cid, call.message.message_id, reply_markup=main_menu())

    elif data == "back_to_cat":
        bot.edit_message_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", cid, call.message.message_id, reply_markup=category_menu())

    elif data == "generate":
        tags = user_settings[cid]["tags"]
        if not tags:
            bot.send_message(cid, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–µ–≥–∏!")
            return
        
        # –°—Ç—Ä–æ–∏–º –ø—Ä–æ–º–ø—Ç –∏ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –µ–≥–æ —É—Å–µ—á–µ–Ω–∏–∏
        prompt_info = build_prompt(tags)
        prompt = prompt_info["prompt"]
        truncated = prompt_info["truncated"]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥–∏"
        user_settings[cid]["last_prompt_tags"] = tags.copy() 
        
        if truncated:
            bot.send_message(cid, "‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ**: –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–≥–∏ –±—ã–ª–∏ –æ—Ç–±—Ä–æ—à–µ–Ω—ã –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –¥–ª–∏–Ω—ã –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –º–µ–Ω—å—à–µ —Ç–µ–≥–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.", parse_mode="Markdown")
        
        bot.send_message(cid, "‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        url = replicate_generate(prompt) # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        if url:
            kb = types.InlineKeyboardMarkup()
            kb.add(
                types.InlineKeyboardButton("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start"),
                types.InlineKeyboardButton("üîß –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥–∏", callback_data="edit_tags"),
                types.InlineKeyboardButton("‚û° –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —ç—Ç–∏–º–∏", callback_data="generate")
            )
            bot.send_photo(cid, url, caption="‚úÖ –ì–æ—Ç–æ–≤–æ!", reply_markup=kb)
        else:
            bot.send_message(cid, "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    elif data == "edit_tags":
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if "last_prompt_tags" in user_settings[cid]:
            user_settings[cid]["tags"] = user_settings[cid]["last_prompt_tags"]
            bot.send_message(cid, "–ò–∑–º–µ–Ω—è–µ–º —Ç–µ–≥–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", reply_markup=category_menu())
        else:
            bot.send_message(cid, "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π –≥–µ–Ω–µ—Ä–∞—Ü–∏—é.")

    elif data == "start":
        # –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        user_settings[cid] = {"tags": [], "last_cat": None}
        bot.send_message(cid, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã. –ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ!", reply_markup=main_menu())

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ ---
def build_prompt(tags):
    """
    –°—Ç—Ä–æ–∏—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –º–æ–¥–µ–ª–∏ Replicate –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤.
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–æ–π –ø—Ä–æ–º–ø—Ç–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –µ–≥–æ —É—Å–µ—á–µ–Ω–∏—è –º–æ–¥–µ–ª—å—é.
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π —á–∞—Å—Ç–∏ –ø—Ä–æ–º–ø—Ç–∞.
    """
    # –ë–∞–∑–æ–≤—ã–π –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç: —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω –Ω–∞ –∂–µ–ª–∞–µ–º–æ–º –∫–∞—á–µ—Å—Ç–≤–µ
    base_positive = "nsfw, masterpiece, ultra detailed, anime style, best quality, fully nude, no clothing covering chest or genitals"
    
    # –ë–∞–∑–æ–≤—ã–π –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç: —á—Ç–æ –º–æ–¥–µ–ª—å –î–û–õ–ñ–ù–ê –ò–ó–ë–ï–ì–ê–¢–¨.
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —Å –≤–µ—Å–æ–º (—Å–ª–æ–≤–æ:—á–∏—Å–ª–æ) –¥–ª—è —É—Å–∏–ª–µ–Ω–∏—è
    base_negative = "bad anatomy, deformed, disfigured, poorly drawn face, poorly drawn hands, missing limbs, extra limbs, fused fingers, too many fingers, too few fingers, lowres, bad hands, text, error, missing fingers, extra digit, fewer digits, cropped, worst quality, low quality, normal quality, jpeg artifacts, signature, watermark, username, blurry, artist name, (hands on chest:1.5), (hands covering breasts:1.5), (hands covering crotch:1.5), (out of frame:1.2), (ugly:1.2), (femboy as girl:1.5)"

    positive_parts = []
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–≥–∏ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ–º–ø—Ç–∞
    sorted_tags = sorted(tags)
    
    for tag in sorted_tags:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ TAG_PROMPTS –∏–ª–∏ —Å–∞–º —Ç–µ–≥ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–∞–ø–∞—Å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        prompt_segment = TAG_PROMPTS.get(tag, tag)
        positive_parts.append(prompt_segment)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–±–æ—Ä (set) –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–º–ø—Ç–∞
    unique_positive_parts = set(positive_parts)
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —á–∞—Å—Ç–∏
    final_positive_prompt_str = base_positive
    if unique_positive_parts:
        final_positive_prompt_str += ", " + ", ".join(unique_positive_parts)

    # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç.
    # –í —ç—Ç–æ–π –º–æ–¥–µ–ª–∏ –Ω–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ negative_prompt, –ø–æ—ç—Ç–æ–º—É –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∫–æ–Ω–µ—Ü.
    # –≠—Ç–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –º–æ–¥–µ–ª–µ–π, —Ö–æ—Ç—è –∏ –Ω–µ –∏–¥–µ–∞–ª—å–Ω—ã–π.
    combined_prompt = f"{final_positive_prompt_str} AND {base_negative}"

    # --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –î–õ–ò–ù–û–ô –ü–†–û–ú–ü–¢–ê ---
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–∞—è –¥–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞.
    # –≠—Ç–æ –≤–∞–∂–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ.
    MAX_PROMPT_LENGTH = 700  # –ù–∞—á–Ω–µ–º —Å 700, –≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞
    truncated = False # –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –±—ã–ª –ª–∏ –ø—Ä–æ–º–ø—Ç —É—Å–µ—á–µ–Ω

    if len(combined_prompt) > MAX_PROMPT_LENGTH:
        truncated = True
        # –ï—Å–ª–∏ –ø—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –º—ã —Å–Ω–∞—á–∞–ª–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∑–∏—Ç–∏–≤–Ω—É—é —á–∞—Å—Ç—å,
        # –∞ –∑–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–≥–∞—Ç–∏–≤–Ω—É—é, —É—Å–µ–∫–∞—è –µ–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –ø–æ–∑–∏—Ç–∏–≤–Ω—É—é –∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—É—é —á–∞—Å—Ç–∏ –¥–ª—è —É—Å–µ—á–µ–Ω–∏—è
        current_positive_length = len(base_positive)
        truncated_positive_parts = [base_positive]

        for part in unique_positive_parts:
            if current_positive_length + len(part) + 2 <= MAX_PROMPT_LENGTH - len(f" AND {base_negative}"):
                truncated_positive_parts.append(part)
                current_positive_length += len(part) + 2
            else:
                break
        
        final_positive_prompt_str = ", ".join(truncated_positive_parts)
        
        # –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–≥–∞—Ç–∏–≤–Ω—É—é —á–∞—Å—Ç—å, —É–±–µ–¥–∏–≤—à–∏—Å—å, —á—Ç–æ –æ–Ω–∞ –ø–æ–º–µ—â–∞–µ—Ç—Å—è
        # –ï—Å–ª–∏ –≤—Å—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –≤–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–∏–¥–µ—Ç—Å—è —É—Å–µ—á—å –∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—É—é —á–∞—Å—Ç—å,
        # –Ω–æ —ç—Ç–æ –º–µ–Ω–µ–µ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ. –°–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ –ø—ã—Ç–∞–µ–º—Å—è –≤—Å—Ç–∞–≤–∏—Ç—å –µ–µ.
        
        combined_prompt = f"{final_positive_prompt_str} AND {base_negative}"
        
        # –ï—Å–ª–∏ –¥–∞–∂–µ –ø–æ—Å–ª–µ —É—Å–µ—á–µ–Ω–∏—è –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–π —á–∞—Å—Ç–∏ –æ–±—â–∏–π –ø—Ä–æ–º–ø—Ç –≤—Å–µ —Ä–∞–≤–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        # (—á—Ç–æ –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ, –µ—Å–ª–∏ MAX_PROMPT_LENGTH –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–æ–π),
        # —Ç–æ –ø—Ä–∏–¥–µ—Ç—Å—è –æ–±—Ä–µ–∑–∞—Ç—å –∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—É—é —á–∞—Å—Ç—å. –ù–æ –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–∞–∫.
        if len(combined_prompt) > MAX_PROMPT_LENGTH:
            combined_prompt = combined_prompt[:MAX_PROMPT_LENGTH] # –ì—Ä—É–±–æ–µ —É—Å–µ—á–µ–Ω–∏–µ, –µ—Å–ª–∏ —É–∂ —Å–æ–≤—Å–µ–º –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è

    return {"prompt": combined_prompt, "truncated": truncated}

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Replicate ---
def replicate_generate(prompt):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Replicate API –∏ –æ–∂–∏–¥–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    url = "https://api.replicate.com/v1/predictions"
    headers = {
        "Authorization": f"Token {REPLICATE_TOKEN}",
        "Content-Type": "application/json"
    }
    json_data = {
        "version": REPLICATE_MODEL,
        "input": {"prompt": prompt}
    }
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    r = requests.post(url, headers=headers, json=json_data)
    if r.status_code != 201:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {r.status_code} - {r.text}")
        return None
    
    status_url = r.json()["urls"]["get"] # URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è

    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–¥–æ 3 –º–∏–Ω—É—Ç)
    for i in range(90): # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 60 –¥–æ 90 –ø–æ–ø—ã—Ç–æ–∫ (3 –º–∏–Ω—É—Ç—ã)
        time.sleep(2) # –û–∂–∏–¥–∞–Ω–∏–µ 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
        r = requests.get(status_url, headers=headers)
        if r.status_code != 200:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {r.status_code} - {r.text}")
            return None
        data = r.json()
        if data["status"] == "succeeded":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL –ø–µ—Ä–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            return data["output"][0] if isinstance(data["output"], list) and data["output"] else None
        elif data["status"] == "failed":
            print(f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {data.get('error', '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ')}")
            return None
    
    print("–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ.")
    return None

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞ Flask ---
@app.route("/", methods=["POST"])
def webhook():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram."""
    json_str = request.stream.read().decode("utf-8")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "ok", 200

@app.route("/", methods=["GET"])
def home():
    """–ü—Ä–æ—Å—Ç–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    return "–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç", 200

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app.run(host="0.0.0.0", port=PORT)
