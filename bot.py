import os
import time
import requests
import telebot
from telebot import types
from flask import Flask, request

API_TOKEN = os.getenv("TELEGRAM_TOKEN")
REPLICATE_TOKEN = os.getenv("REPLICATE_API_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://retete.onrender.com")

bot = telebot.TeleBot(API_TOKEN)
app = Flask(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ø—Ä–æ–º—Ç–∞ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏ –∏ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
def expand_prompt_synonyms(text):
    text = text.lower()
    additions = []

    # –ê–Ω–∞–ª
    anal_synonyms = ["–∞–Ω–∞–ª", "–∞–Ω—É—Å", "–∞–Ω–∞–ª—å–Ω—ã–π"]
    if any(word in text for word in anal_synonyms):
        additions.append("anal, anal sex, detailed anus, erotic")

    # –î–∏–ª–¥–æ
    dildo_synonyms = ["–¥–∏–ª–¥–æ", "–±–æ–ª—å—à–æ–π –¥–∏–ª–¥–æ", "–∫–æ–Ω—Å–∫–∏–π –¥–∏–ª–¥–æ", "–æ–≥—Ä–æ–º–Ω—ã–π –¥–∏–ª–¥–æ", "–≥–∏–≥–∞–Ω—Ç—Å–∫–∏–π –¥–∏–ª–¥–æ"]
    if any(word in text for word in dildo_synonyms):
        additions.append("large dildo, realistic dildo, dildo penetration, detailed dildo")

    # –ü–æ–∑–∞
    pose_synonyms = {
        "—Ä–∞–∫–æ–º": "doggy style, rear view",
        "–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç": "vertical splits, flexible pose",
        "–Ω–∞ –∫–æ—Ä—Ç–æ—á–∫–∞—Ö": "crouching pose, bent knees",
        "–º–∏—Å—Å–∏–æ–Ω–µ—Ä—Å–∫–∞—è": "missionary position",
        "69": "69 position"
    }
    for key, phrase in pose_synonyms.items():
        if key in text:
            additions.append(phrase)

    # –í–∏–¥–Ω–æ –∫–∏—Å–∫—É
    pussy_synonyms = ["–≤–∏–¥–Ω–æ –∫–∏—Å–∫—É", "–∫–∏—Å–∫–∞ –≤–∏–¥–Ω–∞", "–æ–±–Ω–∞–∂—ë–Ω–Ω–∞—è –∫–∏—Å–∫–∞", "–≤–∏–¥–Ω–∞ –≤–∞–≥–∏–Ω–∞"]
    if any(word in text for word in pussy_synonyms):
        additions.append("exposed pussy, pussy visible, detailed vulva")

    # –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –≥—Ä—É–¥–∏
    breast_synonyms = {
        "–±–æ–ª—å—à–∞—è –≥—Ä—É–¥—å": "large breasts, big boobs, voluptuous",
        "–º–∞–ª–µ–Ω—å–∫–∞—è –≥—Ä—É–¥—å": "small breasts, petite boobs",
        "–æ–≥—Ä–æ–º–Ω–∞—è –≥—Ä—É–¥—å": "huge breasts, massive boobs",
        "—Å—Ä–µ–¥–Ω—è—è –≥—Ä—É–¥—å": "medium breasts"
    }
    for key, phrase in breast_synonyms.items():
        if key in text:
            additions.append(phrase)

    # –ü–∏—Ä—Å–∏–Ω–≥
    piercing_synonyms = ["–ø–∏—Ä—Å–∏–Ω–≥", "–ø–∏—Ä—Å–∏–Ω–≥ –Ω–∞ –≥—Ä—É–¥–∏", "–ø–∏—Ä—Å–∏–Ω–≥ –Ω–∞ —Å–æ—Å–∫–∞—Ö", "–ø–∏—Ä—Å–∏–Ω–≥ –Ω–∞ –ø—É–ø–∫–µ"]
    if any(word in text for word in piercing_synonyms):
        additions.append("piercing, nipple piercing, belly button piercing")

    # –ß—É–ª–∫–∏
    stockings_synonyms = ["—á—É–ª–∫–∏", "—Å —á—É–ª–∫–∞–º–∏", "—Å–µ—Ç—á–∞—Ç—ã–µ —á—É–ª–∫–∏", "–∫—Ä—É–∂–µ–≤–Ω—ã–µ —á—É–ª–∫–∏"]
    if any(word in text for word in stockings_synonyms):
        additions.append("stockings, lace stockings, fishnet stockings")

    return ", ".join(additions)

# –£—Å–∏–ª–∏—Ç–µ–ª–∏ –ø—Ä–æ–º—Ç–æ–≤
def enhance_prompt(base_prompt, mode):
    base_prompt = base_prompt.strip()
    base_prompt = base_prompt.capitalize()

    enhancers = {
        "nsfw_female": "nude, erotic, sensual, solo, young female, seductive, large breasts, soft skin, masterpiece, ultra detailed, NSFW",
        "futanari": "futanari, shemale, dickgirl, big breasts, penis, nude, erotic pose, solo, highly detailed, NSFW",
        "femboy": "femboy, cute male, feminine face, soft skin, lingerie, erotic, slim waist, NSFW, solo",
        "shibari": "shibari, rope bondage, tied up, detailed knots, erotic ropes, submissive pose, NSFW, cinematic",
        "default": ""
    }

    enhancer = enhancers.get(mode, enhancers["default"])
    extra = expand_prompt_synonyms(base_prompt)
    prompt = f"{base_prompt}"
    if enhancer:
        prompt += f", {enhancer}"
    if extra:
        prompt += f", {extra}"
    prompt += ", masterpiece, high quality, 4k, detailed, realistic"
    return prompt

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ —á–µ—Ä–µ–∑ Replicate
def generate_image(prompt):
    url = "https://api.replicate.com/v1/predictions"
    headers = {
        "Authorization": f"Token {REPLICATE_TOKEN}",
        "Content-Type": "application/json"
    }
    data = {
        "version": "fb4f086702d6a301ca32c170d926239324a7b7b2f0afc3d232a9c4be382dc3fa",
        "input": {"prompt": prompt}
    }
    response = requests.post(url, headers=headers, json=data)
    if response.status_code == 201:
        prediction = response.json()
        return prediction["urls"]["get"], None
    return None, f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {response.status_code} {response.text}"

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
def generate_custom_image(message, mode):
    prompt = enhance_prompt(message.text, mode)
    bot.send_message(message.chat.id, "üîû –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–¥–æ–∂–¥–∏...")

    status_url, error = generate_image(prompt)
    if error:
        bot.send_message(message.chat.id, error)
        return

    for _ in range(25):
        res = requests.get(status_url, headers={"Authorization": f"Token {REPLICATE_TOKEN}"})
        if res.status_code != 200:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: {res.status_code} {res.text}")
            return
        status = res.json()
        if status.get("status") == "succeeded":
            img = status["output"][0]
            bot.send_photo(message.chat.id, img)
            return
        elif status.get("status") == "failed":
            bot.send_message(message.chat.id, "‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å.")
            return
        time.sleep(2)
    bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞ –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    mode = call.data
    prompt_msg = {
        "nsfw_female": "üìù –û–ø–∏—à–∏ –¥–µ–≤—É—à–∫—É:",
        "futanari": "üìù –û–ø–∏—à–∏ —Ñ—É—Ç–∞–Ω–∞—Ä–∏-—Å—Ü–µ–Ω—É:",
        "femboy": "üìù –û–ø–∏—à–∏ —Ñ–µ–º–±–æ—è:",
        "shibari": "üìù –û–ø–∏—à–∏ —Å—Ü–µ–Ω—É —Å —à–∏–±–∞—Ä–∏:"
    }.get(mode, "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")

    msg = bot.send_message(call.message.chat.id, prompt_msg)
    bot.register_next_step_handler(msg, lambda m: generate_custom_image(m, mode))

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("üéÄ NSFW –¥–ª—è –∂–µ–Ω—â–∏–Ω", callback_data="nsfw_female"),
        types.InlineKeyboardButton("‚ößÔ∏è –§—É—Ç–∞–Ω–∞—Ä–∏", callback_data="futanari")
    )
    markup.row(
        types.InlineKeyboardButton("üßë‚Äçüé§ –§–µ–º–±–æ–π", callback_data="femboy"),
        types.InlineKeyboardButton("ü™¢ –®–∏–±–∞—Ä–∏", callback_data="shibari")
    )
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", reply_markup=markup)

# –ï—Å–ª–∏ –ø–∏—à—É—Ç –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –±–µ–∑ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–µ–∑ —É—Å–∏–ª–µ–Ω–∏—è (default)
@bot.message_handler(func=lambda m: True)
def handle_prompt(message):
    bot.send_message(message.chat.id, "üîÅ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ–±—ã—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ —É—Å–∏–ª–µ–Ω–∏—è...")
    generate_custom_image(message, "default")

# Flask Webhook
@app.route('/', methods=['POST'])
def webhook():
    update = telebot.types.Update.de_json(request.data.decode("utf-8"))
    bot.process_new_updates([update])
    return '', 200

@app.route('/', methods=['GET'])
def index():
    return 'ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç'

if __name__ == '__main__':
    bot.remove_webhook()
    bot.set_webhook(WEBHOOK_URL)
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))