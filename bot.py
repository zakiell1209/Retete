import os
import time
import requests
import logging
from flask import Flask, request
import telebot
from telebot import types

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = os.getenv("TELEGRAM_TOKEN")
REPLICATE_TOKEN = os.getenv("REPLICATE_API_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.environ.get("PORT", 5000))
REPLICATE_MODEL = "c1d5b02687df6081c7953c74bcc527858702e8c153c9382012ccc3906752d3ec"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
bot = telebot.TeleBot(API_TOKEN)
app = Flask(__name__)
user_settings = {}

# –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤
CATEGORY_NAMES = {
    "holes": "–û—Ç–≤–µ—Ä—Å—Ç–∏—è",
    "toys": "–ò–≥—Ä—É—à–∫–∏",
    "poses": "–ü–æ–∑—ã",
    "clothes": "–û–¥–µ–∂–¥–∞",
    "body": "–¢–µ–ª–æ",
    "ethnos": "–≠—Ç–Ω–æ—Å",
    "furry": "–§—É—Ä–∏",
    "characters": "–ü–µ—Ä—Å–æ–Ω–∞–∂–∏",
    "head": "–ì–æ–ª–æ–≤–∞"
}

TAGS = {
    "holes": {
        "vagina": "–í–∞–≥–∏–Ω–∞",
        "anal": "–ê–Ω—É—Å",
        "both": "–í–∞–≥–∏–Ω–∞ –∏ –∞–Ω—É—Å"
    },
    "toys": {
        "dildo": "–î–∏–ª–¥–æ",
        "huge_dildo": "–ë–æ–ª—å—à–æ–µ –¥–∏–ª–¥–æ",
        "horse_dildo": "–õ–æ—à–∞–¥–∏–Ω–æ–µ –¥–∏–ª–¥–æ",
        "anal_beads": "–ê–Ω–∞–ª—å–Ω—ã–µ –±—É—Å—ã",
        "anal_plug": "–ê–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–±–∫–∞",
        "anal_expander": "–ê–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—à–∏—Ä–∏—Ç–µ–ª—å",
        "gag": "–ö–ª—è–ø",
        "piercing": "–ü–∏—Ä—Å–∏–Ω–≥",
        "long_dildo_path": "–î–∏–ª–¥–æ –∏–∑ –∞–Ω—É—Å–∞ –≤—ã—Ö–æ–¥–∏—Ç –∏–∑–æ —Ä—Ç–∞"
    },
    "poses": {
        "doggy": "–ù–∞–µ–∑–¥–Ω–∏—Ü–∞ (–¥–æ–≥–≥–∏-—Å—Ç–∞–π–ª)",
        "standing": "–°—Ç–æ—è",
        "splits": "–®–ø–∞–≥–∞—Ç",
        "squat": "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏–µ",
        "lying": "–õ–µ–∂–∞",
        "hor_split": "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç",
        "ver_split": "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç",
        "side_up_leg": "–ù–∞ –±–æ–∫—É —Å –ø–æ–¥–Ω—è—Ç–æ–π –Ω–æ–≥–æ–π",
        "front_facing": "–õ–∏—Ü–æ–º –∫ –∑—Ä–∏—Ç–µ–ª—é",
        "back_facing": "–°–ø–∏–Ω–æ–π –∫ –∑—Ä–∏—Ç–µ–ª—é",
        "lying_knees_up": "–õ–µ–∂–∞ —Å —Å–æ–≥–Ω—É—Ç—ã–º–∏ –∫–æ–ª–µ–Ω—è–º–∏",
        "bridge": "–ú–æ—Å—Ç",
        "suspended": "–ü–æ–¥–≤–µ—à–µ–Ω–∞"
    },
    "clothes": {
        "stockings": "–ß—É–ª–∫–∏",
        "bikini_tan_lines": "–ó–∞–≥–∞—Ä –æ—Ç –±–∏–∫–∏–Ω–∏",
        "mask": "–ú–∞—Å–∫–∞",
        "heels": "–ö–∞–±–ª—É–∫–∏",
        "shibari": "–®–∏–±–∞—Ä–∏"
    },
    "body": {
        "big_breasts": "–ë–æ–ª—å—à–∞—è –≥—Ä—É–¥—å",
        "small_breasts": "–ú–∞–ª–µ–Ω—å–∫–∞—è –≥—Ä—É–¥—å",
        "skin_white": "–ë–µ–ª–∞—è –∫–æ–∂–∞",
        "skin_black": "–ß—ë—Ä–Ω–∞—è –∫–æ–∂–∞",
        "body_fat": "–ü—ã—à–Ω–æ–µ —Ç–µ–ª–æ",
        "body_thin": "–•—É–¥–æ–µ —Ç–µ–ª–æ",
        "body_normal": "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ç–µ–ª–æ",
        "body_fit": "–ü–æ–¥—Ç—è–Ω—É—Ç–æ–µ —Ç–µ–ª–æ",
        "body_muscular": "–ú—É—Å–∫—É–ª–∏—Å—Ç–æ–µ —Ç–µ–ª–æ",
        "age_loli": "–õ–æ–ª–∏",
        "age_milf": "–ú–∏–ª—Ñ–∞",
        "age_21": "–í–æ–∑—Ä–∞—Å—Ç 21",
        "cum": "–í—Å—è –≤ —Å–ø–µ—Ä–º–µ",
        "belly_bloat": "–í–∑–¥—É—Ç–∏–µ –∂–∏–≤–æ—Ç–∞",
        "succubus_tattoo": "–¢–∞—Ç—É –≤–Ω–∏–∑—É –∂–∏–≤–æ—Ç–∞"
    },
    "ethnos": {
        "futanari": "–§—É—Ç–∞–Ω–∞—Ä–∏",
        "femboy": "–§–µ–º–±–æ–π",
        "ethnicity_asian": "–ê–∑–∏–∞—Ç–∫–∞",
        "ethnicity_european": "–ï–≤—Ä–æ–ø–µ–π–∫–∞"
    },
    "furry": {
        "furry_cow": "–§—É—Ä–∏ –∫–æ—Ä–æ–≤–∞",
        "furry_cat": "–§—É—Ä–∏ –∫–æ—à–∫–∞",
        "furry_dog": "–§—É—Ä–∏ —Å–æ–±–∞–∫–∞",
        "furry_dragon": "–§—É—Ä–∏ –¥—Ä–∞–∫–æ–Ω",
        "furry_sylveon": "–§—É—Ä–∏ —Å–∏–ª—å–≤–µ–æ–Ω",
        "furry_fox": "–§—É—Ä–∏ –ª–∏—Å–∏—Ü–∞",
        "furry_bunny": "–§—É—Ä–∏ –∫—Ä–æ–ª–∏–∫",
        "furry_wolf": "–§—É—Ä–∏ –≤–æ–ª—á–∏—Ü–∞"
    },
    "characters": {
        "rias": "–†–∏–∞—Å –ì—Ä–µ–º–æ—Ä–∏",
        "akeno": "–ê–∫–µ–Ω–æ –•–∏–º–µ–¥–∑–∏–º–∞",
        "kafka": "–ö–∞—Ñ–∫–∞ (–•–æ–Ω–∫–∞–π)",
        "eula": "–ï–æ–ª–∞ (–ì–µ–Ω—à–∏–Ω)",
        "fu_xuan": "–§—É –°—é–∞–Ω—å (–•–æ–Ω–∫–∞–π)",
        "ayase": "–ê—è—Å–µ –°–µ–π–∫–æ"
    },
    "head": {
        "ahegao": "–ê—Ö–µ–≥–∞–æ",
        "pain_face": "–õ–∏—Ü–æ –≤ –±–æ–ª–∏",
        "ecstasy_face": "–õ–∏—Ü–æ –≤ —ç–∫—Å—Ç–∞–∑–µ",
        "gold_lipstick": "–ó–æ–ª–æ—Ç–∞—è –ø–æ–º–∞–¥–∞"
    }
}

# –ì—Ä—É–ø–ø—ã –∏—Å–∫–ª—é—á–∞—é—â–∏—Ö —Ç–µ–≥–æ–≤
EXCLUSIVE_GROUPS = {
    "breast_size": ["big_breasts", "small_breasts"],
    "body_type": ["body_fat", "body_thin", "body_normal", "body_fit", "body_muscular"],
    "skin_color": ["skin_white", "skin_black"],
    "age": ["age_loli", "age_milf", "age_21"]
}

# –§—É–Ω–∫—Ü–∏–∏ –º–µ–Ω—é
def main_menu():
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton("üß© –í—ã–±—Ä–∞—Ç—å —Ç–µ–≥–∏", callback_data="choose_tags"),
        types.InlineKeyboardButton("üé® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="generate"),
        types.InlineKeyboardButton("‚Ñπ –ü–æ–º–æ—â—å", callback_data="help")
    )
    return kb

def category_menu():
    kb = types.InlineKeyboardMarkup(row_width=2)
    buttons = []
    for key, name in CATEGORY_NAMES.items():
        buttons.append(types.InlineKeyboardButton(name, callback_data=f"cat_{key}"))
    kb.add(*buttons)
    kb.add(types.InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="done_tags"))
    return kb

def tag_menu(category, selected_tags):
    kb = types.InlineKeyboardMarkup(row_width=2)
    
    if category not in TAGS:
        return kb
    
    for tag_key, tag_name in TAGS[category].items():
        emoji = "‚úÖ " if tag_key in selected_tags else ""
        kb.add(types.InlineKeyboardButton(
            f"{emoji}{tag_name}",
            callback_data=f"tag_{category}_{tag_key}"
        ))
    
    kb.add(types.InlineKeyboardButton(
        "‚¨Ö –ù–∞–∑–∞–¥",
        callback_data="back_to_cat"
    ))
    
    return kb

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=["start"])
def start(msg):
    cid = msg.chat.id
    user_settings[cid] = {"tags": [], "last_cat": None}
    bot.send_message(cid, "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –¥–µ–ª–∞–µ–º?", reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda call: call.data == "help")
def show_help(call):
    help_text = (
        "üìö <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:</b>\n\n"
        "1. –ù–∞–∂–º–∏—Ç–µ 'üß© –í—ã–±—Ä–∞—Ç—å —Ç–µ–≥–∏' –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–µ–≥–∏\n"
        "3. –ù–∞–∂–º–∏—Ç–µ 'üé® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n\n"
        "‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç 1-2 –º–∏–Ω—É—Ç—ã\n"
        "üîÑ –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥–∏ –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
    )
    bot.edit_message_text(
        help_text,
        call.message.chat.id,
        call.message.message_id,
        parse_mode="HTML"
    )

@bot.callback_query_handler(func=lambda call: call.data == "choose_tags")
def choose_tags_handler(call):
    cid = call.message.chat.id
    if cid not in user_settings:
        user_settings[cid] = {"tags": [], "last_cat": None}
    
    try:
        bot.edit_message_text(
            "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–µ–≥–æ–≤:",
            chat_id=cid,
            message_id=call.message.message_id,
            reply_markup=category_menu()
        )
    except Exception as e:
        logger.error(f"Error in choose_tags_handler: {str(e)}")
        bot.answer_callback_query(call.id, "‚ö† –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é")

@bot.callback_query_handler(func=lambda call: call.data.startswith("cat_"))
def category_handler(call):
    cid = call.message.chat.id
    category = call.data.split("_", 1)[1]
    
    if cid not in user_settings:
        user_settings[cid] = {"tags": [], "last_cat": None}
    
    user_settings[cid]["last_cat"] = category
    
    try:
        bot.edit_message_text(
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {CATEGORY_NAMES.get(category, '???')}",
            chat_id=cid,
            message_id=call.message.message_id,
            reply_markup=tag_menu(category, user_settings[cid]["tags"])
        )
    except Exception as e:
        logger.error(f"Error in category_handler: {str(e)}")
        bot.answer_callback_query(call.id, "‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–≥–æ–≤")

@bot.callback_query_handler(func=lambda call: call.data.startswith("tag_"))
def tag_handler(call):
    cid = call.message.chat.id
    _, category, tag = call.data.split("_", 2)
    
    if cid not in user_settings:
        user_settings[cid] = {"tags": [], "last_cat": None}
    
    tags = user_settings[cid]["tags"]
    
    if tag in tags:
        tags.remove(tag)
    else:
        tags.append(tag)
    
    try:
        bot.edit_message_reply_markup(
            chat_id=cid,
            message_id=call.message.message_id,
            reply_markup=tag_menu(category, tags)
        )
    except Exception as e:
        logger.error(f"Error in tag_handler: {str(e)}")
        bot.answer_callback_query(call.id, "‚ö† –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤")

@bot.callback_query_handler(func=lambda call: call.data == "back_to_cat")
def back_to_cat_handler(call):
    cid = call.message.chat.id
    try:
        bot.edit_message_text(
            "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            chat_id=cid,
            message_id=call.message.message_id,
            reply_markup=category_menu()
        )
    except Exception as e:
        logger.error(f"Error in back_to_cat_handler: {str(e)}")
        bot.answer_callback_query(call.id, "‚ö† –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞")

@bot.callback_query_handler(func=lambda call: call.data == "done_tags")
def done_tags_handler(call):
    cid = call.message.chat.id
    try:
        bot.edit_message_text(
            "–¢–µ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ß—Ç–æ –¥–∞–ª—å—à–µ?",
            chat_id=cid,
            message_id=call.message.message_id,
            reply_markup=main_menu()
        )
    except Exception as e:
        logger.error(f"Error in done_tags_handler: {str(e)}")
        bot.answer_callback_query(call.id, "‚ö† –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (build_prompt, replicate_generate) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

if __name__ == "__main__":
    logger.info("Starting bot...")
    try:
        if WEBHOOK_URL:
            bot.remove_webhook()
            time.sleep(1)
            bot.set_webhook(url=WEBHOOK_URL)
            app.run(host="0.0.0.0", port=PORT)
        else:
            bot.infinity_polling()
    except Exception as e:
        logger.error(f"Bot crashed: {str(e)}")
        raise