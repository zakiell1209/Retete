import os
import time
import requests
from flask import Flask, request
import telebot
from telebot import types

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏ URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("TELEGRAM_TOKEN")
REPLICATE_TOKEN = os.getenv("REPLICATE_API_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.environ.get("PORT", 5000))

# ID –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏ Replicate, –∫–æ—Ç–æ—Ä—É—é –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ
REPLICATE_MODEL = "80441e2c32a55f2fcf9b77fa0a74c6c86ad7deac51eed722b9faedb253265cb4"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
bot = telebot.TeleBot(API_TOKEN)
app = Flask(__name__)
user_settings = {} # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# --- –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –º–µ–Ω—é ---
CATEGORY_NAMES = {
    "holes": "üï≥Ô∏è –û—Ç–≤–µ—Ä—Å—Ç–∏—è",
    "toys": "üß∏ –ò–≥—Ä—É—à–∫–∏",
    "poses": "üßò –ü–æ–∑—ã",
    "clothes": "üëó –û–¥–µ–∂–¥–∞",
    "body": "üí™ –¢–µ–ª–æ",
    "ethnos": "üåç –≠—Ç–Ω–æ—Å",
    "furry": "üêæ –§—É—Ä–∏",
    "characters": "ü¶∏ –ü–µ—Ä—Å–æ–Ω–∞–∂–∏",
    "head": "ü§Ø –ì–æ–ª–æ–≤–∞",
    "fetish": "üîó –§–µ—Ç–∏—à–∏",
    "pokemon": "‚ö° –ü–æ–∫–µ–º–æ–Ω—ã"
}

# --- –¢–µ–≥–∏ —Å –Ω–æ–≤—ã–º–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è–º–∏ ---
TAGS = {
    "holes": {
        "vagina": "–í–∞–≥–∏–Ω–∞",
        "anus": "–ê–Ω—É—Å",
        "both": "–í–∞–≥–∏–Ω–∞ –∏ –∞–Ω—É—Å",
        "dilated_anus": "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω—É—Å",
        "dilated_vagina": "–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∫–∏—Å–∫–∞",
        "prolapsed_uterus": "–í—ã–ø–∞–≤—à–∞—è –º–∞—Ç–∫–∞",
        "prolapsed_anus": "–í—ã–ø–∞–≤—à–∏–π –∞–Ω—É—Å",
        "two_dildos_one_hole": "–î–≤–∞ –¥–∏–ª–¥–æ –≤ –æ–¥–Ω–æ –æ—Ç–≤–µ—Ä—Å—Ç–∏–µ",
        "dilated_nipples": "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–æ—Å–∫–∏",
        "anus_spreader_ring": "–†–∞—Å—à–∏—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª—å—Ü–æ –≤ –∞–Ω—É—Å–µ",
        "vagina_spreader_ring": "–†–∞—Å—à–∏—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª—å—Ü–æ –≤ –≤–∞–≥–∏–Ω–µ"
    },
    "toys": {
        "dildo": "–î–∏–ª–¥–æ",
        "huge_dildo": "–ë–æ–ª—å—à–æ–µ –¥–∏–ª–¥–æ",
        "horse_dildo": "–ö–æ–Ω—Å–∫–∏–π –¥–∏–ª–¥–æ",
        "anal_beads": "–ê–Ω–∞–ª—å–Ω—ã–µ —à–∞—Ä–∏–∫–∏",
        "anal_plug": "–ê–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–±–∫–∞",
        "long_dildo_path": "–î–∏–ª–¥–æ —Å–∫–≤–æ–∑—å –≤—Å–µ —Ç–µ–ª–æ",
        "urethral_dildo": "–î–∏–ª–¥–æ –≤ —É—Ä–µ—Ç—Ä–µ",
        "two_dildos_anus_vagina": "–î–∏–ª–¥–æ –≤ –∞–Ω—É—Å–µ –∏ –≤–∞–≥–∏–Ω–µ"
    },
    "poses": {
        "doggy": "–ù–∞ —á–µ—Ç–≤–µ—Ä–µ–Ω—å–∫–∞—Ö",
        "standing": "–°—Ç–æ—è",
        "squat": "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏–µ",
        "lying": "–õ–µ–∂–∞",
        "hor_split": "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç",
        "ver_split": "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç",
        "on_back_legs_behind_head": "–ù–∞ —Å–ø–∏–Ω–µ –Ω–æ–≥–∏ –∑–∞ –≥–æ–ª–æ–≤–æ–π",
        "on_side_leg_up": "–ù–∞ –±–æ–∫—É –Ω–æ–≥–∞ –≤–≤–µ—Ä—Ö",
        "suspended": "–ü–æ–¥–≤–µ—à–µ–Ω–∞",
        "front_facing": "–í–∏–¥ —Å–ø–µ—Ä–µ–¥–∏",
        "back_facing": "–í–∏–¥ —Å–∑–∞–¥–∏",
        "top_down_view": "–í–∏–¥ —Å–≤–µ—Ä—Ö—É",
        "bottom_up_view": "–í–∏–¥ —Å–Ω–∏–∑—É",
        "hands_spreading_vagina": "–†—É–∫–∏ —Ä–∞–∑–¥–≤–∏–≥–∞—é—Ç –≤–ª–∞–≥–∞–ª–∏—â–µ",
        "lotus_pose": "–ü–æ–∑–∞ –ª–æ—Ç–æ—Å–∞", # NEW
        "scissors_pose": "–ü–æ–∑–∞ –Ω–æ–∂–Ω–∏—Ü—ã (–¥–≤–µ –¥–µ–≤—É—à–∫–∏)" # NEW
    },
    "clothes": {
        "stockings": "–ß—É–ª–∫–∏", # Subcategory trigger
        "bikini_tan_lines": "–õ–∏–Ω–∏–∏ –æ—Ç –∑–∞–≥–∞—Ä–∞ –≤ –±–∏–∫–∏–Ω–∏",
        "shibari": "–®–∏–±–∞—Ä–∏",
        "cow_costume": "–ö–æ—Å—Ç—é–º –∫–æ—Ä–æ–≤—ã"
    },
    "body": {
        "big_breasts": "–ë–æ–ª—å—à–∞—è –≥—Ä—É–¥—å",
        "small_breasts": "–ú–∞–ª–µ–Ω—å–∫–∞—è –≥—Ä—É–¥—å",
        "body_fit": "–ü–æ–¥—Ç—è–Ω—É—Ç–æ–µ —Ç–µ–ª–æ",
        "body_fat": "–ü—ã—à–Ω–æ–µ —Ç–µ–ª–æ",
        "body_muscular": "–ú—É—Å–∫—É–ª–∏—Å—Ç–æ–µ —Ç–µ–ª–æ",
        "age_loli": "–õ–æ–ª–∏",
        "age_milf": "–ú–∏–ª—Ñ–∞",
        "age_21": "21 –≥–æ–¥",
        "cum": "–í—Å—è –≤ —Å–ø–µ—Ä–º–µ",
        "belly_bloat": "–í–∑–¥—É—Ç–∏–µ –∂–∏–≤–æ—Ç–∞ (–ø–æ—Ö–æ–∂–µ –Ω–∞ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å)",
        "succubus_tattoo": "–¢–∞—Ç—É–∏—Ä–æ–≤–∫–∞ —Å—É–∫–∫—É–±–∞"
    },
    "ethnos": {
        "futanari": "–§—É—Ç–∞–Ω–∞—Ä–∏",
        "femboy": "–§–µ–º–±–æ–π",
        "ethnicity_asian": "–ê–∑–∏–∞—Ç–∫–∞",
        "ethnicity_european": "–ï–≤—Ä–æ–ø–µ–π–∫–∞"
    },
    "furry": {
        "furry_cow": "–§—É—Ä–∏ –∫–æ—Ä–æ–≤–∞",
        "furry_cat": "–§—É—Ä–∏ –∫–æ—à–∫–∞",
        "furry_dog": "–§—É—Ä–∏ —Å–æ–±–∞–∫–∞",
        "furry_dragon": "–§—É—Ä–∏ –¥—Ä–∞–∫–æ–Ω",
        "furry_sylveon": "–§—É—Ä–∏ —Å–∏–ª—å–≤–µ–æ–Ω",
        "furry_fox": "–§—É—Ä–∏ –ª–∏—Å–∏—Ü–∞",
        "furry_bunny": "–§—É—Ä–∏ –∫—Ä–æ–ª–∏–∫",
        "furry_wolf": "–§—É—Ä–∏ –≤–æ–ª—á–∏—Ü–∞",
        "furry_bear": "–§—É—Ä–∏ –º–µ–¥–≤–µ–¥—å", # NEW
        "furry_bird": "–§—É—Ä–∏ –ø—Ç–∏—Ü–∞", # NEW
        "furry_mouse": "–§—É—Ä–∏ –º—ã—à—å", # NEW
        "furry_deer": "–§—É—Ä–∏ –æ–ª–µ–Ω—å", # NEW
        "furry_tiger": "–§—É—Ä–∏ —Ç–∏–≥—Ä", # NEW
        "furry_lion": "–§—É—Ä–∏ –ª–µ–≤", # NEW
        "furry_snake": "–§—É—Ä–∏ –∑–º–µ—è", # NEW
        "furry_lizard": "–§—É—Ä–∏ —è—â–µ—Ä–∏—Ü–∞" # NEW
    },
    "characters": {
        # –î–µ–º–æ–Ω—ã —Å—Ç–∞—Ä—à–µ–π —à–∫–æ–ª—ã
        "dxd_rias": "–†–∏–∞—Å –ì—Ä–µ–≥–æ—Ä–∏",
        "dxd_akeno": "–ê–∫–µ–Ω–æ –•–∏–º–µ–¥–∂–∏–º–∞",
        "dxd_xenovia_quarta": "–ö—Å–µ–Ω–æ–≤–∏—è –ö–≤–∞—Ä—Ç–∞",
        "dxd_serafall_leviathan": "–°–µ—Ä–∞—Ñ–∞–ª–ª –õ–µ–≤–∏–∞—Ñ–∞–Ω",
        "dxd_asia_argento": "–ê–∑–∏—è –ê—Ä–¥–∂–µ–Ω—Ç–æ",
        "dxd_koneko_toujou": "–ö–æ–Ω–µ–∫–æ –¢–æ–¥–∑—ë",
        "dxd_shidou_irina": "–®–∏–¥–æ –ò—Ä–∏–Ω–∞",
        "dxd_gasper_vladi": "–ì–∞—Å–ø–µ—Ä –í–ª–∞–¥–∏",
        "dxd_rossweisse": "–†–æ—Å—Å–≤–∞–π—Å—Å–µ",
        "dxd_yasaka": "–Ø—Å–∞–∫–∞",
        "dxd_grayfia_lucifuge": "–ì—Ä–µ–π—Ñ–∏—è –õ—é—Ü–∏—Ñ—É–≥",
        
        # Genshin Impact
        "genshin_eula": "–ï–æ–ª–∞",
        "genshin_mona": "–ú–æ–Ω–∞",
        "genshin_klee": "–ö–ª–∏",
        "genshin_raiden_shogun": "–†–∞–π–¥–µ–Ω",
        "genshin_paimon": "–ü–∞–π–º–æ–Ω",
        "genshin_amber": "–≠–º–±–µ—Ä",
        "genshin_barbara": "–ë–∞—Ä–±–∞—Ä–∞",
        "genshin_beidou": "–ë—ç–π –î–æ—É",
        "genshin_collei": "–ö–æ–ª–ª–µ–∏",
        "genshin_dehya": "–î—ç—Ö—å—è",
        "genshin_diluc_f": "–î–∏–ª—é–∫ (F)",
        "genshin_diona": "–î–∏–æ–Ω–∞",
        "genshin_fischl": "–§–∏—à–ª—å",
        "genshin_ganyu": "–ì–∞–Ω—å –Æ–π",
        "genshin_hutao": "–•—É –¢–∞–æ",
        "genshin_jean": "–î–∂–∏–Ω–Ω",
        "genshin_kazuha_f": "–ö–∞–¥–∑—É—Ö–∞ (F)",
        "genshin_keqing": "–ö—ç –¶–∏–Ω",
        "genshin_kuki_shinobu": "–ö—É–∫–∏ –°–∏–Ω–æ–±—É",
        "genshin_lisa": "–õ–∏–∑–∞",
        "genshin_nahida": "–ù–∞—Ö–∏–¥–∞",
        "genshin_ningguang": "–ù–∏–Ω –ì—É–∞–Ω",
        "genshin_noelle": "–ù–æ—ç–ª–ª—å",
        "genshin_rosaria": "–†–æ–∑–∞—Ä–∏—è",
        "genshin_sara": "–ö—É–¥–∑—ë –°–∞—Ä–∞",
        "genshin_sayu": "–°–∞—é",
        "genshin_shenhe": "–®—ç–Ω—å –•—ç",
        "genshin_sucrose": "–°–∞—Ö–∞—Ä–æ–∑–∞",
        "genshin_venti_f": "–í–µ–Ω—Ç–∏ (F)",
        "genshin_xiangling": "–°—è–Ω –õ–∏–Ω",
        "genshin_xinyan": "–°–∏–Ω—å –Ø–Ω—å",
        "genshin_yaemiko": "–Ø—ç –ú–∏–∫–æ",
        "genshin_yanfei": "–Ø–Ω—å –§—ç–π",
        "genshin_yoimiya": "–Å–∏–º–∏—è",
        "genshin_yelan": "–ï –õ–∞–Ω—å",
        "genshin_zhongli_f": "–ß–∂—É–Ω –õ–∏ (F)",
        "genshin_furina": "–§—É—Ä–∏–Ω–∞",
        "genshin_navia": "–ù–∞–≤–∏—è",
        "genshin_chevreuse": "–®–µ–≤—Ä—ë–∑",
        "genshin_clorinde": "–ö–ª–æ—Ä–∏–Ω–¥–∞",
        "genshin_ar_traveler_f": "–êether (F)", # Female Traveler (Aether)
        "genshin_lumine": "–õ—é–º–∏–Ω", # Lumine (Female Traveler)
        "genshin_signora": "–°–∏–Ω—å–æ—Ä–∞",
        "genshin_arlecchino": "–ê—Ä–ª–µ–∫–∏–Ω–æ",
        "genshin_snezhnaya_fatui_harbinger": "–ü—Ä–µ–¥–≤–µ—Å—Ç–Ω–∏–∫ –§–∞—Ç—É–∏", # Generic female Fatui Harbinger

        # Honkai Star Rail
        "hsr_kafka": "–ö–∞—Ñ–∫–∞",
        "hsr_fu_xuan": "–§—É –°—é–∞–Ω—å",
        "hsr_sparkle": "–ò—Å–∫–æ—Ä–∫–∞",
        "hsr_acheron": "–ì–µ–æ—Ü–∏–Ω–∞",
        "hsr_march_7th": "–ú–∞—Ä—Ç 7",
        "hsr_himeko": "–•–∏–º–µ–∫–æ",
        "hsr_bronya": "–ë—Ä–æ–Ω—è",
        "hsr_seele": "–ó–µ–ª–µ",
        "hsr_jingliu": "–¶–∑–∏–Ω–ª—é",
        "hsr_stelle": "–°—Ç–µ–ª–ª–∞ (F)", # Female Trailblazer
        "hsr_herta": "–ì–µ—Ä—Ç–∞",
        "hsr_silver_wolf": "–°–µ—Ä–µ–±—Ä—è–Ω—ã–π –í–æ–ª–∫",
        "hsr_tingyun": "–¢–∏–Ω—ä—é–Ω—å",
        "hsr_asta": "–ê—Å—Ç–∞",
        "hsr_clara": "–ö–ª–∞—Ä–∞",
        "hsr_peia": "–ü—ç–π—è",
        "hsr_sushang": "–°—É—à–∞–Ω",
        "hsr_natasha": "–ù–∞—Ç–∞—à–∞",
        "hsr_hook": "–•—É–∫",
        "hsr_pela": "–ü–µ–ª–∞",
        "hsr_qingque": "–¶–∏–Ω—Ü—é—ç",
        "hsr_yukong": "–Æ–π–∫—É–Ω",
        "hsr_guinaifen": "–ì—É–π–Ω–∞–π—Ñ—ç–Ω—å",
        "hsr_huohuo": "–•–æ—Ö–æ",
        "hsr_xueyi": "–°—é—ç–∏",
        "hsr_hanabi": "–•–∞–Ω–∞–º–∏", # Sparkle alternative name
        "hsr_robin": "–†–æ–±–∏–Ω",
        "hsr_aventurine_f": "–ê–≤–∞–Ω—Ç—é—Ä–∏–Ω (F)", # Female Aventurine

        # NieR Automata
        "nier_2b": "2B",

        # Spy x Family
        "spyxfamily_yor_forger": "–ô–æ—Ä –§–æ—Ä–¥–∂–µ—Ä",

        # Akame ga Kill
        "akamegakill_esdeath": "–ï—Å–¥–µ—Å",

        # Azur Lane
        "azurlane_formidable": "Formidable",

        # Fate Series
        "fate_castoria": "–ö–∞—Å—Ç–æ—Ä–∏—è",
        "fate_saber": "–°–µ–π–±–µ—Ä",
        "fate_astolfo": "–ê—Å—Ç–æ–ª—å—Ñ–æ",

        # Resident Evil
        "residentevil_lady_dimitrescu": "–õ–µ–¥–∏ –î–∏–º–∏—Ç—Ä–µ—Å–∫—É",

        # Street Fighter
        "streetfighter_chun_li": "–ß—É–Ω –õ–∏",
        "streetfighter_cammy": "–ö—ç–º–º–∏",
        "streetfighter_balrog_f": "–ë–∞–ª—Ä–æ–≥ (–∂–µ–Ω—Å–∫–∞—è –≤–µ—Ä—Å–∏—è)",
        "streetfighter_juri": "–î–∂—É—Ä–∏",
        "streetfighter_menat": "–ú–µ–Ω–∞—Ç",
        "streetfighter_laura": "–õ–∞—É—Ä–∞",
        "streetfighter_poison": "–ü–æ–π—Å–æ–Ω",
        "streetfighter_maki": "–ú–∞–∫–∏",
        "streetfighter_rose": "–†–æ—É–∑",
        "streetfighter_r_mika": "–†. –ú–∏–∫–∞",
        "streetfighter_ibuki": "–ò–±—É–∫–∏",
        "streetfighter_karin": "–ö–∞—Ä–∏–Ω",
        "streetfighter_ed": "–≠–¥",
        "streetfighter_fang": "–§–∞–ª—å–∫–æ–Ω",
        "streetfighter_e_honda_f": "–ò–≤–∏",

        # Atomic Heart
        "atomicheart_twins": "–ë–ª–∏–∑–Ω—è—à–∫–∏",

        # Bleach - –ù–û–í–´–ï –ü–ï–†–°–û–ù–ê–ñ–ò
        "bleach_renji_f": "–†–µ–Ω–¥–∂–∏ –ê–±–∞—Ä–∞–π (F)",
        "bleach_rukia_kuchiki": "–†—É–∫–∏—è –ö—É—á–∏–∫–∏",
        "bleach_orihime_inoue": "–û—Ä–∏—Ö–∏–º–µ –ò–Ω–æ—É—ç",
        "bleach_yoruichi_shihoin": "–ô–æ—Ä—É–∏—á–∏ –®–∏—Ö–æ–∏–Ω",
        "bleach_rangiku_matsumoto": "–†–∞–Ω–≥–∏–∫—É –ú–∞—Ü—É–º–æ—Ç–æ",
        "bleach_nemu_kurotsuchi": "–ù–µ–º—É –ö—É—Ä–æ—Ü—É—á–∏",
        "bleach_nelliel_tu_odelschwanck": "–ù–µ–ª–ª–∏—ç–ª—å –¢—É –û–¥–µ–ª—å—à–≤–∞–Ω–∫",
        "bleach_tier_harribel": "–¢–∏–∞ –•–∞—Ä—Ä–∏–±–µ–ª",
        "bleach_retsu_unohana": "–†–µ—Ç—Å—É –£–Ω–æ—Ö–∞–Ω–∞",
        "bleach_soi_fon": "–°–æ–π –§–æ–Ω",
        "bleach_hiyori_sarugaki": "–•–∏—ë—Ä–∏ –°–∞—Ä—É–≥–∞–∫–∏",
        "bleach_lisa_yadomaru": "–õ–∏–∑–∞ –Ø–¥–æ–º–∞—Ä—É",
        "bleach_mashiro_kuna": "–ú–∞—à–∏—Ä–æ –ö—É–Ω–∞",
        "bleach_nanao_ise": "–ù–∞–Ω–∞–æ –ò—Å–µ",
        "bleach_isane_kotetsu": "–ò—Å–∞–Ω–µ –ö–æ—Ç–µ—Ü—É",
        "bleach_momo_hinamori": "–ú–æ–º–æ –•–∏–Ω–∞–º–∏—Ä–∏",
        "bleach_candice_catnipp": "–ö—ç–Ω–¥–∏—Å –ö–∞—Ç–Ω–∏–ø–ø",
        "bleach_bambietta_basterbine": "–ë–∞–º–±–∏–µ—Ç—Ç–∞ –ë–∞—Å—Ç–µ—Ä–±–∞–π–Ω",
        "bleach_giselle_gewelle": "–ì–∏–∑–µ–ª—å –ñ–µ–≤–µ–ª–ª—å",
        "bleach_meninas_mcallon": "–ú–µ–Ω–∏–Ω–∞—Å –ú–∞–∫–ê–ª–ª–æ–Ω",
        "bleach_liltotto_lamperd": "–õ–∏–ª—Ç—Ç–æ—Ç–æ –õ–∞–º–ø–µ—Ä–¥",

        # Danmachi
        "danmachi_hestia": "–ì–µ—Å—Ç–∏—è",
        "danmachi_freya": "–§—Ä–µ—è",

        # –ü–æ–≤–µ—Å—Ç—å –æ –∫–æ–Ω—Ü–µ —Å–≤–µ—Ç–∞ (Record of Ragnarok)
        "ragnarok_aphrodite": "–ê—Ñ—Ä–æ–¥–∏—Ç–∞",

        # Naruto
        "naruto_hinata": "–•–∏–Ω–∞—Ç–∞",
        "naruto_tsunade": "–¶—É–Ω–∞–¥–µ",

        # Overlord
        "overlord_albedo": "–ê–ª—å–±–µ–¥–æ",
        "overlord_shalltear": "–®–∞–ª—Ç–∏—Ä",

        # –ë–µ–∑—É–º–Ω—ã–π –∞–∑–∞—Ä—Ç (Kakegurui)
        "kakegurui_yumeko": "–Æ–º–µ–∫–æ –î–∂–∞–±–∞–º–∏",
        "kakegurui_kirari": "–ö–∏—Ä–∞—Ä–∏ –ú–æ–º–æ–±–∞–º–∏",
        "kakegurui_mary": "–ú—ç—Ä–∏ –°–∞–æ—Ç–æ–º—ç",

        # –ú–∞–≥–∏—á–µ—Å–∫–∞—è –±–∏—Ç–≤–∞ (Jujutsu Kaisen)
        "jujutsukaisen_mei_mei": "–ú—ç–π –ú—ç–π",

        # –ì–µ—Ä–æ–π –©–∏—Ç–∞ (The Rising of the Shield Hero)
        "shieldhero_mirelia_melromarc": "–ú–∏—Ä–µ–ª–∏—è –ö. –ú–µ–ª—Ä–æ–º–∞—Ä–∫",
        "shieldhero_malty_melromarc": "–ú–∞–ª—Ç–∏ –°. –ú–µ–ª—Ä–æ–º–∞—Ä–∫",
        
        # Helltaker
        "helltaker_lucifer": "–õ—é—Ü–∏—Ñ–µ—Ä",

        # Zenless Zone Zero
        "zzz_ellen_joe": "–≠–ª–ª–µ–Ω –î–∂–æ",
        "zzz_koleda": "–ö–æ–ª–µ–¥–∞",
        "zzz_lycaon": "–õ–∏–∫–∞–æ–Ω (F)", # Female Lycaon
        "zzz_nicole": "–ù–∏–∫–æ–ª—å",
        "zzz_anby": "–≠–Ω–±–∏",
        "zzz_nekomiya": "–ù—ç–∫–æ–º–∏—è",
        "zzz_aisha": "–ê–π—à–∞",
        "zzz_haruka": "–•–∞—Ä—É–∫–∞",
        "zzz_corin": "–ö–æ—Ä–∏–Ω",
        "zzz_grace": "–ì—Ä–µ–π—Å",
        "zzz_hoshimi": "–•–æ—Å–∏–º–∏",
        "zzz_rory": "–†–æ—Ä–∏",
        "zzz_bonnie": "–ë–æ–Ω–Ω–∏",
        "zzz_elize": "–≠–ª–∏–∑–∞",
        "zzz_fubuki": "–§—É–±—É–∫–∏",
        "zzz_sana": "–°–∞–Ω–∞",
        "zzz_yuki": "–Æ–∫–∏",
        
        # League of Legends
        "lol_qiyana": "–ö–∏–∞–Ω–∞",
        "lol_aurora": "–ê–≤—Ä–æ—Ä–∞",
        "lol_katarina": "–ö–∞—Ç–∞—Ä–∏–Ω–∞",
        "lol_akali": "–ê–∫–∞–ª–∏",
        "lol_irelia": "–ò—Ä–µ–ª–∏—è",
        "lol_caitlyn": "–ö–µ–π—Ç–ª–∏–Ω",
        "lol_briar": "–ë—Ä–∞–π–µ—Ä",
        "lol_kaisa": "–ö–∞–π'–°–∞",
        "lol_evelynn": "–≠–≤–µ–ª–∏–Ω–Ω",
        "lol_ahri": "–ê—Ä–∏",
        "lol_belveth": "–ë–µ–ª'–í–µ—Ç",
        "lol_fiora": "–§–∏–æ—Ä–∞",
        "lol_gwen": "–ì–≤–µ–Ω",
        "lol_zoe": "–ó–æ–∏",
        "lol_missfortune": "–ú–∏—Å—Å –§–æ—Ä—Ç—É–Ω–∞",
        "lol_neeko": "–ù–∏–∫–æ",
        "lol_samira": "–°–∞–º–∏—Ä–∞",
        "lol_sona": "–°–æ–Ω–∞",
        "lol_elise": "–≠–ª–∏–∑–∞",

        # My Little Pony
        "mlp_twilight_sparkle": "–°—É–º–µ—Ä–µ—á–Ω–∞—è –ò—Å–∫–æ—Ä–∫–∞",
        "mlp_applejack": "–≠–ø–ø–ª–¥–∂–µ–∫",
        "mlp_rainbow_dash": "–†–∞–¥—É–≥–∞ –î—ç—à",
        "mlp_rarity": "–†–∞—Ä–∏—Ç–∏",
        "mlp_fluttershy": "–§–ª–∞—Ç—Ç–µ—Ä—à–∞–π",
        "mlp_pinkie_pie": "–ü–∏–Ω–∫–∏ –ü–∞–π",
        "mlp_spike": "–°–ø–∞–π–∫",
        "mlp_princess_celestia": "–ü—Ä–∏–Ω—Ü–µ—Å—Å–∞ –°–µ–ª–µ—Å—Ç–∏—è",
        "mlp_princess_luna": "–ü—Ä–∏–Ω—Ü–µ—Å—Å–∞ –õ—É–Ω–∞",
        "mlp_princess_cadence": "–ü—Ä–∏–Ω—Ü–µ—Å—Å–∞ –ö–∞–¥–µ–Ω—Å",
        "mlp_discord": "–î–∏—Å–∫–æ—Ä–¥",
        "mlp_apple_bloom": "–≠–ø–ø–ª –ë–ª—É–º",
        "mlp_scootaloo": "–°–∫—É—Ç–∞–ª—É",
        "mlp_sweetie_belle": "–ö—Ä–æ—à–∫–∞ –ë–µ–ª—å",

        # Dislyte
        "dislyte_li_ling_f": "–õ–∏ –õ–∏–Ω (F)", # Female Li Ling
        "dislyte_sally": "–°–∞–ª–ª–∏",
        "dislyte_clara": "–ö–ª–∞—Ä–∞",
        "dislyte_gabrielle": "–ì–∞–±—Ä–∏—ç–ª—å",
        "dislyte_chloe": "–•–ª–æ—è",
        "dislyte_odette": "–û–¥–µ—Ç—Ç–∞",
        "dislyte_meredith": "–ú–µ—Ä–µ–¥–∏—Ç",
        "dislyte_jiang_man": "–¶–∑—è–Ω –ú–∞–Ω—å",
        "dislyte_eira": "–≠–π—Ä–∞",
        "dislyte_drew": "–î—Ä—é",
        "dislyte_pritzker_f": "–ü—Ä–∏—Ç—Ü–∫–µ—Ä (F)", # Female Pritzker
        "dislyte_fatima": "–§–∞—Ç–∏–º–∞",
        "dislyte_brewster_f": "–ë—Ä—é—Å—Ç–µ—Ä (F)", # Female Brewster
        "dislyte_yun_chuan_f": "–Æ–Ω—å –ß—É–∞–Ω—å (F)", # Female Yun Chuan
        "dislyte_hyde_f": "–•–∞–π–¥ (F)", # Female Hyde
        "dislyte_leora": "–õ–µ–æ—Ä–∞",
        "dislyte_tevor_f": "–¢–µ–≤–æ—Ä (F)", # Female Tevor
        "dislyte_zora": "–ó–æ—Ä–∞",
        "dislyte_embla": "–≠–º–±–ª–∞",
        "dislyte_ophilia": "–û—Ñ–µ–ª–∏—è",
        "dislyte_ahmed_f": "–ê—Ö–º–µ–¥ (F)", # Female Ahmed
        "dislyte_everett_f": "–≠–≤–µ—Ä–µ—Ç—Ç (F)", # Female Everett
        "dislyte_ollie_f": "–û–ª–ª–∏ (F)", # Female Ollie
        "dislyte_jin_hee": "–î–∂–∏–Ω –•–∏",
        "dislyte_ifrit_f": "–ò—Ñ—Ä–∏—Ç (F)", # Female Ifrit
        "dislyte_sienna": "–°–∏–µ–Ω–Ω–∞",
        "dislyte_valeria": "–í–∞–ª–µ—Ä–∏—è",
        "dislyte_ashley": "–≠—à–ª–∏",
        "dislyte_triki_f": "–¢—Ä–∏–∫–∏ (F)", # Female Triki
        "dislyte_narmer_f": "–ù–∞—Ä–º–µ—Ä (F)", # Female Narmer
        "dislyte_tye": "–¢–∞–π",
        "dislyte_biondina": "–ë–∏–æ–Ω–¥–∏–Ω–∞",
        "dislyte_dhalia": "–î–∞–ª–∏—è",
        "dislyte_elaine": "–≠–ª–µ–π–Ω",
        "dislyte_cecilia": "–°–µ—Å–∏–ª–∏—è",
        "dislyte_intisar": "–ò–Ω—Ç–∏—Å–∞—Ä",
        "dislyte_kaylee": "–ö–µ–π–ª–∏",
        "dislyte_layla": "–õ–µ–π–ª–∞",
        "dislyte_lynn": "–õ–∏–Ω–Ω",
        "dislyte_melanie": "–ú–µ–ª–∞–Ω–∏",
        "dislyte_mona": "–ú–æ–Ω–∞",
        "dislyte_nicole": "–ù–∏–∫–æ–ª—å",
        "dislyte_q": "–ö—å—é",
        "dislyte_ren_si": "–ñ—ç–Ω—å –°–∏",
        "dislyte_stewart_f": "–°—Ç—é–∞—Ä—Ç (F)", # Female Stewart
        "dislyte_tang_xuan_f": "–¢–∞–Ω –°—é–∞–Ω—å (F)", # Female Tang Xuan
        "dislyte_unaky": "–£–Ω–∞–∫–∏",
        "dislyte_victoria": "–í–∏–∫—Ç–æ—Ä–∏—è",
        "dislyte_xiao_yin": "–°—è–æ –ò–Ω—å",
        "dislyte_ye_suhua": "–ï –°—É—Ö—É–∞",
        "dislyte_zhong_nan": "–ß–∂—É–Ω –ù–∞–Ω—å",
        "dislyte_anadora": "–ê–Ω–∞–¥–æ—Ä–∞",
        "dislyte_bernice": "–ë–µ—Ä–Ω–∏—Å",
        "dislyte_brynn": "–ë—Ä–∏–Ω–Ω",
        "dislyte_catherine": "–ö–∞—Ç–µ—Ä–∏–Ω–∞",
        "dislyte_chang_pu": "–ß–∞–Ω –ü—É",
        "dislyte_eugene_f": "–Æ–¥–∂–∏–Ω (F)",
        "dislyte_freddy_f": "–§—Ä–µ–¥–¥–∏ (F)",
        "dislyte_hall_f": "–•–æ–ª–ª (F)",
        "dislyte_helena": "–•–µ–ª–µ–Ω–∞",
        "dislyte_jacob_f": "–î–∂–µ–π–∫–æ–± (F)",
        "dislyte_jeanne": "–ñ–∞–Ω–Ω–∞",
        "dislyte_li_ao_f": "–õ–∏ –ê–æ (F)",
        "dislyte_lu_yi_f": "–õ—É –ò (F)",
        "dislyte_mark_f": "–ú–∞—Ä–∫ (F)",
        "dislyte_olivia": "–û–ª–∏–≤–∏—è",
        "dislyte_sander_f": "–°–∞–Ω–¥–µ—Ä (F)",
        "dislyte_stella": "–°—Ç–µ–ª–ª–∞",
        "dislyte_alice": "–ê–ª–∏—Å–∞",
        "dislyte_arcana": "–ê—Ä–∫–∞–Ω–∞",
        "dislyte_aurelius_f": "–ê—É—Ä–µ–ª–∏—É—Å (F)",
        "dislyte_bette": "–ë–µ—Ç—Ç–µ",
        "dislyte_bonnie": "–ë–æ–Ω–Ω–∏",
        "dislyte_celine": "–°–µ–ª–∏–Ω",
        "dislyte_corbin_f": "–ö–æ—Ä–±–∏–Ω (F)",
    },
    "pokemon": { # –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∏–∑ characters
        "reshiram": "–†–µ—à–∏—Ä–∞–º",
        "mew": "–ú—é",
        "mewtwo": "–ú—é—Ç—É",
        "gardevoir": "–ì–∞—Ä–¥–µ–≤—É–∞—Ä",
        "umbreon": "–≠–º–±—Ä–µ–æ–Ω",
        "lugia": "–õ—É–≥–∏—è",
        "shadow_lugia": "–®–∞–¥–æ—É –õ—É–≥–∏—è",
        "lopunny": "–õ–æ–ø–∞–Ω–Ω–∏",
        "goodra": "–ì—É–¥—Ä–∞",
        "pokemon_jessie": "–î–∂–µ—Å—Å–∏", # Moved from characters
        "pokemon_lusamine": "–õ—É—Å–∞–º–∏–Ω–µ", # Moved from characters
    }
}

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π (–¥–ª—è –≤–∫–ª–∞–¥–æ–∫)
CHARACTER_CATEGORIES = {
    "dxd": "üì∫ –î–µ–º–æ–Ω—ã —Å—Ç–∞—Ä—à–µ–π —à–∫–æ–ª—ã",
    "genshin": "üéÆ Genshin Impact",
    "hsr": "üéÆ Honkai Star Rail",
    "nier": "üéÆ NieR Automata",
    "spyxfamily": "üì∫ Spy x Family",
    "akamegakill": "üì∫ Akame ga Kill",
    "azurlane": "üéÆ Azur Lane",
    "fate": "üì∫ Fate Series",
    "residentevil": "üéÆ Resident Evil",
    "streetfighter": "üéÆ Street Fighter",
    "atomicheart": "üéÆ Atomic Heart",
    "bleach": "üì∫ Bleach",
    "danmachi": "üì∫ Danmachi",
    "ragnarok": "üì∫ –ü–æ–≤–µ—Å—Ç—å –æ –∫–æ–Ω—Ü–µ —Å–≤–µ—Ç–∞",
    "naruto": "üì∫ Naruto",
    "overlord": "üì∫ Overlord",
    "kakegurui": "üì∫ –ë–µ–∑—É–º–Ω—ã–π –∞–∑–∞—Ä—Ç",
    "jujutsukaisen": "üì∫ –ú–∞–≥–∏—á–µ—Å–∫–∞—è –±–∏—Ç–≤–∞",
    "shieldhero": "üì∫ –ì–µ—Ä–æ–π –©–∏—Ç–∞",
    "helltaker": "üéÆ Helltaker",
    "zzz": "üéÆ Zenless Zone Zero",
    "lol": "üéÆ League of Legends",
    "mlp": "üì∫ My Little Pony",
    "dislyte": "üéÆ Dislyte"
}

# --- –ü—Ä–æ–º–ø—Ç—ã –¥–ª—è –º–æ–¥–µ–ª–∏ ---
CHARACTER_EXTRA = {
    "dxd_rias": "rias gremory, red long hair, blue eyes, pale skin, large breasts, highschool dxd",
    "dxd_akeno": "akeno himejima, long black hair, purple eyes, large breasts, highschool dxd",
    "dxd_xenovia_quarta": "xenovia quarta, highschool dxd, blue hair, short hair, sword, holy sword, devil wings, nun uniform",
    "dxd_serafall_leviathan": "serafall leviathan, highschool dxd, magical girl outfit, pink hair, magical wand, devil, large breasts",
    "dxd_asia_argento": "asia argento, highschool dxd, blonde hair, long hair, nun, innocent, healing magic, dragon slayer, devil wings",
    "dxd_koneko_toujou": "koneko toujou, highschool dxd, white hair, cat ears, cat tail, small breasts, stoic expression",
    "dxd_shidou_irina": "shidou irina, highschool dxd, blonde hair, twin tails, energetic, holy sword, angel wings, exorcist",
    "dxd_gasper_vladi": "gasper vladi, highschool dxd, male, trap, feminine clothing, long blonde hair, shy, vampire, crossdresser",
    "dxd_rossweisse": "rossweisse, highschool dxd, valkyrie, long silver hair, glasses, mature, large breasts",
    "dxd_yasaka": "yasaka, highschool dxd, kitsune, nine tails, fox ears, kimono, mature woman",
    "dxd_grayfia_lucifuge": "grayfia lucifuge, highschool dxd, maid outfit, long silver hair, red eyes, ice magic, sexy maid",
    
    # Genshin Impact
    "genshin_eula": "eula, light blue hair, fair skin, genshin impact",
    "genshin_mona": "mona, genshin impact, black hair, leotard, golden headdress",
    "genshin_klee": "klee, genshin impact, blonde hair, red dress, explosive",
    "genshin_raiden_shogun": "raiden shogun, genshin impact, purple hair, kimono, electro archon",
    "genshin_paimon": "paimon, genshin impact, floating companion, small body, white hair, crown, emergency food",
    "genshin_amber": "amber, genshin impact, knight of favonius, long brown hair, red bow, goggles",
    "genshin_barbara": "barbara, genshin impact, idol, blue dress, blonde hair, deaconess",
    "genshin_beidou": "beidou, genshin impact, black hair, red outfit, eyepatch, captain",
    "genshin_collei": "collei, genshin impact, green hair, dendro, forest ranger, bandages",
    "genshin_dehya": "dehya, genshin impact, tanned skin, red hair, muscular, mercenary",
    "genshin_diluc_f": "diluc, female, genshin impact, red hair, elegant dress, pyro",
    "genshin_diona": "diona, genshin impact, cat girl, pink hair, bartender, cryo",
    "genshin_fischl": "fischl, genshin impact, prinzessin der verurteilung, gothic dress, blonde hair, oz",
    "genshin_ganyu": "ganyu, genshin impact, qilin, blue hair, horns, long dress, cryo",
    "genshin_hutao": "hutao, genshin impact, funeral parlor director, brown hair, twin tails, ghost, pyro",
    "genshin_jean": "jean gunnhildr, genshin impact, acting grand master, blonde hair, knight uniform",
    "genshin_kazuha_f": "kaedehara kazuha, female, genshin impact, anemo, red leaves, kimono, white hair",
    "genshin_keqing": "keqing, genshin impact, purple hair, cat ears, electro, yuheng",
    "genshin_kuki_shinobu": "kuki shinobu, genshin impact, ninja, green hair, mask, electro",
    "genshin_lisa": "lisa minci, genshin impact, librarian, purple dress, electro, witch",
    "genshin_nahida": "nahida, genshin impact, dendro archon, white hair, green dress, loli",
    "genshin_ningguang": "ningguang, genshin impact, rich, elegant dress, long white hair, geo, jade chamber",
    "genshin_noelle": "noelle, genshin impact, maid, knight, blonde hair, heavy armor",
    "genshin_rosaria": "rosaria, genshin impact, nun, dark outfit, red hair, cryo, cynical",
    "genshin_sara": "kujou sara, genshin impact, tengu, black wings, kimono, electro, general",
    "genshin_sayu": "sayu, genshin impact, ninja, tanuki, anemo, sleepy",
    "genshin_shenhe": "shenhe, genshin impact, white hair, long dress, cryo, exorcist",
    "genshin_sucrose": "sucrose, genshin impact, alchemist, green hair, glasses, anemo",
    "genshin_venti_f": "venti, female, genshin impact, anemo archon, bard, green outfit",
    "genshin_xiangling": "xiangling, genshin impact, chef, brown hair, panda, pyro",
    "genshin_xinyan": "xinyan, genshin impact, rockstar, dark skin, red hair, pyro, lute",
    "genshin_yaemiko": "yae miko, genshin impact, fox ears, pink hair, miko, electro",
    "genshin_yanfei": "yanfei, genshin impact, legal advisor, white hair, deer horns, pyro",
    "genshin_yoimiya": "yoimiya, genshin impact, fireworks, blonde hair, kimono, pyro",
    "genshin_yelan": "yelan, genshin impact, blue hair, black bodysuit, hydro, secret agent",
    "genshin_zhongli_f": "zhongli, female, genshin impact, geo archon, elegant, brown hair, long coat",
    "genshin_furina": "furina, genshin impact, hydro archon, twin tails, white hair, elegant dress, dramatic",
    "genshin_navia": "navia, genshin impact, blonde hair, yellow dress, umbrella, elegant",
    "genshin_chevreuse": "chevreuse, genshin impact, red hair, military uniform, eyepatch, musket",
    "genshin_clorinde": "clorinde, genshin impact, purple hair, fencer, elegant hat, duelist",
    "genshin_ar_traveler_f": "aether, female, genshin impact, blonde hair, traveler outfit, sword",
    "genshin_lumine": "lumine, genshin impact, blonde hair, traveler outfit, sword",
    "genshin_signora": "signora, genshin impact, fatui harbinger, elegant mask, white hair, cryo",
    "genshin_arlecchino": "arlecchino, genshin impact, fatui harbinger, black outfit, twin tails, pyro",
    "genshin_snezhnaya_fatui_harbinger": "snezhnaya fatui harbinger, female, genshin impact, mask, uniform",


    # Honkai Star Rail
    "hsr_kafka": "kafka, purple wavy hair, cold expression, honkai star rail",
    "hsr_fu_xuan": "fu xuan, pink hair, honkai star rail, diviner, short hair, glasses",
    "hsr_sparkle": "sparkle, honkai star rail, pink hair, elegant dress, theatrical",
    "hsr_acheron": "acheron, honkai star rail, purple hair, long coat, samurai",
    "hsr_march_7th": "march 7th, honkai star rail, pink hair, camera, ice powers, archer",
    "hsr_himeko": "himeko, honkai star rail, red hair, red coat, coffee, train conductor",
    "hsr_bronya": "bronya rand, honkai star rail, silver hair, elegant uniform, queen, spear",
    "hsr_seele": "seele, honkai star rail, blue hair, scythe, butterfly, quantum",
    "hsr_jingliu": "jingliu, honkai star rail, white hair, blindfold, sword, ice",
    "hsr_stelle": "stelle, honkai star rail, female trailblazer, brown hair, baseball bat",
    "hsr_herta": "herta, honkai star rail, doll, purple hair, genius, space station",
    "hsr_silver_wolf": "silver wolf, honkai star rail, hacker, blue hair, short hair, cyber punk",
    "hsr_tingyun": "tingyun, honkai star rail, fox ears, kimono, fan, lightning",
    "hsr_asta": "asta, honkai star rail, red hair, space station, rich girl",
    "hsr_clara": "clara, honkai star rail, child, robot, pink hair, shy",
    "hsr_peia": "peia, honkai star rail, foxian, healer, long hair", # Placeholder, adjust if specific design available
    "hsr_sushang": "sushang, honkai star rail, sword, knight, chicken, red hair",
    "hsr_natasha": "natasha, honkai star rail, doctor, blonde hair, medical coat",
    "hsr_hook": "hook, honkai star rail, child, red hair, big hat, destruction",
    "hsr_pela": "pela, honkai star rail, glasses, detective, blue hair, short hair",
    "hsr_qingque": "qingque, honkai star rail, mahjong, green hair, lazy",
    "hsr_yukong": "yukong, honkai star rail, foxian, pilot, mature, elegant",
    "hsr_guinaifen": "guinaifen, honkai star rail, streamer, fire performer, pink hair",
    "hsr_huohuo": "huohuo, honkai star rail, green hair, fox girl, exorcist, ghost",
    "hsr_xueyi": "xueyi, honkai star rail, puppet, pink hair, executioner, mask",
    "hsr_hanabi": "hanabi, honkai star rail, pink hair, elegant dress, theatrical", # Sparkle
    "hsr_robin": "robin, honkai star rail, idol, blonde hair, singer, elegant dress",
    "hsr_aventurine_f": "aventurine, female, honkai star rail, blonde hair, gambler, suit", # Female Aventurine

    # NieR Automata
    "nier_2b": "2b, nier automata, white hair, black dress",

    # Spy x Family
    "spyxfamily_yor_forger": "yor forger, spy x family, black hair, red dress",

    # Akame ga Kill
    "akamegakill_esdeath": "esdeath, akame ga kill, blue hair, military uniform, high heels",

    # Azur Lane
    "azurlane_formidable": "formidable, azur lane, long white hair, dress",

    # Fate Series
    "fate_castoria": "castoria, fate grand order, white hair, dress, long sleeves",
    "fate_saber": "saber, artoria pendragon, fate series, blonde hair, blue dress",
    "fate_astolfo": "astolfo, fate series, pink hair, femboy, androgynous",

    # Resident Evil
    "residentevil_lady_dimitrescu": "lady dimitrescu, resident evil, tall female, white dress, elegant hat, sharp claws, mature female",

    # Street Fighter
    "streetfighter_chun_li": "chun li, street fighter, muscular thighs, qipao, hair buns",
    "streetfighter_cammy": "cammy white, street fighter, blonde hair, green leotard, muscular, braid",
    "streetfighter_balrog_f": "balrog, female, street fighter, boxer, muscular female, braids",
    "streetfighter_juri": "juri han, street fighter, purple hair, taekwondo, spider lily, evil smile",
    "streetfighter_menat": "menat, street fighter, fortune teller, blue hair, sphere, egyptian",
    "streetfighter_laura": "laura matsuda, street fighter, brazilian, green clothes, long hair, electric powers",
    "streetfighter_poison": "poison, street fighter, trans, pink hair, short shorts, crop top",
    "streetfighter_maki": "maki genryusai, street fighter, kunoichi, short hair, ninja outfit",
    "streetfighter_rose": "rose, street fighter, fortune teller, red scarf, mystical powers",
    "streetfighter_r_mika": "rainbow mika, street fighter, wrestler, blue wrestling suit, blonde hair, muscular",
    "streetfighter_ibuki": "ibuki, street fighter, ninja, school uniform, kunai",
    "streetfighter_karin": "karin kanzuki, street fighter, rich girl, blonde hair, school uniform, ojou-sama",
    "streetfighter_ed": "ed, street fighter, female, boxer, psychic powers, blonde hair", # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –∂–µ–Ω—Å–∫—É—é –≤–µ—Ä—Å–∏—é
    "streetfighter_fang": "f.a.n.g, female, street fighter, poison, long clothes", # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –∂–µ–Ω—Å–∫—É—é –≤–µ—Ä—Å–∏—é
    "streetfighter_e_honda_f": "e. honda, female, street fighter, sumo wrestler, large body", # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –∂–µ–Ω—Å–∫—É—é –≤–µ—Ä—Å–∏—é, –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è

    # Atomic Heart
    "atomicheart_twins": "robot, twin sisters, black bodysuit, black hair, white hair, atomic heart",

    # Bleach - –ù–û–í–´–ï –ü–ï–†–°–û–ù–ê–ñ–ò –ò –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ü–†–û–ú–ü–¢ –î–õ–Ø YORUICHI
    "bleach_renji_f": "renji abarai, female, bleach, red hair, tattoos, shinigami, zanpakuto",
    "bleach_rukia_kuchiki": "rukia kuchiki, bleach, short black hair, shinigami, zanpakuto, noble family",
    "bleach_orihime_inoue": "orihime inoue, bleach, long orange hair, hairpin, school uniform, healer",
    "bleach_yoruichi_shihoin": "yoruichi shihoin, bleach, dark skin, purple short hair, cat form, thunder god, shinigami",
    "bleach_rangiku_matsumoto": "rangiku matsumoto, bleach, blonde wavy hair, large breasts, shinigami, haori, vice-captain",
    "bleach_nemu_kurotsuchi": "nemu kurotsuchi, bleach, short black hair, maid outfit, emotionless, artificial soul, lieutenant",
    "bleach_nelliel_tu_odelschwanck": "nelliel tu odelschwanck, bleach, arrancar, green hair, mask fragment, revealing outfit, childlike form, adult form, espada",
    "bleach_tier_harribel": "tier harribel, bleach, arrancar, shark-like mask, tanned skin, revealing coat, espada",
    "bleach_retsu_unohana": "retsu unohana, bleach, black braided hair, calm expression, shinigami captain, kimono, healing powers, fierce past",
    "bleach_soi_fon": "soi fon, bleach, short black hair, shinigami captain, uniform, assassin, strict, high speed",
    "bleach_hiyori_sarugaki": "hiyori sarugaki, bleach, blonde pigtails, visored, school uniform, aggressive, short temper",
    "bleach_lisa_yadomaru": "lisa yadomaru, bleach, long black hair, glasses, school uniform, shinigami, visored, lewd librarian",
    "bleach_mashiro_kuna": "mashiro kuna, bleach, green hair, energetic, visored, goggles, eccentric",
    "bleach_nanao_ise": "nanao ise, bleach, short black hair, glasses, shinigami vice-captain, serious, intellectual",
    "bleach_isane_kotetsu": "isane kotetsu, bleach, long silver hair, shinigami vice-captain, gentle, healer",
    "bleach_momo_hinamori": "momo hinamori, bleach, brown hair, shinigami, loyal, innocent, prone to distress",
    "bleach_candice_catnipp": "candice catnipp, bleach, quincy, blonde spiky hair, lightning powers, sternritter, aggressive",
    "bleach_bambietta_basterbine": "bambietta basterbine, bleach, quincy, short black hair, explosive powers, sternritter, volatile",
    "bleach_giselle_gewelle": "giselle gewelle, bleach, quincy, blonde hair, zombie powers, sternritter, crossdresser, creepy",
    "bleach_meninas_mcallon": "meninas mcallon, bleach, quincy, pink hair, muscular, sternritter, strong",
    "bleach_liltotto_lamperd": "liltotto lamperd, bleach, quincy, blonde pigtails, childlike, sternritter, cannibalistic",


    # Danmachi
    "danmachi_hestia": "hestia, danmachi, black hair, blue ribbons, white dress",
    "danmachi_freya": "freya, danmachi, long silver hair, purple eyes, elegant dress",

    # –ü–æ–≤–µ—Å—Ç—å –æ –∫–æ–Ω—Ü–µ —Å–≤–µ—Ç–∞ (Record of Ragnarok)
    "ragnarok_aphrodite": "aphrodite, record of ragnarok, large breasts, blonde hair, revealing outfit",

    # Naruto
    "naruto_hinata": "hinata hyuga, naruto, long dark blue hair, byakugan, shy, large breasts",
    "naruto_tsunade": "tsunade, naruto, blonde hair, large breasts, strong, medical ninja",

    # Overlord
    "overlord_albedo": "albedo, overlord, succubus, black wings, white dress, long black hair",
    "overlord_shalltear": "shalltear bloodfallen, overlord, vampire, short blonde hair, frilly dress, parasol",

    # –ë–µ–∑—É–º–Ω—ã–π –∞–∑–∞—Ä—Ç (Kakegurui)
    "kakegurui_yumeko": "yumeko jabami, kakegurui, long black hair, red eyes, school uniform, insane smile",
    "kakegurui_kirari": "kirari momobami, kakegurui, white hair, blue lips, school uniform, student council president",
    "kakegurui_mary": "mary saotome, kakegurui, blonde hair, school uniform, twin tails",

    # –ú–∞–≥–∏—á–µ—Å–∫–∞—è –±–∏—Ç–≤–∞ (Jujutsu Kaisen)
    "jujutsukaisen_mei_mei": "mei mei, jujutsu kaisen, long black hair, axe, confident expression",

    # –ì–µ—Ä–æ–π –©–∏—Ç–∞ (The Rising of the Shield Hero)
    "shieldhero_mirelia_melromarc": "mirelia q melromarc, the rising of the shield hero, queen, blonde hair, elegant dress",
    "shieldhero_malty_melromarc": "malty s melromarc, the rising of the shield hero, bitch, cruel smile, red hair, blonde hair, princess, villainess",
    
    # Helltaker
    "helltaker_lucifer": "lucifer, helltaker, long black hair, business suit",

    # Zenless Zone Zero
    "zzz_ellen_joe": "ellen joe, zenless zone zero, long blonde hair, school uniform, glasses, student",
    "zzz_koleda": "koleda, zenless zone zero, bear ears, blonde hair, maid uniform",
    "zzz_lycaon": "lycaon, female, zenless zone zero, wolf girl, black hair, combat outfit",
    "zzz_nicole": "nicole demara, zenless zone zero, short blue hair, business suit, glasses",
    "zzz_anby": "anby demara, zenless zone zero, white hair, casual clothes, electric powers",
    "zzz_nekomiya": "nekomiya mana, zenless zone zero, cat girl, ninja, black hair, agile",
    "zzz_aisha": "aisha, zenless zone zero, bunny girl, white hair, cute dress",
    "zzz_haruka": "haruka, zenless zone zero, pink hair, schoolgirl, cheerful",
    "zzz_corin": "corin, zenless zone zero, detective, blonde hair, trench coat",
    "zzz_grace": "grace, zenless zone zero, elegant dress, mature, long hair",
    "zzz_hoshimi": "hoshimi, zenless zone zero, idol, pink hair, stage outfit",
    "zzz_rory": "rory, zenless zone zero, mechanic, short hair, overalls",
    "zzz_bonnie": "bonnie, zenless zone zero, cowgirl, hat, red hair",
    "zzz_elize": "elize, zenless zone zero, maid, long blonde hair",
    "zzz_fubuki": "fubuki, zenless zone zero, samurai, white hair, kimono",
    "zzz_sana": "sana, zenless zone zero, cyborg, blue hair, futuristic outfit",
    "zzz_yuki": "yuki, zenless zone zero, school uniform, black hair, shy",
        
    # Pok√©mon (–ø–µ—Ä—Å–æ–Ω–∞–∂–∏-–ª—é–¥–∏) - Moved to "pokemon" category
    "pokemon_jessie": "jessie, pokemon, team rocket, red hair, long hair, ponytail",
    "pokemon_lusamine": "lusamine, pokemon, aether foundation, blonde hair, long hair, dress",

    # League of Legends
    "lol_qiyana": "qiyana, league of legends",
    "lol_aurora": "aurora, league of legends",
    "lol_katarina": "katarina, league of legends",
    "lol_akali": "akali, league of legends",
    "lol_irelia": "irelia, league of legends",
    "lol_caitlyn": "caitlyn, league of legends",
    "lol_briar": "briar, league of legends",
    "lol_kaisa": "kaisa, league of legends",
    "lol_evelynn": "evelynn, league of legends",
    "lol_ahri": "ahri, league of legends",
    "lol_belveth": "belveth, league of legends",
    "lol_fiora": "fiora, league of legends",
    "lol_gwen": "gwen, league of legends",
    "lol_zoe": "zoe, league of legends",
    "lol_missfortune": "miss fortune, league of legends",
    "lol_neeko": "neeko, league of legends",
    "lol_samira": "samira, league of legends",
    "lol_sona": "sona, league of legends",
    "lol_elise": "elise, league of legends",

    # My Little Pony
    "mlp_twilight_sparkle": "twilight sparkle, my little pony, alicorn, purple body, dark blue mane, magic aura",
    "mlp_applejack": "applejack, my little pony, earth pony, orange body, blonde mane, cowboy hat",
    "mlp_rainbow_dash": "rainbow dash, my little pony, pegasus, light blue body, rainbow mane, cloud, lightning bolt",
    "mlp_rarity": "rarity, my little pony, unicorn, white body, purple mane, diamonds, fashionista",
    "mlp_fluttershy": "fluttershy, my little pony, pegasus, yellow body, pink mane, butterflies, shy, animal lover",
    "mlp_pinkie_pie": "pinkie pie, my little pony, earth pony, pink body, pink curly mane, balloons, cheerful, party",
    "mlp_spike": "spike, my little pony, dragon, green scales, purple spikes, loyal, baby dragon",
    "mlp_princess_celestia": "princess celestia, my little pony, alicorn, white body, rainbow mane, sun, royalty",
    "mlp_princess_luna": "princess luna, my little pony, alicorn, dark blue body, flowing mane, moon, royalty",
    "mlp_princess_cadence": "princess cadence, my little pony, alicorn, pink body, purple and yellow mane, crystal heart, royalty",
    "mlp_discord": "discord, my little pony, draconequus, chaotic, mischievous, master of chaos",
    "mlp_apple_bloom": "apple bloom, my little pony, earth pony, yellow body, red mane, cutie mark crusader",
    "mlp_scootaloo": "scootaloo, my little pony, pegasus, orange body, purple mane, cutie mark crusader, scooter",
    "mlp_sweetie_belle": "sweetie belle, my little pony, unicorn, white body, pink and purple mane, cutie mark crusader",

    # Dislyte
    "dislyte_li_ling_f": "li ling, female, dislyte, red hair, dragon, elegant outfit",
    "dislyte_sally": "sally, dislyte, siren, blue hair, mermaid tail, elegant dress",
    "dislyte_clara": "clara, dislyte, valkyrie, blonde hair, armor, wings",
    "dislyte_gabrielle": "gabrielle, dislyte, archangel, white wings, blonde hair, elegant dress",
    "dislyte_chloe": "chloe, dislyte, griffin, blonde hair, short hair, casual outfit",
    "dislyte_odette": "odette, dislyte, swan, elegant dress, graceful, long hair",
    "dislyte_meredith": "meredith, dislyte, medusa, snake hair, green skin, revealing outfit",
    "dislyte_jiang_man": "jiang man, dislyte, black hair, traditional chinese dress, elegant",
    "dislyte_eira": "eira, dislyte, ice queen, white hair, blue dress, cold expression",
    "dislyte_drew": "drew, dislyte, dark hair, casual outfit, energetic",
    "dislyte_pritzker_f": "pritzker, female, dislyte, blonde hair, glasses, scientist",
    "dislyte_fatima": "fatima, dislyte, desert warrior, tanned skin, veil, sword",
    "dislyte_brewster_f": "brewster, female, dislyte, red hair, punk outfit, guitar",
    "dislyte_yun_chuan_f": "yun chuan, female, dislyte, traditional chinese outfit, long hair",
    "dislyte_hyde_f": "hyde, female, dislyte, dark hair, gothic outfit, mysterious",
    "dislyte_leora": "leora, dislyte, lioness, blonde hair, armored, fierce",
    "dislyte_tevor_f": "tevor, female, dislyte, blonde hair, casual outfit, energetic",
    "dislyte_zora": "zora, dislyte, desert wanderer, dark skin, tribal outfit",
    "dislyte_embla": "embla, dislyte, raven, black wings, dark outfit, mysterious",
    "dislyte_ophilia": "ophilia, dislyte, fairy, green hair, light dress, nature",
    "dislyte_ahmed_f": "ahmed, female, dislyte, desert prince, traditional outfit, elegant",
    "dislyte_everett_f": "everett, female, dislyte, casual outfit, confident",
    "dislyte_ollie_f": "ollie, female, dislyte, short hair, sporty outfit, cheerful",
    "dislyte_jin_hee": "jin hee, dislyte, korean traditional dress, elegant, long hair",
    "dislyte_ifrit_f": "ifrit, female, dislyte, fiery hair, demonic, powerful",
    "dislyte_sienna": "sienna, dislyte, nature spirit, green hair, leafy outfit",
    "dislyte_valeria": "valeria, dislyte, gladiator, armored, strong, short hair",
    "dislyte_ashley": "ashley, dislyte, pop star, pink hair, stage outfit, microphone",
    "dislyte_triki_f": "triki, female, dislyte, mischievous, clown outfit, colorful hair",
    "dislyte_narmer_f": "narmer, female, dislyte, egyptian pharaoh, golden armor, elegant",
    "dislyte_tye": "tye, dislyte, archer, green hair, forest outfit",
    "dislyte_biondina": "biondina, dislyte, water spirit, blue hair, flowing dress",
    "dislyte_dhalia": "dhalia, dislyte, flower girl, colorful dress, innocent",
    "dislyte_elaine": "elaine, dislyte, knight, armor, sword, determined",
    "dislyte_cecilia": "cecilia, dislyte, nun, white habit, serene expression",
    "dislyte_intisar": "intisar, dislyte, desert dancer, revealing outfit, veil",
    "dislyte_kaylee": "kaylee, dislyte, pop star, colorful hair, stage outfit",
    "dislyte_layla": "layla, dislyte, street fighter, casual outfit, tough",
    "dislyte_lynn": "lynn, dislyte, archer, green outfit, forest",
    "dislyte_melanie": "melanie, dislyte, gothic lolita, dark dress, elegant",
    "dislyte_mona": "mona, dislyte, pop star, pink hair, stage outfit",
    "dislyte_nicole": "nicole, dislyte, spy, black suit, mysterious",
    "dislyte_q": "q, dislyte, hacker, futuristic outfit, short hair",
    "dislyte_ren_si": "ren si, dislyte, traditional chinese outfit, elegant",
    "dislyte_stewart_f": "stewart, female, dislyte, punk, guitar, casual outfit",
    "dislyte_tang_xuan_f": "tang xuan, female, dislyte, monkey king, staff, energetic",
    "dislyte_unaky": "unaky, dislyte, tribal warrior, wild, animalistic",
    "dislyte_victoria": "victoria, dislyte, steampunk, goggles, mechanical parts",
    "dislyte_xiao_yin": "xiao yin, dislyte, traditional chinese dancer, elegant",
    "dislyte_ye_suhua": "ye suhua, dislyte, healer, gentle, flowing dress",
    "dislyte_zhong_nan": "zhong nan, dislyte, traditional chinese warrior, armored",
    "dislyte_anadora": "anadora, dislyte, siren, blue hair, elegant dress",
    "dislyte_bernice": "bernice, dislyte, street dancer, casual outfit, energetic",
    "dislyte_brynn": "brynn, dislyte, archer, forest outfit, focused",
    "dislyte_catherine": "catherine, dislyte, noble, elegant dress, blonde hair",
    "dislyte_chang_pu": "chang pu, dislyte, traditional chinese healer, gentle",
    "dislyte_eugene_f": "eugene, female, dislyte, short hair, sporty outfit",
    "dislyte_freddy_f": "freddy, female, dislyte, punk rock, guitar, wild hair",
    "dislyte_hall_f": "hall, female, dislyte, elegant, long dress, mysterious",
    "dislyte_helena": "helena, dislyte, archer, forest outfit, determined",
    "dislyte_jacob_f": "jacob, female, dislyte, casual outfit, short hair",
    "dislyte_jeanne": "jeanne, dislyte, knight, armor, sword, brave",
    "dislyte_li_ao_f": "li ao, female, dislyte, traditional chinese warrior, armored",
    "dislyte_lu_yi_f": "lu yi, female, dislyte, traditional chinese dancer, elegant",
    "dislyte_mark_f": "mark, female, dislyte, casual outfit, short hair",
    "dislyte_olivia": "olivia, dislyte, elegant, long dress, mysterious",
    "dislyte_sander_f": "sander, female, dislyte, casual outfit, short hair",
    "dislyte_stella": "stella, dislyte, pop star, colorful hair",
    "dislyte_alice": "alice, dislyte, elegant, formal dress",
    "dislyte_arcana": "arcana, dislyte, mystic, flowing robes",
    "dislyte_aurelius_f": "aurelius, female, dislyte, powerful, leader, golden armor",
    "dislyte_bette": "bette, dislyte, spy, sleek outfit, mysterious",
    "dislyte_bonnie": "bonnie, dislyte, cowgirl, western wear, confident",
    "dislyte_celine": "celine, dislyte, singer, stage outfit, microphone",
    "dislyte_corbin_f": "corbin, female, dislyte, mercenary, combat gear, tough",
}

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π (–¥–ª—è –≤–∫–ª–∞–¥–æ–∫)
CHARACTER_CATEGORIES = {
    "dxd": "üì∫ –î–µ–º–æ–Ω—ã —Å—Ç–∞—Ä—à–µ–π —à–∫–æ–ª—ã",
    "genshin": "üéÆ Genshin Impact",
    "hsr": "üéÆ Honkai Star Rail",
    "nier": "üéÆ NieR Automata",
    "spyxfamily": "üì∫ Spy x Family",
    "akamegakill": "üì∫ Akame ga Kill",
    "azurlane": "üéÆ Azur Lane",
    "fate": "üì∫ Fate Series",
    "residentevil": "üéÆ Resident Evil",
    "streetfighter": "üéÆ Street Fighter",
    "atomicheart": "üéÆ Atomic Heart",
    "bleach": "üì∫ Bleach",
    "danmachi": "üì∫ Danmachi",
    "ragnarok": "üì∫ –ü–æ–≤–µ—Å—Ç—å –æ –∫–æ–Ω—Ü–µ —Å–≤–µ—Ç–∞",
    "naruto": "üì∫ Naruto",
    "overlord": "üì∫ Overlord",
    "kakegurui": "üì∫ –ë–µ–∑—É–º–Ω—ã–π –∞–∑–∞—Ä—Ç",
    "jujutsukaisen": "üì∫ –ú–∞–≥–∏—á–µ—Å–∫–∞—è –±–∏—Ç–≤–∞",
    "shieldhero": "üì∫ –ì–µ—Ä–æ–π –©–∏—Ç–∞",
    "helltaker": "üéÆ Helltaker",
    "zzz": "üéÆ Zenless Zone Zero",
    "lol": "üéÆ League of Legends",
    "mlp": "üì∫ My Little Pony",
    "dislyte": "üéÆ Dislyte"
}

# --- –ü—Ä–æ–º–ø—Ç—ã –¥–ª—è –º–æ–¥–µ–ª–∏ ---
TAG_PROMPTS = {
    **CHARACTER_EXTRA, # –í–∫–ª—é—á–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    "vagina": "spread pussy",
    "anus": "spread anus",
    "both": "spread pussy and anus",
    "dilated_anus": "dilated anus, anus stretched, open anus, internal view of anus, anus gaping",
    "dilated_vagina": "dilated vagina, vagina stretched, open pussy, internal view of vagina, vagina gaping, spread pussy, labia spread, realistic, detailed, high focus",
    "prolapsed_uterus": "prolapsed uterus, uterus exposed, visible uterus",
    "prolapsed_anus": "prolapsed anus, anus exposed, visible anus",
    "two_dildos_one_hole": "two dildos, one hole, multiple dildos in one orifice, dildos inserted into same hole", # Corrected
    "dildo": "dildo inserted",
    "huge_dildo": "huge dildo",
    "horse_dildo": "horse dildo, belly bulge, stomach distended", # Added belly bulge
    "anal_beads": "anal beads inserted",
    "anal_plug": "anal plug",
    "long_dildo_path": (
        "dildo inserted into anus, dildo visibly pushing through intestines, belly bulge, stomach distended, "
        "dildo exiting from mouth, seamless and continuous dildo, consistent texture, realistic rubber" # Improved
    ),
    "urethral_dildo": "urethral dildo, dildo in urethra, dildo inserted into urethra",
    "two_dildos_anus_vagina": "one dildo inserted into anus, one dildo inserted into vagina",
    "horse_sex": "horse sex, mare, horse cock, equine, intercourse with horse", # NEW
    "doggy": "doggy style, on all fours, hands on floor",
    "squat": "squatting pose, hands behind head",
    "lying": "lying down",
    "lotus_pose": "lotus pose, legs crossed, sitting position", # NEW
    "scissors_pose": "scissors pose, two girls, legs intertwined, scissoring", # NEW
    "hor_split": "horizontal split, legs stretched fully to sides, pelvis on floor, inner thighs visible",
    "ver_split": "vertical split, holding own raised leg",
    "on_back_legs_behind_head": "on back, legs behind head",
    "on_side_leg_up": "on side with leg raised",
    "suspended": "suspended",
    "front_facing": "front to viewer",
    "back_facing": "back to viewer",
    "top_down_view": "shot from above, top-down view",
    "bottom_up_view": "shot from below, bottom-up view",
    "hands_spreading_vagina": "hands spreading vagina",
    "stockings_white": "white stockings only",
    "stockings_black": "black stockings only",
    "stockings_red": "red stockings only",
    "stockings_pink": "pink stockings only",
    "stockings_gold": "gold stockings only",
    "stockings_fishnet_white": "white fishnet stockings", # Modified for subcategory
    "stockings_fishnet_black": "black fishnet stockings", # Modified for subcategory
    "stockings_fishnet_red": "red fishnet stockings", # Modified for subcategory
    "stockings_fishnet_pink": "pink fishnet stockings", # Modified for subcategory
    "stockings_fishnet_gold": "gold fishnet stockings", # Modified for subcategory
    "bikini_tan_lines": "bikini tan lines",
    "shibari": "shibari ropes",
    "cow_costume": "cow costume, cow ears, cow horns, cow tail, wearing stockings only",
    "big_breasts": "big breasts",
    "small_breasts": "small breasts",
    "body_fit": "fit body",
    "body_fat": "curvy body",
    "body_muscular": "muscular body",
    "age_loli": "loli",
    "age_milf": "milf",
    "age_21": "21 –≥–æ–¥",
    "cum": "cum covered",
    "belly_bloat": "belly bulge, pregnant looking belly",
    "succubus_tattoo": "succubus tattoo on lower abdomen",
    "futanari": "futanari",
    "femboy": "male, boy, very feminine body, femboy, androgynous, flat chest, penis, testicles, thin waist, wide hips, boyish hips, no breasts",
    "ethnicity_asian": "asian girl",
    "ethnicity_european": "european girl",
    "furry_cow": "furry cow girl, cow costume",
    "furry_cat": "furry cat girl, cat costume",
    "furry_dog": "furry dog girl, dog costume",
    "furry_dragon": "furry dragon girl, dragon costume",
    "furry_sylveon": "furry sylveon, sylveon costume, pink, ribbons, sexy",
    "furry_fox": "furry fox girl, fox costume",
    "furry_bunny": "furry bunny girl, bunny costume",
    "furry_wolf": "furry wolf girl, wolf costume",
    "furry_bear": "furry bear girl, bear ears, bear tail", # NEW
    "furry_bird": "furry bird girl, bird wings, bird feathers", # NEW
    "furry_mouse": "furry mouse girl, mouse ears, mouse tail", # NEW
    "furry_deer": "furry deer girl, deer antlers, deer ears, deer tail", # NEW
    "furry_tiger": "furry tiger girl, tiger stripes, tiger ears, tiger tail", # NEW
    "furry_lion": "furry lion girl, lion mane, lion ears, lion tail", # NEW
    "furry_snake": "furry snake girl, snake scales, snake tail, snake eyes", # NEW
    "furry_lizard": "furry lizard girl, lizard scales, lizard tail", # NEW
    "ahegao": "ahegao face",
    "pain_face": "face in pain",
    "ecstasy_face": "ecstasy face",
    "gold_lipstick": "gold lipstick",
    "nipple_piercing": "nipple piercing",
    "clitoral_piercing": "clitoral piercing",
    "foot_fetish": "foot fetish",
    "footjob": "footjob",
    "mouth_nipples": "mouths instead of nipples",
    "nipple_hole": "nipple hole, hole in nipple",
    "anus_piercing": "anus piercing",
    "vagina_piercing": "vagina piercing",
    "gag": "gag, mouth gag",
    "blindfold": "blindfold",
    "dilated_nipples": "dilated nipples, stretched nipple holes, open nipple holes",
    "anus_spreader_ring": "anus spreader ring, ring holding anus open, anal ring, anus gaping ring",
    "vagina_spreader_ring": "vagina spreader ring, ring holding vagina open, vaginal ring, vagina gaping ring",
    "reshiram": "reshiram, pokemon",
    "mew": "mew, pokemon",
    "mewtwo": "mewtwo, pokemon",
    "gardevoir": "gardevoir, pokemon",
    "umbreon": "umbreon, pokemon",
    "lugia": "lugia, pokemon",
    "shadow_lugia": "shadow lugia, pokemon",
    "lopunny": "lopunny, pokemon",
    "goodra": "goodra, pokemon",
    "pokemon_jessie": "jessie, pokemon, team rocket, red hair, long hair, ponytail", # Moved
    "pokemon_lusamine": "lusamine, pokemon, aether foundation, blonde hair, long hair, dress", # Moved
}

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π (–¥–ª—è –≤–∫–ª–∞–¥–æ–∫)
CHARACTER_CATEGORIES = {
    "dxd": "üì∫ –î–µ–º–æ–Ω—ã —Å—Ç–∞—Ä—à–µ–π —à–∫–æ–ª—ã",
    "genshin": "üéÆ Genshin Impact",
    "hsr": "üéÆ Honkai Star Rail",
    "nier": "üéÆ NieR Automata",
    "spyxfamily": "üì∫ Spy x Family",
    "akamegakill": "üì∫ Akame ga Kill",
    "azurlane": "üéÆ Azur Lane",
    "fate": "üì∫ Fate Series",
    "residentevil": "üéÆ Resident Evil",
    "streetfighter": "üéÆ Street Fighter",
    "atomicheart": "üéÆ Atomic Heart",
    "bleach": "üì∫ Bleach",
    "danmachi": "üì∫ Danmachi",
    "ragnarok": "üì∫ –ü–æ–≤–µ—Å—Ç—å –æ –∫–æ–Ω—Ü–µ —Å–≤–µ—Ç–∞",
    "naruto": "üì∫ Naruto",
    "overlord": "üì∫ Overlord",
    "kakegurui": "üì∫ –ë–µ–∑—É–º–Ω—ã–π –∞–∑–∞—Ä—Ç",
    "jujutsukaisen": "üì∫ –ú–∞–≥–∏—á–µ—Å–∫–∞—è –±–∏—Ç–≤–∞",
    "shieldhero": "üì∫ –ì–µ—Ä–æ–π –©–∏—Ç–∞",
    "helltaker": "üéÆ Helltaker",
    "zzz": "üéÆ Zenless Zone Zero",
    "lol": "üéÆ League of Legends",
    "mlp": "üì∫ My Little Pony",
    "dislyte": "üéÆ Dislyte"
}

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä ---
def main_menu():
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞."""
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üß© –í—ã–±—Ä–∞—Ç—å —Ç–µ–≥–∏", callback_data="choose_tags"))
    kb.add(types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"))
    kb.add(types.InlineKeyboardButton("üé® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="generate"))
    return kb

def category_menu():
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–µ–≥–æ–≤."""
    kb = types.InlineKeyboardMarkup(row_width=2)
    for key, name in CATEGORY_NAMES.items():
        kb.add(types.InlineKeyboardButton(name, callback_data=f"cat_{key}"))
    kb.add(types.InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="done_tags"))
    return kb

def character_subcategory_menu(selected_tags):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π."""
    kb = types.InlineKeyboardMarkup(row_width=2)
    for key, name in CHARACTER_CATEGORIES.items():
        kb.add(types.InlineKeyboardButton(name, callback_data=f"char_sub_{key}"))
    kb.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_cat"))
    return kb

def stockings_type_menu(selected_tags):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —á—É–ª–æ–∫."""
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(types.InlineKeyboardButton("–û–±—ã—á–Ω—ã–µ —á—É–ª–∫–∏", callback_data="stockings_type_normal"))
    kb.add(types.InlineKeyboardButton("–ß—É–ª–∫–∏ –≤ —Å–µ—Ç–æ—á–∫—É", callback_data="stockings_type_fishnet"))
    kb.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_cat"))
    return kb

def stockings_color_menu(stockings_type, selected_tags):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞ —á—É–ª–æ–∫."""
    kb = types.InlineKeyboardMarkup(row_width=2)
    colors = {"white": "–ë–µ–ª—ã–µ", "black": "–ß–µ—Ä–Ω—ã–µ", "red": "–ö—Ä–∞—Å–Ω—ã–µ", "pink": "–†–æ–∑–æ–≤—ã–µ", "gold": "–ó–æ–ª–æ—Ç—ã–µ"}
    for color_key, color_name in colors.items():
        tag_key = f"stockings_{stockings_type}_{color_key}"
        label = f"‚úÖ {color_name}" if tag_key in selected_tags else color_name
        kb.add(types.InlineKeyboardButton(label, callback_data=f"tag_clothes_{tag_key}"))
    
    kb.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_stockings_type"))
    return kb

def tag_menu(category, selected_tags, char_subcategory=None):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–æ–≤ –≤–Ω—É—Ç—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    kb = types.InlineKeyboardMarkup(row_width=2)
    
    tags_to_display = {}
    if category == "characters" and char_subcategory:
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ–≥–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for tag_key, tag_name in TAGS[category].items():
            # –ü—Ä–µ—Ñ–∏–∫—Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞—á–∞–ª—É –∫–ª—é—á–∞ —Ç–µ–≥–∞
            if tag_key.startswith(char_subcategory + "_"):
                tags_to_display[tag_key] = tag_name
    elif category == "clothes" and "stockings" in TAGS[category]: # Handle stockings subcategory
        # If stockings is a subcategory, we don't display it here directly
        for tag_key, tag_name in TAGS[category].items():
            if tag_key != "stockings": # Exclude the stockings subcategory trigger
                tags_to_display[tag_key] = tag_name
        # Add a button for stockings subcategory
        kb.add(types.InlineKeyboardButton("–ß—É–ª–∫–∏", callback_data="stockings_type_select"))
    else:
        tags_to_display = TAGS[category]

    for tag_key, tag_name in tags_to_display.items():
        # Skip stockings related tags if we are in the main clothes menu
        if category == "clothes" and (tag_key.startswith("stockings_") and tag_key != "stockings"):
            continue

        label = f"‚úÖ {tag_name}" if tag_key in selected_tags else tag_name
        kb.add(types.InlineKeyboardButton(label, callback_data=f"tag_{category}_{tag_key}"))
    
    if category == "characters":
        kb.add(types.InlineKeyboardButton("‚¨Ö –ö –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_char_sub"))
    else:
        kb.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_cat"))
    return kb

def settings_menu(current_num_images):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(types.InlineKeyboardButton(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {current_num_images}", callback_data="ignore"))
    kb.add(types.InlineKeyboardButton("1", callback_data="set_num_images_1"))
    kb.add(types.InlineKeyboardButton("2", callback_data="set_num_images_2"))
    kb.add(types.InlineKeyboardButton("3", callback_data="set_num_images_3"))
    kb.add(types.InlineKeyboardButton("4", callback_data="set_num_images_4"))
    kb.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return kb

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–ª–±—ç–∫–æ–≤ ---
@bot.message_handler(commands=["start"])
def start(msg):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    cid = msg.chat.id
    user_settings[cid] = {"tags": [], "last_cat": None, "last_char_sub": None, "stockings_type": None, "num_images": 1} # –î–æ–±–∞–≤–ª–µ–Ω–æ stockings_type
    bot.send_message(cid, "–ü—Ä–∏–≤–µ—Ç –®–µ—Ñ!", reply_markup=main_menu())

@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –∫–æ–ª–±—ç–∫–∞."""
    cid = call.message.chat.id
    message_id = call.message.message_id
    if cid not in user_settings:
        user_settings[cid] = {"tags": [], "last_cat": None, "last_char_sub": None, "stockings_type": None, "num_images": 1}

    data = call.data

    if data == "choose_tags":
        bot.edit_message_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–µ–≥–æ–≤:", cid, message_id, reply_markup=category_menu())

    elif data.startswith("cat_"):
        cat = data[4:]
        user_settings[cid]["last_cat"] = cat
        selected = user_settings[cid]["tags"]
        
        if cat == "characters":
            user_settings[cid]["last_char_sub"] = None 
            bot.edit_message_text("–í—ã–±–µ—Ä–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:", cid, message_id, reply_markup=character_subcategory_menu(selected))
        elif cat == "clothes":
            bot.edit_message_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è: –û–¥–µ–∂–¥–∞", cid, message_id, reply_markup=tag_menu(cat, selected))
        else:
            category_display_name = CATEGORY_NAMES.get(cat, cat)
            bot.edit_message_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_display_name}", cid, message_id, reply_markup=tag_menu(cat, selected))

    elif data == "stockings_type_select":
        bot.edit_message_text("–í—ã–±–µ—Ä–∏ —Ç–∏–ø —á—É–ª–æ–∫:", cid, message_id, reply_markup=stockings_type_menu(user_settings[cid]["tags"]))

    elif data.startswith("stockings_type_"):
        stockings_type = data[len("stockings_type_"):]
        user_settings[cid]["stockings_type"] = stockings_type
        bot.edit_message_text("–í—ã–±–µ—Ä–∏ —Ü–≤–µ—Ç —á—É–ª–æ–∫:", cid, message_id, reply_markup=stockings_color_menu(stockings_type, user_settings[cid]["tags"]))

    elif data == "back_to_stockings_type":
        bot.edit_message_text("–í—ã–±–µ—Ä–∏ —Ç–∏–ø —á—É–ª–æ–∫:", cid, message_id, reply_markup=stockings_type_menu(user_settings[cid]["tags"]))

    elif data.startswith("char_sub_"):
        char_sub = data[9:]
        user_settings[cid]["last_char_sub"] = char_sub
        selected = user_settings[cid]["tags"]
        subcategory_display_name = CHARACTER_CATEGORIES.get(char_sub, char_sub)
        bot.edit_message_text(f"–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {subcategory_display_name}", cid, message_id, reply_markup=tag_menu("characters", selected, char_sub))

    elif data.startswith("tag_"):
        _, cat, tag = data.split("_", 2)
        tags = user_settings[cid]["tags"]

        # Special handling for stockings to remove conflicting tags
        if tag.startswith("stockings_"):
            # Remove any existing stockings tags before adding the new one
            tags_to_remove = [t for t in tags if t.startswith("stockings_")]
            for t_rem in tags_to_remove:
                tags.remove(t_rem)
            
            if tag not in tags: # Add the new stockings tag
                tags.append(tag)
            
            # Update the menu for stockings color selection
            stockings_type = user_settings[cid]["stockings_type"]
            bot.edit_message_reply_markup(cid, message_id, reply_markup=stockings_color_menu(stockings_type, tags))
            return # Exit to prevent re-rendering the main tag menu

        # General tag handling
        if tag in tags:
            tags.remove(tag)
        else:
            tags.append(tag)
        
        current_char_sub = user_settings[cid].get("last_char_sub") if cat == "characters" else None
        bot.edit_message_reply_markup(cid, message_id, reply_markup=tag_menu(cat, tags, current_char_sub))

    elif data == "done_tags":
        bot.edit_message_text("–¢–µ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", cid, message_id, reply_markup=main_menu())

    elif data == "back_to_cat":
        if user_settings[cid].get("last_cat") == "characters" and user_settings[cid].get("last_char_sub"):
            user_settings[cid]["last_char_sub"] = None
            bot.edit_message_text("–í—ã–±–µ—Ä–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:", cid, message_id, reply_markup=character_subcategory_menu(user_settings[cid]["tags"]))
        else:
            bot.edit_message_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", cid, message_id, reply_markup=category_menu())
    
    elif data == "back_to_char_sub":
        user_settings[cid]["last_char_sub"] = None
        bot.edit_message_text("–í—ã–±–µ—Ä–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:", cid, message_id, reply_markup=character_subcategory_menu(user_settings[cid]["tags"]))

    elif data == "settings":
        current_num_images = user_settings[cid].get("num_images", 1)
        bot.edit_message_text(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", cid, message_id, reply_markup=settings_menu(current_num_images))
    
    elif data.startswith("set_num_images_"):
        num = int(data.split("_")[-1])
        user_settings[cid]["num_images"] = num
        current_num_images = user_settings[cid].get("num_images", 1)
        bot.edit_message_text(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {num}.", cid, message_id, reply_markup=settings_menu(current_num_images))

    elif data == "back_to_main":
        bot.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", cid, message_id, reply_markup=main_menu())

    elif data == "generate":
        tags = user_settings[cid]["tags"]
        if not tags:
            bot.send_message(cid, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–µ–≥–∏!")
            return

        prompt_info = build_prompt(tags)
        positive_prompt = prompt_info["positive_prompt"]
        negative_prompt = prompt_info["negative_prompt"]
        num_images = user_settings[cid].get("num_images", 1)
        
        user_settings[cid]["last_prompt_tags"] = tags.copy()

        bot.send_message(cid, "–ü—Ä–∏–Ω—è—Ç–æ –®–µ—Ñ, –ø—Ä–∏—Å—Ç—É–ø–∞—é!")

        generated_urls = replicate_generate(positive_prompt, negative_prompt, num_images)
        if generated_urls:
            media_group = []
            for url in generated_urls:
                media_group.append(types.InputMediaPhoto(url))
            
            kb = types.InlineKeyboardMarkup()
            kb.add(
                types.InlineKeyboardButton("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start"),
                types.InlineKeyboardButton("üîß –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥–∏", callback_data="edit_tags"),
                types.InlineKeyboardButton("‚û° –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —ç—Ç–∏–º–∏", callback_data="generate")
            )
            bot.send_media_group(cid, media_group)
            bot.send_message(cid, "‚úÖ –ì–æ—Ç–æ–≤–æ!", reply_markup=kb)
        else:
            bot.send_message(cid, "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    elif data == "edit_tags":
        if "last_prompt_tags" in user_settings[cid]:
            user_settings[cid]["tags"] = user_settings[cid]["last_prompt_tags"]
            bot.send_message(cid, "–ò–∑–º–µ–Ω—è–µ–º —Ç–µ–≥–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", reply_markup=category_menu())
        else:
            bot.send_message(cid, "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π –≥–µ–Ω–µ—Ä–∞—Ü–∏—é.")

    elif data == "start":
        user_settings[cid] = {"tags": [], "last_cat": None, "last_char_sub": None, "stockings_type": None, "num_images": 1}
        bot.send_message(cid, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã. –ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ!", reply_markup=main_menu())
    
    elif data == "ignore":
        bot.answer_callback_query(call.id)

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ–≥–∞ ---
def tag_category(tag):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫ –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Ç–µ–≥."""
    for cat, items in TAGS.items():
        if tag in items:
            if cat in ["body", "ethnos"]:
                return "body"
            if cat == "poses":
                return "pose"
            if cat == "holes":
                return "holes"
            if cat == "toys":
                return "toys"
            if cat == "clothes":
                return "clothes"
            if cat == "fetish":
                return "fetish"
            if cat == "head":
                return "face"
            if cat == "pokemon": # Pokemon category now includes characters
                return "pokemon"
            
            for char_cat_key in CHARACTER_CATEGORIES.keys():
                if tag.startswith(char_cat_key + "_"):
                    return "character"
    return None

# --- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ ---
def build_prompt(tags):
    """
    –°—Ç—Ä–æ–∏—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –º–æ–¥–µ–ª–∏ Replicate –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤,
    –∏—Å–ø–æ–ª—å–∑—É—è –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤.
    """
    base = [
        "masterpiece", "best quality", "ultra detailed", "anime style", "highly detailed",
        "expressive eyes", "perfect lighting", "volumetric lighting", "fully nude", "solo"
    ]

    priority = {
        "character": [],
        "furry": [],
        "body": [],
        "pose": [],
        "holes": [],
        "toys": [],
        "clothes": [],
        "fetish": [],
        "face": [],
        "pokemon": []
    }
    
    base_negative = (
        "lowres, bad anatomy, bad hands, bad face, deformed, disfigured, poorly drawn, "
        "missing limbs, extra limbs, fused fingers, jpeg artifacts, signature, watermark",
        "blurry, cropped, worst quality, low quality, text, error, mutated, censored, "
        "hands on chest, hands covering breasts, clothing covering genitals, shirt, bra, bikini, "
        "vagina not visible, anus not visible, penis not visible, bad proportions, "
        "all clothes, all clothing"
    )
    base_negative = "".join(base_negative)


    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏ –∏ —Å–ø–µ—Ü. –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    unique = set(tags)
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –±–æ–ª—å—à–∏–º –≥—Ä—É–¥—è–º
    if "big_breasts" in unique and "small_breasts" in unique:
        unique.remove("small_breasts") 
    
    # –ö–æ—Å—Ç—é–º –∫–æ—Ä–æ–≤—ã —É–∂–µ –≤–∫–ª—é—á—ë–Ω –≤ furry_cow
    if "furry_cow" in unique:
        unique.discard("cow_costume") 

    # Handle multiple characters
    character_tags_count = 0
    for tag in unique:
        for char_cat_key in CHARACTER_CATEGORIES.keys():
            if tag.startswith(char_cat_key + "_"):
                character_tags_count += 1
                break
    
    if character_tags_count > 1:
        base.insert(0, f"{character_tags_count}girls")
    elif character_tags_count == 1:
        base.insert(0, "1girl")
    elif not any(tag_category(t) in ["furry", "pokemon"] for t in unique): # Add 1girl if no specific character or furry/pokemon
         base.insert(0, "1girl")

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    for tag in unique:
        if tag in CHARACTER_EXTRA:
            priority["character"].append(TAG_PROMPTS.get(tag, tag))
        elif tag.startswith("furry_"):
            priority["furry"].append(TAG_PROMPTS.get(tag, tag))
        elif tag.startswith("pokemon_") or tag in ["reshiram", "mew", "mewtwo", "gardevoir", "umbreon", "lugia", "shadow_lugia", "lopunny", "goodra"]:
            priority["pokemon"].append(TAG_PROMPTS.get(tag, tag))
        elif tag in TAG_PROMPTS:
            key = tag_category(tag)
            if key:
                priority[key].append(TAG_PROMPTS[tag])

    prompt_parts = base[:]
    # –ü–æ—Ä—è–¥–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞–∂–µ–Ω: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–≤—É—à–µ–∫, –ø–µ—Ä—Å–æ–Ω–∞–∂–∏, —Ñ—É—Ä–∏, –ø–æ–∫–µ–º–æ–Ω—ã, —Ç–µ–ª–æ, –ø–æ–∑—ã, –æ—Ç–≤–µ—Ä—Å—Ç–∏—è, –∏–≥—Ä—É—à–∫–∏, –æ–¥–µ–∂–¥–∞, —Ñ–µ—Ç–∏—à–∏, –ª–∏—Ü–æ
    for section in ["character", "furry", "pokemon", "body", "pose", "holes", "toys", "clothes", "fetish", "face"]:
        prompt_parts.extend(priority[section])

    # –¢–∞–Ω–ª–∞–π–Ω—ã —É–±–∏—Ä–∞—é—Ç –∫—É–ø–∞–ª—å–Ω–∏–∫ –∏–∑ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    if "bikini_tan_lines" in unique:
        base_negative += ", bikini"

    return {
        "positive_prompt": ", ".join(prompt_parts),
        "negative_prompt": base_negative
    } 

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Replicate ---
def replicate_generate(positive_prompt, negative_prompt, num_images=1):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Replicate API,
    –∏—Å–ø–æ–ª—å–∑—É—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏.
    """
    urls = []
    for _ in range(num_images):
        url = "https://api.replicate.com/v1/predictions"
        headers = {
            "Authorization": f"Token {REPLICATE_TOKEN}",
            "Content-Type": "application/json"
        }
        json_data = {
            "version": REPLICATE_MODEL,
            "input": {
                "prompt": positive_prompt,
                "negative_prompt": negative_prompt,
                "prepend_preprompt": False,
                "width": 1024,
                "height": 1024,
                "steps": 75,
                "guidance_scale": 18,
                "scheduler": "DPM++ 2M SDE Karras",
                "adetailer_face": True,
                "adetailer_hand": True,
                "seed": -1 # –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Å–∏–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            }
        }

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        r = requests.post(url, headers=headers, json=json_data)
        if r.status_code != 201:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {r.status_code} - {r.text}")
            print(f"Request JSON: {json_data}")
            return None

        status_url = r.json()["urls"]["get"]

        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–¥–æ 3 –º–∏–Ω—É—Ç)
        for i in range(90):
            time.sleep(2)
            r = requests.get(status_url, headers=headers)
            if r.status_code != 200:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {r.status_code} - {r.text}")
                return None
            data = r.json()
            if data["status"] == "succeeded":
                if isinstance(data["output"], list) and data["output"]:
                    urls.append(data["output"][0])
                    break
                else:
                    print("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π 'output' –æ—Ç Replicate.")
                    return None
            elif data["status"] == "failed":
                print(f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {data.get('error', '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ')}")
                print(f"Request JSON: {json_data}")
                return None
        else:
            print("–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            return None

    return urls

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞ Flask ---
@app.route("/", methods=["POST"])
def webhook():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram."""
    json_str = request.stream.read().decode("utf-8")
    update = telebot.types.Update.de_json(json_str)
    
    if update.message and update.message.chat.id not in user_settings:
        bot.send_message(update.message.chat.id, "–ü—Ä–∏–≤–µ—Ç –®–µ—Ñ!", reply_markup=main_menu())
        user_settings[update.message.chat.id] = {"tags": [], "last_cat": None, "last_char_sub": None, "stockings_type": None, "num_images": 1}

    bot.process_new_updates([update])
    return "ok", 200

@app.route("/", methods=["GET"])
def home():
    """–ü—Ä–æ—Å—Ç–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    return "–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç", 200

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)
    app.run(host="0.0.0.0", port=PORT)
