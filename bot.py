import os
import time
import logging
import requests
from flask import Flask, request
from telebot import TeleBot, types

# üîê –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = os.getenv("TELEGRAM_TOKEN")
REPLICATE_TOKEN = os.getenv("REPLICATE_API_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.environ.get("PORT", 5000))

REPLICATE_MODEL = "c1d5b02687df6081c7953c74bcc527858702e8c153c9382012ccc3906752d3ec"

# üß† Telegram Bot
bot = TeleBot(API_TOKEN, threaded=False)
app = Flask(__name__)
logging.basicConfig(level=logging.INFO)

# üìÅ –°–æ—Å—Ç–æ—è–Ω–∏—è
user_tags = {}
user_stage = {}

# üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–µ–≥–∏
CATEGORIES = {
    "—Ç–µ–ª–æ": ["–±–æ–ª—å—à–∞—è –≥—Ä—É–¥—å", "–º–∞–ª–µ–Ω—å–∫–∞—è –≥—Ä—É–¥—å", "—á—ë—Ä–Ω–∞—è –∫–æ–∂–∞", "–±–µ–ª–∞—è –∫–æ–∂–∞", "–ø–æ–¥—Ä–æ—Å—Ç–æ–∫", "–≤–∑—Ä–æ—Å–ª–∞—è"],
    "–∏–≥—Ä—É—à–∫–∏": ["–∞–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–±–∫–∞", "–≤–∏–±—Ä–∞—Ç–æ—Ä", "–¥–∏–ª–¥–æ", "–¥–∏–ª–¥–æ –∏–∑ –∞–Ω—É—Å–∞ –≤—ã—Ö–æ–¥–∏—Ç –∏–∑–æ —Ä—Ç–∞"],
    "—ç—Ç–Ω–æ—Å": ["–∞–∑–∏–∞—Ç–∫–∞", "–µ–≤—Ä–æ–ø–µ–π–∫–∞", "—Ñ–µ–º–±–æ–π", "—Ñ—É—Ç–∞–Ω–∞—Ä–∏"],
    "—Ñ—É—Ä–∏": ["—Ñ—É—Ä–∏-–∫–æ—Ä–æ–ª–µ–≤–∞", "—Ñ—É—Ä–∏-–∫–æ—à–∫–∞", "—Ñ—É—Ä–∏-—Å–æ–±–∞–∫–∞", "—Ñ—É—Ä–∏-–¥—Ä–∞–∫–æ–Ω", "—Ñ—É—Ä–∏-—Å–∏–ª—å–≤–µ–æ–Ω", "–ª–∏—Å–∏—Ü–∞", "–≤–æ–ª—á–∏—Ü–∞", "–∫—Ä–æ–ª–∏–∫"],
    "–ø–µ—Ä—Å–æ–Ω–∞–∂–∏": ["–†–∏–∞—Å –ì—Ä–µ–º–æ—Ä–∏", "–ê–∫–µ–Ω–æ –•–∏–º—ç–¥–∑–∏–º–∞", "–ö–∞—Ñ–∫–∞", "–ï–æ–ª–∞", "–§—É –°—é–∞–Ω—å", "–ê—è—Å–µ –°–µ–π–∫–æ"],
    "–≥–æ–ª–æ–≤–∞": ["–∞—Ö–µ–≥–∞–æ", "–ª–∏—Ü–æ –≤ –±–æ–ª–∏", "–ª–∏—Ü–æ –≤ —ç–∫—Å—Ç–∞–∑–µ", "–∑–æ–ª–æ—Ç–∞—è –ø–æ–º–∞–¥–∞"],
    "–ø–æ–∑—ã": ["–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç", "–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç", "–Ω–∞ –±–æ–∫—É —Å –æ–¥–Ω–æ–π –Ω–æ–≥–æ–π –≤–≤–µ—Ä—Ö", "–ª–∏—Ü–æ–º –∫ –∑—Ä–∏—Ç–µ–ª—é", "—Å–ø–∏–Ω–æ–π –∫ –∑—Ä–∏—Ç–µ–ª—é", "–º–æ—Å—Ç", "–ª—ë–∂–∞ –Ω–∞ —Å–ø–∏–Ω–µ —Å —Ä–∞–∑–¥–≤–∏–Ω—É—Ç—ã–º–∏ –Ω–æ–≥–∞–º–∏", "–ø–æ–¥–≤–µ—à–µ–Ω–Ω–∞—è –Ω–∞ –≤–µ—Ä—ë–≤–∫–∞—Ö"],
    "—Å—Ü–µ–Ω–∞": ["–≤–∏–¥ —Å–≤–µ—Ä—Ö—É", "–≤–∏–¥ —Å–Ω–∏–∑—É", "–≤–∏–¥ —Å–±–æ–∫—É", "–±–ª–∏–∂–µ", "–¥–∞–ª—å—à–µ"]
}

# ‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–≥–∞ –≤ promt-—Ñ–æ—Ä–º—É
def format_tags(tags):
    if not tags:
        return "nude female"
    formatted = ", ".join(tags)
    # –§–∏–ª—å—Ç—Ä –±–ª–æ–∫–∏—Ä—É—é—â–µ–π –æ–¥–µ–∂–¥—ã
    banned = ["—Ç—Ä—É—Å—ã", "–ª–∏—Ñ—á–∏–∫", "–Ω–∏–∂–Ω–µ–µ –±–µ–ª—å–µ", "–æ–¥–µ–∂–¥–∞, –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è –≤–∞–≥–∏–Ω—É", "–æ–¥–µ–∂–¥–∞, —Å–∫—Ä—ã–≤–∞—é—â–∞—è –∞–Ω—É—Å", "–æ–¥–µ–∂–¥–∞ –Ω–∞ –≥—Ä—É–¥–∏"]
    return f"{formatted}, nude, no panties, no bra, no covering clothes, {' '.join(['- ' + b for b in banned])}"

# üì∏ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def generate_image(tags):
    prompt = format_tags(tags)
    payload = {
        "version": REPLICATE_MODEL,
        "input": {
            "prompt": prompt,
            "width": 512,
            "height": 768
        }
    }
    headers = {
        "Authorization": f"Token {REPLICATE_TOKEN}",
        "Content-Type": "application/json"
    }
    response = requests.post("https://api.replicate.com/v1/predictions", json=payload, headers=headers)
    if response.status_code != 201:
        return None

    prediction = response.json()
    status_url = prediction["urls"]["get"]

    for _ in range(60):
        result = requests.get(status_url, headers=headers).json()
        if result["status"] == "succeeded":
            return result["output"][-1]
        elif result["status"] == "failed":
            return None
        time.sleep(2)
    return None

# üì≤ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def start(message):
    user_tags[message.chat.id] = set()
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=build_category_keyboard())

# üß© –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
def build_category_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for category in CATEGORIES:
        keyboard.add(types.KeyboardButton(category))
    return keyboard

# üß© –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–µ–≥–æ–≤
def build_tags_keyboard(category, user_id):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for tag in CATEGORIES.get(category, []):
        label = f"‚úÖ {tag}" if tag in user_tags.get(user_id, set()) else tag
        keyboard.add(types.KeyboardButton(label))
    keyboard.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"), types.KeyboardButton("‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å"))
    return keyboard

# üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞
@bot.message_handler(func=lambda m: True)
def handle_message(message):
    user_id = message.chat.id
    text = message.text.strip()

    if text == "üîô –ù–∞–∑–∞–¥":
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=build_category_keyboard())
        return

    if text == "‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å":
        tags = list(user_tags.get(user_id, set()))
        bot.send_message(user_id, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø–æ–¥–æ–∂–¥–∏...")
        image_url = generate_image(tags)
        if image_url:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "üõ† –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥–∏", "‚ñ∂ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —ç—Ç–∏–º–∏ —Ç–µ–≥–∞–º–∏")
            bot.send_photo(user_id, image_url, reply_markup=markup)
        else:
            bot.send_message(user_id, "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    if text == "üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ":
        user_tags[user_id] = set()
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=build_category_keyboard())
        return

    if text == "üõ† –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥–∏":
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=build_category_keyboard())
        return

    if text == "‚ñ∂ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —ç—Ç–∏–º–∏ —Ç–µ–≥–∞–º–∏":
        tags = list(user_tags.get(user_id, set()))
        bot.send_message(user_id, "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è...")
        image_url = generate_image(tags)
        if image_url:
            bot.send_photo(user_id, image_url)
        else:
            bot.send_message(user_id, "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
        return

    if text in CATEGORIES:
        user_stage[user_id] = text
        bot.send_message(user_id, f"–í—ã–±–µ—Ä–∏ —Ç–µ–≥–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{text}¬ª", reply_markup=build_tags_keyboard(text, user_id))
        return

    if user_id in user_stage:
        category = user_stage[user_id]
        clean_text = text.replace("‚úÖ ", "")
        if clean_text in CATEGORIES.get(category, []):
            if clean_text in user_tags.get(user_id, set()):
                user_tags[user_id].remove(clean_text)
            else:
                user_tags[user_id].add(clean_text)
            bot.send_message(user_id, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}", reply_markup=build_tags_keyboard(category, user_id))
            return

# üåê –í–µ–±—Ö—É–∫
@app.route(f"/{API_TOKEN}", methods=["POST"])
def webhook():
    json_string = request.get_data().decode("utf-8")
    update = types.Update.de_json(json_string)
    bot.process_new_updates([update])
    return "!", 200

# üöÄ –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    bot.remove_webhook()
    time.sleep(1)
    bot.set_webhook(url=f"{WEBHOOK_URL}/{API_TOKEN}")
    app.run(host="0.0.0.0", port=PORT)