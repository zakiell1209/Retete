import os
import time
import json
import logging
import requests
from flask import Flask, request
import telebot
from telebot import types

API_TOKEN = os.getenv("TELEGRAM_TOKEN")
REPLICATE_TOKEN = os.getenv("REPLICATE_API_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.environ.get("PORT", 5000))
REPLICATE_MODEL = "c1d5b02687df6081c7953c74bcc527858702e8c153c9382012ccc3906752d3ec"

bot = telebot.TeleBot(API_TOKEN)
app = Flask(__name__)
logging.basicConfig(level=logging.INFO)

user_settings = {}

# üí¨ –†—É—Å—Å–∫–∏–µ —Ç–µ–≥–∏ ‚Üí –∞–Ω–≥–ª. ID
RU_TO_TAG = {
    "–∞–Ω—É—Å": "anal", "–≤–∞–≥–∏–Ω–∞": "vagina", "–≤—Å—è –≤ —Å–ø–µ—Ä–º–µ": "cum", "—Ñ—É—Ç–∞–Ω–∞—Ä–∏": "futanari",
    "–±–æ–ª—å—à–∞—è –≥—Ä—É–¥—å": "big_breasts", "—á—É–ª–∫–∏": "stockings", "—à–∏–±–∞—Ä–∏": "shibari",
    "–∞—Ö–µ–≥–∞–æ": "ahegao", "–∑–æ–ª–æ—Ç–∞—è –ø–æ–º–∞–¥–∞": "gold_lipstick", "–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç": "ver_split",
    "–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç": "hor_split", "–ø–æ–¥–≤–µ—à–µ–Ω–∞": "suspended", "–ø—Ä–∏—Å–µ–¥–∞–Ω–∏–µ": "squat",
    "–∫–∞–±–ª—É–∫–∏": "heels", "—Å–ø–µ—Ä–º–∞": "cum", "–º–∞—Å–∫–∞": "mask", "–≤–æ–∑—Ä–∞—Å—Ç 21": "age_21",
    "–∞–∑–∏–∞—Ç–∫–∞": "ethnicity_asian", "–µ–≤—Ä–æ–ø–µ–π–∫–∞": "ethnicity_european",
    "–Ω–∞ –±–æ–∫—É —Å –ø–æ–¥–Ω—è—Ç–æ–π –Ω–æ–≥–æ–π": "side_up_leg", "–ª–∏—Ü–æ–º –∫ –∑—Ä–∏—Ç–µ–ª—é": "front_facing",
    "—Å–ø–∏–Ω–æ–π –∫ –∑—Ä–∏—Ç–µ–ª—é": "back_facing", "–º–æ—Å—Ç": "bridge", "–ª–µ–∂–∏—Ç —Å –∫–æ–ª–µ–Ω—è–º–∏ –≤–≤–µ—Ä—Ö": "lying_knees_up",
    "—Å–Ω–∏–∑—É": "view_under", "—Å–≤–µ—Ä—Ö—É": "view_above", "—Å–±–æ–∫—É": "view_side",
    "–¥–∞–ª—å—à–µ": "view_far", "–±–ª–∏–∂–µ": "view_close", "–ª–æ–ª–∏": "age_loli", "–º–∏–ª—Ñ–∞": "age_milf",
    "–±–µ–ª–∞—è –∫–æ–∂–∞": "skin_white", "—á–µ—Ä–Ω–∞—è –∫–æ–∂–∞": "skin_black",
    "—Ñ—É—Ä–∏ –∫—Ä–æ–ª–∏–∫": "furry_bunny", "—Ñ—É—Ä–∏ –∫–æ—à–∫–∞": "furry_cat", "—Ñ—É—Ä–∏ –ª–∏—Å–∏—Ü–∞": "furry_fox",
    "—Ñ—É—Ä–∏ –≤–æ–ª—á–∏—Ü–∞": "furry_wolf", "—Ñ—É—Ä–∏ —Å–∏–ª—å–≤–µ–æ–Ω": "furry_sylveon", "—Ñ—É—Ä–∏ –¥—Ä–∞–∫–æ–Ω": "furry_dragon",
    "–∞–∫–µ–Ω–æ —Ö–∏–º–µ–¥–∑–∏–º–∞": "akeno", "—Ä–∏–∞—Å –≥—Ä–µ–º–æ—Ä–∏": "rias", "–∫–∞—Ñ–∫–∞": "kafka",
    "—Ñ—É —Å—é–∞–Ω—å": "fu_xuan", "–µ–æ–ª–∞": "eula", "–∞—è—Å–µ —Å–µ–π–∫–æ": "ayase"
}

# üí° –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
TAG_PROMPTS = {
    "futanari": "futanari, penis",
    "big_breasts": "very large breasts, visible, uncovered",
    "anal": "visible anus",
    "dildo": "dildo, inserted",
    "cum": "covered in cum",
    "gold_lipstick": "gold lipstick on lips only",
    "ahegao": "ahegao expression",
    "ver_split": "vertical split, standing leg up, gymnastics, full body pose",
    "hor_split": "horizontal split on the floor, full body pose",
    "view_under": "view from under the body, under the floor",
    "view_above": "top-down view",
    "view_side": "side angle",
    "view_far": "zoomed out, full body visible",
    "view_close": "close-up, partial body in frame",
    "rias": "red hair, blue eyes, pale skin, rias gremory, highschool dxd",
    "akeno": "black hair, purple eyes, akeno himejima, highschool dxd",
    "kafka": "purple hair, kafka, honkai star rail",
    "fu_xuan": "pink hair, fu xuan, honkai star rail",
    "eula": "light blue hair, eula, genshin impact",
    "ayase": "black hair, school uniform, ayase seiko"
}

def build_prompt(tags):
    base = "nsfw, masterpiece, best quality, anime style, full body, ultra detailed, fully nude, no hands on breasts"
    extra = [TAG_PROMPTS.get(tag, tag.replace("_", " ")) for tag in tags]
    return f"{base}, {', '.join(extra)}"

def replicate_generate(prompt, count=1):
    url = "https://api.replicate.com/v1/predictions"
    headers = {"Authorization": f"Token {REPLICATE_TOKEN}", "Content-Type": "application/json"}
    urls = []

    for _ in range(count):
        response = requests.post(url, headers=headers, json={
            "version": REPLICATE_MODEL,
            "input": {"prompt": prompt}
        })
        if response.status_code != 201:
            continue
        status_url = response.json()["urls"]["get"]

        for _ in range(60):
            time.sleep(2)
            status = requests.get(status_url, headers=headers)
            if status.status_code != 200:
                break
            data = status.json()
            if data["status"] == "succeeded":
                output = data["output"]
                urls.append(output[0] if isinstance(output, list) else output)
                break
            elif data["status"] == "failed":
                break
    return urls

# üöÄ –ö–æ–º–∞–Ω–¥—ã
@bot.message_handler(commands=["start"])
def start(msg):
    cid = msg.chat.id
    user_settings[cid] = {"tags": [], "last_prompt": []}
    bot.send_message(cid, "–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É.", reply_markup=main_menu())

def main_menu():
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üß© –í—ã–±—Ä–∞—Ç—å —Ç–µ–≥–∏", callback_data="choose_tags"))
    kb.add(types.InlineKeyboardButton("üé® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="generate"))
    return kb

# ‚úèÔ∏è –í–≤–æ–¥ —Ç–µ–≥–æ–≤ –≤—Ä—É—á–Ω—É—é
@bot.message_handler(func=lambda m: True, content_types=["text"])
def handle_text(msg):
    cid = msg.chat.id
    text = msg.text.strip().lower()
    count = 1
    parts = [p.strip() for p in text.split(",")]
    if parts and parts[-1].isdigit():
        count = min(10, max(1, int(parts.pop())))
    tags = []
    unknown = []
    for word in parts:
        tag = RU_TO_TAG.get(word)
        if tag:
            tags.append(tag)
        else:
            unknown.append(word)
    if unknown:
        bot.send_message(cid, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–µ–≥–∏: {', '.join(unknown)}")
        return
    user_settings[cid] = {"tags": tags, "last_prompt": tags}
    bot.send_message(cid, f"‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    prompt = build_prompt(tags)
    urls = replicate_generate(prompt, count)
    if urls:
        for url in urls:
            bot.send_photo(cid, url, reply_markup=result_menu())
    else:
        bot.send_message(cid, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

def result_menu():
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start"),
        types.InlineKeyboardButton("üé® –ï—â—ë —Ä–∞–∑", callback_data="generate")
    )
    return kb

# üì© –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    cid = call.message.chat.id
    if call.data == "start":
        return start(call.message)
    elif call.data == "generate":
        tags = user_settings.get(cid, {}).get("last_prompt", [])
        if not tags:
            bot.send_message(cid, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏.")
            return
        prompt = build_prompt(tags)
        urls = replicate_generate(prompt)
        if urls:
            for url in urls:
                bot.send_photo(cid, url, reply_markup=result_menu())
        else:
            bot.send_message(cid, "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
    elif call.data == "choose_tags":
        bot.send_message(cid, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ù–∞–ø—Ä–∏–º–µ—Ä: —Ä–∏–∞—Å –≥—Ä–µ–º–æ—Ä–∏, —Ñ—É—Ç–∞–Ω–∞—Ä–∏, –∞–Ω—É—Å, –¥–∏–ª–¥–æ")

# üåê –í–µ–±—Ö—É–∫–∏
@app.route("/", methods=["POST"])
def webhook():
    json_str = request.stream.read().decode("utf-8")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "ok", 200

@app.route("/", methods=["GET"])
def home():
    return "–±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω", 200

if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)
    app.run(host="0.0.0.0", port=PORT)