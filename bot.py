import os
import time
import requests
from telebot import TeleBot, types

# –¢–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
REPLICATE_TOKEN = os.getenv("REPLICATE_API_TOKEN")

bot = TeleBot(BOT_TOKEN)

# –ú–æ–¥–µ–ª—å Replicate
REPLICATE_MODEL = "aitechtree/nsfw-novel-generation"

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–µ–≥–∏

CATEGORY_NAMES = {
    "body": "–¢–µ–ª–æ",
    "toys": "–ò–≥—Ä—É—à–∫–∏",
    "ethnos": "–≠—Ç–Ω–æ—Å",
    "furry": "–§—É—Ä–∏",
    "characters": "–ü–µ—Ä—Å–æ–Ω–∞–∂–∏",
    "head": "–ì–æ–ª–æ–≤–∞",
    "holes": "–û—Ç–≤–µ—Ä—Å—Ç–∏—è",
    "poses": "–ü–æ–∑—ã",
    "view": "–û–±–∑–æ—Ä"
}

# –¢–µ–≥–∏ —Å —á–µ—Ç–∫–∏–º–∏ –ø—Ä–æ–º—Ç–∞–º–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–ø—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω—è—Ç—å)

TAGS = {
    "body": {
        "big_breasts": "–±–æ–ª—å—à–∞—è –≥—Ä—É–¥—å",
        "small_breasts": "–º–∞–ª–µ–Ω—å–∫–∞—è –≥—Ä—É–¥—å",
        "black_skin": "—á—ë—Ä–Ω–∞—è –∫–æ–∂–∞",
        "white_skin": "–±–µ–ª–∞—è –∫–æ–∂–∞",
        "slim": "—Å—Ç—Ä–æ–π–Ω–æ–µ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ",
        "young": "–º–æ–ª–æ–¥–∞—è"
    },
    "toys": {
        "anal_dildo": "–∞–Ω–∞–ª—å–Ω—ã–π –¥–∏–ª–¥–æ –æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –∏ —Ç–µ–∫—Å—Ç—É—Ä—ã, –±–µ–∑ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏",
        "dildo_anus_to_mouth": "–¥–∏–ª–¥–æ –æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –∏ —Ä–∞–∑–º–µ—Ä–∞, –≤—ã—Ö–æ–¥—è—â–µ–µ –∏–∑ –∞–Ω—É—Å–∞ –∏ –∏–∑–æ —Ä—Ç–∞, –±–µ–∑ —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø—Ä–æ—Ö–æ–¥–∞ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–ª–∞",
        "piercing": "–ø–∏—Ä—Å–∏–Ω–≥",
        "cow_costume": "—á—É–ª–∫–∏, —Ä–æ–≥–∞ –∏ —Ö–≤–æ—Å—Ç –∫–æ—Ä–æ–≤—ã (–±–µ–∑ —Ç—Ä—É—Å–æ–≤ –∏ –ª–∏—Ñ—á–∏–∫–∞)"
    },
    "ethnos": {
        "asian": "–∞–∑–∏–∞—Ç–∫–∞",
        "european": "–µ–≤—Ä–æ–ø–µ–π–∫–∞",
        "futanari": "—Ñ—É—Ç–∞–Ω–∞—Ä–∏",
        "femboy": "—Ñ–µ–º–±–æ–π"
    },
    "furry": {
        "fox": "—Ñ—É—Ä–∏-–ª–∏—Å–∏—Ü–∞",
        "rabbit": "—Ñ—É—Ä–∏-–∫—Ä–æ–ª–∏–∫",
        "wolf": "—Ñ—É—Ä–∏-–≤–æ–ª—á–∏—Ü–∞",
        "furry_queen": "—Ñ—É—Ä–∏-–∫–æ—Ä–æ–ª–µ–≤–∞",
        "furry_cat": "—Ñ—É—Ä–∏-–∫–æ—à–∫–∞",
        "furry_dog": "—Ñ—É—Ä–∏-—Å–æ–±–∞–∫–∞",
        "furry_dragon": "—Ñ—É—Ä–∏-–¥—Ä–∞–∫–æ–Ω",
        "furry_sylveon": "—Ñ—É—Ä–∏-—Å–∏–ª—å–≤–µ–æ–Ω"
    },
    "characters": {
        "rias_gremory": "–†–∏–∞—Å –ì—Ä–µ–º–æ—Ä–∏, –∫—Ä–∞—Å–Ω—ã–µ –≤–æ–ª–æ—Å—ã, –±–æ–ª—å—à–∏–µ –≥—Ä—É–¥–∏, –∏–∑ –∞–Ω–∏–º–µ –î–µ–º–æ–Ω—ã —Å—Ç–∞—Ä—à–µ–π —à–∫–æ–ª—ã",
        "akeno_himemizima": "–ê–∫–µ–Ω–æ –•–∏–º–µ–¥–∑–∏–º–∞, –∏–∑ –∞–Ω–∏–º–µ –î–µ–º–æ–Ω—ã —Å—Ç–∞—Ä—à–µ–π —à–∫–æ–ª—ã, —Å —Å–∏–Ω–∏–º–∏ –≤–æ–ª–æ—Å–∞–º–∏ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–º –∫–æ—Å—Ç—é–º–æ–º",
        "kafka": "–ö–∞—Ñ–∫–∞ –∏–∑ –•–æ–Ω–∫–∞–π –°—Ç–∞—Ä –†–µ–π–ª, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–∞—è –≤–Ω–µ—à–Ω–æ—Å—Ç—å, –∫–æ—Ä–æ—Ç–∫–∏–µ –≤–æ–ª–æ—Å—ã",
        "eola": "–ï–æ–ª–∞ –∏–∑ –ì–µ–Ω—à–∏–Ω –ò–º–ø–∞–∫—Ç, –±–ª–æ–Ω–¥–∏–Ω–∫–∞ —Å –≥–æ–ª—É–±—ã–º–∏ –≥–ª–∞–∑–∞–º–∏",
        "fu_xuan": "–§—É –°—é–∞–Ω—å –∏–∑ –•–æ–Ω–∫–∞–π –°—Ç–∞—Ä –†–µ–π–ª",
        "ayase_seiko": "–ê—è—Å–µ –°–µ–π–∫–æ, –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∞–Ω–∏–º–µ"
    },
    "head": {
        "ahegao": "–∞—Ö–µ–≥–∞–æ",
        "face_pain": "–ª–∏—Ü–æ —Å–∫—Ä–∏–≤–∏–≤—à–µ–µ—Å—è –æ—Ç –±–æ–ª–∏",
        "face_ecstasy": "–ª–∏—Ü–æ –≤ —ç–∫—Å—Ç–∞–∑–µ",
        "golden_lipstick": "–∑–æ–ª–æ—Ç–∞—è –ø–æ–º–∞–¥–∞ –¥–ª—è –≥—É–±"
    },
    "holes": {
        "vagina": "–≤–∞–≥–∏–Ω–∞",
        "anus": "–∞–Ω—É—Å",
        "mouth": "—Ä–æ—Ç"
    },
    "poses": {
        "doggy": "–ø–æ–∑–∞ –Ω–∞–µ–∑–¥–Ω–∏—Ü—ã (–¥–æ–≥–≥–∏-—Å—Ç–∞–π–ª)",
        "standing": "—Å—Ç–æ—è",
        "splits": "—à–ø–∞–≥–∞—Ç –ø—Ä–æ—Å—Ç–æ–π",
        "hor_split": "–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç, –¥–µ–≤—É—à–∫–∞ —Å–∏–¥–∏—Ç —Å –Ω–æ–≥–∞–º–∏ –≤ —Å—Ç–æ—Ä–æ–Ω—ã –Ω–∞ –ø–æ–ª—É, —Å–ø–∏–Ω–∞ —Ä–æ–≤–Ω–∞—è",
        "ver_split": "–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç, –¥–µ–≤—É—à–∫–∞ —Å –≤—ã—Ç—è–Ω—É—Ç—ã–º–∏ –Ω–æ–≥–∞–º–∏ –≤–≤–µ—Ä—Ö",
        "squat": "–ø—Ä–∏—Å–µ–¥–∞–Ω–∏–µ",
        "lying": "–ª–µ–∂–∞",
        "side_up_leg": "–Ω–∞ –±–æ–∫—É —Å –ø–æ–¥–Ω—è—Ç–æ–π –Ω–æ–≥–æ–π",
        "front_facing": "–ª–∏—Ü–æ–º –∫ –∑—Ä–∏—Ç–µ–ª—é",
        "back_facing": "—Å–ø–∏–Ω–æ–π –∫ –∑—Ä–∏—Ç–µ–ª—é",
        "lying_knees_up": "–ª–µ–∂–∞ —Å —Ä–∞–∑–¥–≤–∏–Ω—É—Ç—ã–º–∏ —Å–æ–≥–Ω—É—Ç—ã–º–∏ –∫–æ–ª–µ–Ω—è–º–∏",
        "bridge": "–º–æ—Å—Ç",
        "suspended": "–ø–æ–¥–≤–µ—à–µ–Ω–∞ –Ω–∞ –≤–µ—Ä—ë–≤–∫–∞—Ö"
    },
    "view": {
        "top_view": "–≤–∏–¥ —Å–≤–µ—Ä—Ö—É",
        "bottom_view": "–≤–∏–¥ —Å–Ω–∏–∑—É",
        "side_view": "–≤–∏–¥ —Å–±–æ–∫—É"
    }
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–º—è—Ç–∏ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ë–î)
user_data = {}

# –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
def category_menu():
    kb = types.InlineKeyboardMarkup(row_width=2)
    for key, name in CATEGORY_NAMES.items():
        kb.add(types.InlineKeyboardButton(name, callback_data=f"cat_{key}"))
    kb.add(types.InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="done_tags"))
    return kb

# –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–µ–≥–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
def tag_menu(category, selected_tags):
    kb = types.InlineKeyboardMarkup(row_width=2)
    if category not in TAGS:
        return kb
    for tag, prompt in TAGS[category].items():
        text = f"{tag} ‚úÖ" if tag in selected_tags else tag
        kb.add(types.InlineKeyboardButton(text, callback_data=f"tag_{category}_{tag}"))
    kb.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_cat"))
    return kb

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(
        types.InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥–∏", callback_data="choose_tags"),
        types.InlineKeyboardButton("‚ñ∂ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="generate")
    )
    return kb

# –°—Ç—Ä–æ–∏–º –ø—Ä–æ–º—Ç –∏–∑ —Ç–µ–≥–æ–≤ ‚Äî –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤, —Å —Ç–æ—á–Ω—ã–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º
def build_prompt(tags):
    prompt_parts = []
    # –î–æ–±–∞–≤–∏–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º—Ç—ã –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, –µ—Å–ª–∏ –µ—Å—Ç—å
    if any(tag in TAGS["characters"] for tag in tags):
        for tag in tags:
            if tag in TAGS["characters"]:
                prompt_parts.append(TAGS["characters"][tag])
        # –£–¥–∞–ª—è–µ–º —Ç–µ–≥–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
        tags = [t for t in tags if t not in TAGS["characters"]]
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏
    for tag in tags:
        # –ò—â–µ–º –≤ –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ–≥
        found = False
        for cat, cat_tags in TAGS.items():
            if tag in cat_tags and tag not in prompt_parts:
                prompt_parts.append(cat_tags[tag])
                found = True
                break
        if not found:
            prompt_parts.append(tag)  # –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥ –∫–∞–∫ –µ—Å—Ç—å
    return ", ".join(prompt_parts)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ replicate
def replicate_generate(prompt):
    url = "https://api.replicate.com/v1/predictions"
    headers = {
        "Authorization": f"Token {REPLICATE_TOKEN}",
        "Content-Type": "application/json"
    }
    json_data = {
        "version": REPLICATE_MODEL,
        "input": {"prompt": prompt}
    }
    try:
        r = requests.post(url, headers=headers, json=json_data)
        if r.status_code != 201:
            return None
        status_url = r.json()["urls"]["get"]

        for _ in range(60):
            time.sleep(2)
            r = requests.get(status_url, headers=headers)
            if r.status_code != 200:
                return None
            data = r.json()
            if data["status"] == "succeeded":
                return data["output"][0] if isinstance(data["output"], list) else data["output"]
            elif data["status"] == "failed":
                return None
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        return None

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ /start
@bot.message_handler(commands=["start"])
def start(message):
    cid = message.chat.id
    user_data[cid] = {"tags": [], "last_cat": None}
    bot.send_message(cid, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏ —Ç–µ–≥–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", reply_markup=category_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    cid = call.message.chat.id
    if cid not in user_data:
        user_data[cid] = {"tags": [], "last_cat": None}
    data = call.data
    tags = user_data[cid]["tags"]

    if data == "choose_tags":
        bot.edit_message_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–µ–≥–æ–≤:", cid, call.message.message_id, reply_markup=category_menu())

    elif data.startswith("cat_"):
        cat = data[4:]
        if cat not in TAGS:
            bot.answer_callback_query(call.id, "–ü—É—Å—Ç–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–ª–∏ –æ—à–∏–±–∫–∞.")
            return
        user_data[cid]["last_cat"] = cat
        bot.edit_message_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {CATEGORY_NAMES.get(cat, cat)}", cid, call.message.message_id, reply_markup=tag_menu(cat, tags))

    elif data.startswith("tag_"):
        _, cat, tag = data.split("_", 2)
        if tag in tags:
            tags.remove(tag)
        else:
            tags.append(tag)
        bot.edit_message_reply_markup(cid, call.message.message_id, reply_markup=tag_menu(cat, tags))

    elif data == "back_to_cat":
        bot.edit_message_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–µ–≥–æ–≤:", cid, call.message.message_id, reply_markup=category_menu())

    elif data == "done_tags":
        bot.edit_message_text("–¢–µ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", cid, call.message.message_id, reply_markup=main_menu())

    elif data == "generate":
        if not tags:
            bot.answer_callback_query(call.id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏.")
            return
        prompt = build_prompt(tags)
        bot.edit_message_text("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", cid, call.message.message_id)
        url = replicate_generate(prompt)
        if url:
            kb = types.InlineKeyboardMarkup(row_width=1)
            kb.add(
                types.InlineKeyboardButton("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start_over"),
                types.InlineKeyboardButton("üîß –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥–∏", callback_data="choose_tags"),
                types.InlineKeyboardButton("‚û° –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —ç—Ç–∏–º–∏ —Ç–µ–≥–∞–º–∏", callback_data="generate")
            )
            bot.send_photo(cid, url, caption=f"‚úÖ –ì–æ—Ç–æ–≤–æ!\n–ü—Ä–æ–º—Ç: {prompt}", reply_markup=kb)
        else:
            bot.send_message(cid, "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    elif data == "start_over":
        user_data[cid] = {"tags": [], "last_cat": None}
        bot.send_message(cid, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ.", reply_markup=category_menu())

    else:
        bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()