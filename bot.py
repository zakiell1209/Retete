import os, time, requests
from flask import Flask, request
import telebot
from telebot import types

API_TOKEN = os.getenv("TELEGRAM_TOKEN")
REPLICATE_TOKEN = os.getenv("REPLICATE_API_TOKEN")
REPLICATE_MODEL = "057e2276ac5dcd8d1575dc37b131f903df9c10c41aed53d47cd7d4f068c19fa5"
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.getenv("PORT", 5000))

bot = telebot.TeleBot(API_TOKEN)
app = Flask(__name__)
user_settings = {}

NEG_PROMPT = (
    "male, man, penis, testicles, muscular male, hands on chest, hands covering nipples, "
    "hand on breast, censored clothes, bra, panties, blur, lowres, watermark, text"
)

CATEGORY_NAMES = {
 "holes": "–û—Ç–≤–µ—Ä—Å—Ç–∏—è", "toys": "–ò–≥—Ä—É—à–∫–∏", "poses": "–ü–æ–∑—ã", "clothes": "–û–¥–µ–∂–¥–∞",
 "body": "–¢–µ–ª–æ", "ethnos": "–≠—Ç–Ω–æ—Å", "furry": "–§—É—Ä–∏", "characters": "–ü–µ—Ä—Å–æ–Ω–∞–∂–∏",
 "head": "–ì–æ–ª–æ–≤–∞", "view": "–û–±–∑–æ—Ä"
}

TAGS = {
 "holes": {
     "vagina": "–í–∞–≥–∏–Ω–∞", "anal": "–ê–Ω—É—Å", "both": "–í–∞–≥–∏–Ω–∞+–ê–Ω–∞–ª"
 },
 "toys": {
     "dildo": "–î–∏–ª–¥–æ", "huge_dildo": "–ë–æ–ª—å—à–æ–µ –¥–∏–ª–¥–æ", "horse_dildo": "–õ–æ—à–∞–¥–∏–Ω–æ–µ –¥–∏–ª–¥–æ",
     "anal_beads": "–ê–Ω–∞–ª—å–Ω—ã–µ –±—É—Å—ã", "anal_plug": "–ê–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–±–∫–∞",
     "anal_expander": "–ê–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—à–∏—Ä–∏—Ç–µ–ª—å", "gag": "–ö–ª—è–ø", "piercing": "–ü–∏—Ä—Å–∏–Ω–≥",
     "long_dildo_path": "–î–∏–ª–¥–æ —Å–∫–≤–æ–∑—å —Ç–µ–ª–æ"
 },
 "poses": {
     "doggy": "–ü–æ–∑. –î–æ–≥–≥–∏", "standing": "–°—Ç–æ—è", "squat": "–ü—Ä–∏—Å–µ–¥",
     "lying": "–õ–µ–∂–∞", "ver_split": "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç", "hor_split": "–ì–æ—Ä–∏–∑. —à–ø–∞–≥–∞—Ç",
     "bridge": "–ú–æ—Å—Ç", "suspended": "–ü–æ–¥–≤–µ—à–µ–Ω–∞", "side_up_leg": "–ù–∞ –±–æ–∫—É+–Ω–æ–≥—É"
 },
 "clothes": {
     "stockings": "–ß—É–ª–∫–∏", "shibari": "–®–∏–±–∞—Ä–∏", "heels": "–ö–∞–±–ª—É–∫–∏",
     "bikini_tan_lines": "–ó–∞–≥–∞—Ä –æ—Ç –±–∏–∫–∏–Ω–∏"
 },
 "body": {
     "big_breasts": "–ë–æ–ª—å—à–∞—è –≥—Ä—É–¥—å", "small_breasts": "–ú–∞–ª–µ–Ω—å–∫–∞—è –≥—Ä—É–¥—å",
     "body_thin": "–•—É–¥–æ–µ —Ç–µ–ª–æ", "body_fat": "–ü—ã—à–Ω–æ–µ —Ç–µ–ª–æ",
     "skin_white": "–ë–µ–ª–∞—è –∫–æ–∂–∞", "skin_black": "–ß—ë—Ä–Ω–∞—è –∫–æ–∂–∞",
     "cum": "–í —Å–ø–µ—Ä–º–µ", "belly_bloat": "–í–∑–¥—É—Ç–∏–µ –∂–∏–≤–æ—Ç–∞",
     "succubus_tattoo": "–¢–∞—Ç—É –Ω–∞ –∂–∏–≤–æ—Ç–µ"
 },
 "ethnos": {
     "futanari": "–§—É—Ç–∞–Ω–∞—Ä–∏", "femboy": "–§–µ–º–±–æ–π",
     "ethnicity_asian": "–ê–∑–∏–∞—Ç–∫–∞", "ethnicity_european": "–ï–≤—Ä–æ–ø–µ–π–∫–∞"
 },
 "furry": {
     "furry_cow": "–§—É—Ä–∏‚Äë–∫–æ—Ä–æ–≤–∞", "furry_fox": "–§—É—Ä–∏‚Äë–ª–∏—Å–∏—Ü–∞",
     "furry_wolf": "–§—É—Ä–∏‚Äë–≤–æ–ª—á–∏—Ü–∞"
 },
 "characters": {
     "rias": "–†–∏–∞—Å –ì—Ä–µ–º–æ—Ä–∏", "akeno": "–ê–∫–µ–Ω–æ –•–∏–º—ç–¥–∑–∏–º–∞",
     "kafka": "–ö–∞—Ñ–∫–∞ (–•–æ–Ω–∫–∞–π)", "eula": "–ï–æ–ª–∞ (–ì–µ–Ω—à–∏–Ω)",
     "fu_xuan": "–§—É –°—é–∞–Ω—å", "ayase": "–ê—è—Å–µ –°–µ–π–∫–æ",
     "kiana": "–ö–∏–∞–Ω–∞ (LoL)", "yor_forger": "–ô–æ—Ä –§–æ—Ä–∂–µ—Ä",
     "esdeath": "–≠—Å–¥–µ—Å", "asia_argento": "–ê—Å–∏—è",
     "koneko": "–ö–æ–Ω–µ–∫–æ", "chun_li": "–ß—É–Ω –õ–∏", "2b": "2B (NieR)"
 },
 "head": {
     "ahegao": "–ê—Ö–µ–≥–∞–æ", "pain_face": "–õ–∏—Ü–æ –≤ –±–æ–ª–∏",
     "ecstasy_face": "–õ–∏—Ü–æ –≤ —ç–∫—Å—Ç–∞–∑–µ", "gold_lipstick": "–ó–æ–ª–æ—Ç–∞—è –ø–æ–º–∞–¥–∞"
 },
 "view": {
     "view_top": "–°–≤–µ—Ä—Ö—É", "view_bottom": "–°–Ω–∏–∑—É",
     "view_side": "–°–±–æ–∫—É", "view_close": "–ö—Ä—É–ø–Ω—ã–π –ø–ª–∞–Ω",
     "view_full": "–ü–æ–ª–Ω—ã–π —Ä–æ—Å—Ç"
 }
}

def start(msg):
    cid = msg.chat.id
    user_settings[cid] = {"tags": [], "count": 1}
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üß© –¢–µ–≥–∏", callback_data="tags"))
    markup.add(types.InlineKeyboardButton("üé® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="generate"))
    bot.send_message(cid, "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –¥–µ–ª–∞–µ–º?", reply_markup=markup)

@bot.callback_query_handler(func=lambda c: True)
def callback(call):
    cid, data = call.message.chat.id, call.data
    user = user_settings.setdefault(cid, {"tags": [], "count": 1})

    if data == "tags": show_categories(call)
    elif data.startswith("cat_"): show_tags(call, data[4:])
    elif data.startswith("tag_"):
        _, cat, tag = data.split("_",2)
        tags = user["tags"]
        tags.append(tag) if tag not in tags else tags.remove(tag)
        show_tags(call, cat)
    elif data == "done_tags": bot.edit_message_text("–¢–µ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!", cid, call.message.message_id, reply_markup=main_markup())
    elif data == "generate": do_generate(cid)
    elif data == "start_over": start(call.message)
    elif data == "edit_tags": show_categories(call)

def show_categories(call):
    cid, mid = call.message.chat.id, call.message.message_id
    kb=types.InlineKeyboardMarkup(row_width=2)
    for k,v in CATEGORY_NAMES.items():
        kb.add(types.InlineKeyboardButton(v, callback_data=f"cat_{k}"))
    kb.add(types.InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="done_tags"))
    bot.edit_message_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", cid, mid, reply_markup=kb)

def show_tags(call, cat):
    cid, mid = call.message.chat.id, call.message.message_id
    sel = user_settings[cid]["tags"]
    kb=types.InlineKeyboardMarkup(row_width=2)
    for tk, lbl in TAGS[cat].items():
        pre = "‚úÖ " if tk in sel else ""
        kb.add(types.InlineKeyboardButton(pre+lbl, callback_data=f"tag_{cat}_{tk}"))
    kb.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="tags"))
    bot.edit_message_text(CATEGORY_NAMES[cat], cid, mid, reply_markup=kb)

def main_markup():
    kb=types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üß© –¢–µ–≥–∏", callback_data="tags"))
    kb.add(types.InlineKeyboardButton("üé® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="generate"))
    return kb

def do_generate(cid):
    user = user_settings[cid]
    if not user["tags"]:
        return bot.send_message(cid, "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–µ–≥–∏!")
    count = max(1, min(user.get("count",1), 4))
    prompt = build_prompt(user["tags"])
    urls = replicate_generate(prompt,count)
    if not urls:
        return bot.send_message(cid, "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
    media=[types.InputMediaPhoto(u) for u in urls]
    bot.send_media_group(cid, media)
    kb=types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start_over"))
    kb.add(types.InlineKeyboardButton("üîß –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥–∏", callback_data="edit_tags"))
    kb.add(types.InlineKeyboardButton("‚û° –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="generate"))
    bot.send_message(cid, "‚úÖ –ì–æ—Ç–æ–≤–æ!", reply_markup=kb)

def build_prompt(tags):
    base = "nsfw, masterpiece, best quality, fully nude, solo female, anime style"
    for t in tags:
        base += ", " + TAGS[next(cat for cat in CATEGORY_NAMES if t in TAGS[cat])][t]
    return base

def replicate_generate(prompt, n):
    url = "https://api.replicate.com/v1/predictions"
    headers={"Authorization":f"Token {REPLICATE_TOKEN}","Content-Type":"application/json"}
    j={"version":REPLICATE_MODEL,"input":{"prompt":prompt,"negative_prompt":NEG_PROMPT,"num_outputs":n}}
    r=requests.post(url,headers=headers,json=j)
    if r.status_code!=201: return []
    su = r.json()["urls"]["get"]
    for _ in range(40):
        time.sleep(2)
        r=requests.get(su,headers=headers)
        if r.status_code!=200: return []
        d=r.json()
        if d["status"]=="succeeded": return d["output"] if isinstance(d["output"],list) else [d["output"]]
        if d["status"]=="failed": return []
    return []

@app.route("/",methods=["POST"])
def webhook():
    update=telebot.types.Update.de_json(request.stream.read().decode(),bot)
    bot.process_new_updates([update])
    return "ok",200

@app.route("/",methods=["GET"])
def home():
    return "–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç",200

if __name__=="__main__":
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)
    app.run(host="0.0.0.0",port=PORT)