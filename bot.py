import os
import time
import requests
from flask import Flask, request
import telebot
from telebot import types

API_TOKEN = os.getenv("TELEGRAM_TOKEN")
REPLICATE_TOKEN = os.getenv("REPLICATE_API_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.environ.get("PORT", 5000))

REPLICATE_MODEL = "c1d5b02687df6081c7953c74bcc527858702e8c153c9382012ccc3906752d3ec"

bot = telebot.TeleBot(API_TOKEN)
app = Flask(__name__)
user_settings = {}

CATEGORY_NAMES = {
    "holes": "–û—Ç–≤–µ—Ä—Å—Ç–∏—è",
    "toys": "–ò–≥—Ä—É—à–∫–∏",
    "poses": "–ü–æ–∑—ã",
    "clothes": "–û–¥–µ–∂–¥–∞",
    "body": "–¢–µ–ª–æ",
    "ethnos": "–≠—Ç–Ω–æ—Å",
    "furry": "–§—É—Ä–∏",
    "characters": "–ü–µ—Ä—Å–æ–Ω–∞–∂–∏",
    "head": "–ì–æ–ª–æ–≤–∞",
    "view": "–û–±–∑–æ—Ä"
}

TAGS = {
    "holes": {
        "vagina": "–í–∞–≥–∏–Ω–∞",
        "anal": "–ê–Ω—É—Å",
        "both": "–í–∞–≥–∏–Ω–∞ –∏ –∞–Ω—É—Å"
    },
    "toys": {
        "dildo": "–î–∏–ª–¥–æ",
        "huge_dildo": "–ë–æ–ª—å—à–æ–µ –¥–∏–ª–¥–æ",
        "horse_dildo": "–õ–æ—à–∞–¥–∏–Ω–æ–µ –¥–∏–ª–¥–æ",
        "anal_beads": "–ê–Ω–∞–ª—å–Ω—ã–µ –±—É—Å—ã",
        "anal_plug": "–ê–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–±–∫–∞",
        "anal_expander": "–ê–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—à–∏—Ä–∏—Ç–µ–ª—å",
        "gag": "–ö–ª—è–ø",
        "piercing": "–ü–∏—Ä—Å–∏–Ω–≥",
        "long_dildo_path": "–î–∏–ª–¥–æ –∏–∑ –∞–Ω—É—Å–∞ –≤—ã—Ö–æ–¥–∏—Ç –∏–∑–æ —Ä—Ç–∞"
    },
    "poses": {
        "doggy": "–ù–∞–µ–∑–¥–Ω–∏—Ü–∞ (–¥–æ–≥–≥–∏-—Å—Ç–∞–π–ª)",
        "standing": "–°—Ç–æ—è",
        "splits": "–®–ø–∞–≥–∞—Ç",
        "squat": "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏–µ",
        "lying": "–õ–µ–∂–∞",
        "hor_split": "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç",
        "ver_split": "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç",
        "side_up_leg": "–ù–∞ –±–æ–∫—É —Å –ø–æ–¥–Ω—è—Ç–æ–π –Ω–æ–≥–æ–π",
        "front_facing": "–õ–∏—Ü–æ–º –∫ –∑—Ä–∏—Ç–µ–ª—é",
        "back_facing": "–°–ø–∏–Ω–æ–π –∫ –∑—Ä–∏—Ç–µ–ª—é",
        "lying_knees_up": "–õ–µ–∂–∞ —Å —Å–æ–≥–Ω—É—Ç—ã–º–∏ –∫–æ–ª–µ–Ω—è–º–∏",
        "bridge": "–ú–æ—Å—Ç",
        "suspended": "–ü–æ–¥–≤–µ—à–µ–Ω–∞"
    },
    "clothes": {
        "stockings": "–ß—É–ª–∫–∏",
        "bikini_tan_lines": "–ó–∞–≥–∞—Ä –æ—Ç –±–∏–∫–∏–Ω–∏",
        "mask": "–ú–∞—Å–∫–∞",
        "heels": "–ö–∞–±–ª—É–∫–∏",
        "shibari": "–®–∏–±–∞—Ä–∏"
    },
    "body": {
        "big_breasts": "–ë–æ–ª—å—à–∞—è –≥—Ä—É–¥—å",
        "small_breasts": "–ú–∞–ª–µ–Ω—å–∫–∞—è –≥—Ä—É–¥—å",
        "skin_white": "–ë–µ–ª–∞—è –∫–æ–∂–∞",
        "skin_black": "–ß—ë—Ä–Ω–∞—è –∫–æ–∂–∞",
        "body_fat": "–ü—ã—à–Ω–æ–µ —Ç–µ–ª–æ",
        "body_thin": "–•—É–¥–æ–µ —Ç–µ–ª–æ",
        "body_normal": "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ç–µ–ª–æ",
        "body_fit": "–ü–æ–¥—Ç—è–Ω—É—Ç–æ–µ —Ç–µ–ª–æ",
        "body_muscular": "–ú—É—Å–∫—É–ª–∏—Å—Ç–æ–µ —Ç–µ–ª–æ",
        "age_loli": "–õ–æ–ª–∏",
        "age_milf": "–ú–∏–ª—Ñ–∞",
        "age_21": "–í–æ–∑—Ä–∞—Å—Ç 21",
        "cum": "–í—Å—è –≤ —Å–ø–µ—Ä–º–µ",
        "belly_bloat": "–í–∑–¥—É—Ç–∏–µ –∂–∏–≤–æ—Ç–∞",
        "succubus_tattoo": "–¢–∞—Ç—É –≤–Ω–∏–∑—É –∂–∏–≤–æ—Ç–∞"
    },
    "ethnos": {
        "futanari": "–§—É—Ç–∞–Ω–∞—Ä–∏",
        "femboy": "–§–µ–º–±–æ–π",
        "ethnicity_asian": "–ê–∑–∏–∞—Ç–∫–∞",
        "ethnicity_european": "–ï–≤—Ä–æ–ø–µ–π–∫–∞"
    },
    "furry": {
        "furry_cow": "–§—É—Ä–∏ –∫–æ—Ä–æ–≤–∞",
        "furry_cat": "–§—É—Ä–∏ –∫–æ—à–∫–∞",
        "furry_dog": "–§—É—Ä–∏ —Å–æ–±–∞–∫–∞",
        "furry_dragon": "–§—É—Ä–∏ –¥—Ä–∞–∫–æ–Ω",
        "furry_sylveon": "–§—É—Ä–∏ —Å–∏–ª—å–≤–µ–æ–Ω",
        "furry_fox": "–§—É—Ä–∏ –ª–∏—Å–∏—Ü–∞",
        "furry_bunny": "–§—É—Ä–∏ –∫—Ä–æ–ª–∏–∫",
        "furry_wolf": "–§—É—Ä–∏ –≤–æ–ª—á–∏—Ü–∞"
    },
    "characters": {
        "rias": "–†–∏–∞—Å –ì—Ä–µ–º–æ—Ä–∏",
        "akeno": "–ê–∫–µ–Ω–æ –•–∏–º–µ–¥–∑–∏–º–∞",
        "kafka": "–ö–∞—Ñ–∫–∞ (–•–æ–Ω–∫–∞–π)",
        "eula": "–ï–æ–ª–∞ (–ì–µ–Ω—à–∏–Ω)",
        "fu_xuan": "–§—É –°—é–∞–Ω—å (–•–æ–Ω–∫–∞–π)",
        "ayase": "–ê—è—Å–µ –°–µ–π–∫–æ"
    },
    "head": {
        "ahegao": "–ê—Ö–µ–≥–∞–æ",
        "pain_face": "–õ–∏—Ü–æ –≤ –±–æ–ª–∏",
        "ecstasy_face": "–õ–∏—Ü–æ –≤ —ç–∫—Å—Ç–∞–∑–µ",
        "gold_lipstick": "–ó–æ–ª–æ—Ç–∞—è –ø–æ–º–∞–¥–∞"
    },
    "view": {
        "view_below": "–°–Ω–∏–∑—É",
        "view_above": "–°–≤–µ—Ä—Ö—É",
        "view_side": "–°–±–æ–∫—É",
        "view_far": "–î–∞–ª—å—à–µ",
        "view_close": "–ë–ª–∏–∂–µ"
    }
}

CHARACTER_EXTRA = {
    "rias": "red long hair, blue eyes, pale skin, large breasts, rias gremory, highschool dxd",
    "akeno": "long black hair, purple eyes, large breasts, akeno himejima, highschool dxd",
    "kafka": "purple wavy hair, cold expression, kafka, honkai star rail",
    "eula": "light blue hair, fair skin, eula, genshin impact",
    "fu_xuan": "pink hair, fu xuan, honkai star rail",
    "ayase": "black hair, school uniform, ayase seiko"
}

TAG_PROMPTS = {
    **CHARACTER_EXTRA,
    "vagina": "spread pussy",
    "anal": "spread anus",
    "both": "spread pussy and anus",
    "dildo": "dildo inserted",
    "huge_dildo": "huge dildo",
    "horse_dildo": "horse dildo",
    "anal_beads": "anal beads inserted",
    "anal_plug": "anal plug",
    "anal_expander": "anal expander stretching anus",
    "gag": "ball gag",
    "piercing": "nipple and genital piercings",
    "long_dildo_path": (
        "dildo inserted into anus, pushing visibly through intestines with clear belly bulge, "
        "exiting from mouth, seamless and continuous dildo, consistent texture, realistic rubber"
    ),
    "doggy": "doggy style",
    "standing": "standing pose",
    "splits": "doing a split",
    "hor_split": (
        "one girl horizontal split, legs fully stretched on floor, pelvis touching floor, "
        "thighs spread open, inner thighs visible, no raised legs, realistic pose"
    ),
    "ver_split": (
        "one girl vertical split, legs straight up and down, pelvis aligned, realistic pose"
    ),
    "side_up_leg": "on side with leg raised",
    "front_facing": "facing viewer",
    "back_facing": "back to viewer",
    "lying_knees_up": "legs up, knees bent",
    "bridge": "arched back bridge pose",
    "suspended": "suspended by ropes, no male figure visible",
    "stockings": "wearing stockings only",
    "mask": "mask on face",
    "heels": "high heels with red soles",
    "shibari": "shibari ropes binding body, no hands covering breasts or genitals",
    "big_breasts": "very large breasts, fully visible, no hands covering",
    "small_breasts": "small breasts",
    "skin_white": "white skin",
    "skin_black": "black skin",
    "body_fat": "curvy body",
    "body_thin": "thin body",
    "body_normal": "average body",
    "body_fit": "fit body",
    "body_muscular": "muscular body",
    "age_loli": "loli",
    "age_milf": "milf",
    "age_21": "age 21",
    "cum": "cum covered",
    "belly_bloat": "belly bulge from toy",
    "succubus_tattoo": "succubus tattoo on lower abdomen",
    "futanari": "futanari girl with large breasts, erect penis, fully visible",
    "femboy": "femboy with feminine body",
    "ethnicity_asian": "asian girl",
    "ethnicity_european": "european girl",
    "furry_cow": "furry cow girl",
    "furry_cat": "furry cat girl",
    "furry_dog": "furry dog girl",
    "furry_dragon": "furry dragon girl",
    "furry_sylveon": "furry sylveon, pink, ribbons, sexy",
    "furry_fox": "furry fox girl",
    "furry_bunny": "furry bunny girl",
    "furry_wolf": "furry wolf girl",
    "ahegao": "ahegao face",
    "pain_face": "face in pain",
    "ecstasy_face": "face in ecstasy",
    "gold_lipstick": "gold lipstick on lips only"
}

# Negative prompts to reduce undesired elements (like hands on chest)
NEGATIVE_PROMPT = (
    "hands covering breasts, hands covering nipples, hands covering genitals, "
    "two girls, multiple girls, men in background, male figure, "
    "blurred, distorted, low quality, text, watermark"
)

def main_menu():
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üß© –í—ã–±—Ä–∞—Ç—å —Ç–µ–≥–∏", callback_data="choose_tags"))
    kb.add(types.InlineKeyboardButton("üé® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="generate"))
    return kb

def category_menu():
    kb = types.InlineKeyboardMarkup(row_width=2)
    for key, name in CATEGORY_NAMES.items():
        kb.add(types.InlineKeyboardButton(name, callback_data=f"cat_{key}"))
    kb.add(types.InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="done_tags"))
    return kb

def tag_menu(category, selected_tags):
    kb = types.InlineKeyboardMarkup(row_width=2)
    for tag_key, tag_name in TAGS[category].items():
        label = f"‚úÖ {tag_name}" if tag_key in selected_tags else tag_name
        kb.add(types.InlineKeyboardButton(label, callback_data=f"tag_{category}_{tag_key}"))
    kb.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_cat"))
    return kb

@bot.message_handler(commands=["start"])
def start(msg):
    cid = msg.chat.id
    user_settings[cid] = {"tags": [], "last_cat": None}
    bot.send_message(cid, "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –¥–µ–ª–∞–µ–º?", reply_markup=main_menu())

@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    cid = call.message.chat.id
    if cid not in user_settings:
        user_settings[cid] = {"tags": [], "last_cat": None}

    data = call.data

    if data == "choose_tags":
        bot.edit_message_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–µ–≥–æ–≤:", cid, call.message.message_id, reply_markup=category_menu())

    elif data.startswith("cat_"):
        cat = data[4:]
        user_settings[cid]["last_cat"] = cat
        selected = user_settings[cid]["tags"]
        bot.edit_message_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {CATEGORY_NAMES[cat]}", cid, call.message.message_id, reply_markup=tag_menu(cat, selected))

    elif data.startswith("tag_"):
        _, cat, tag = data.split("_", 2)
        tags = user_settings[cid]["tags"]
        if tag in tags:
            tags.remove(tag)
        else:
            tags.append(tag)
        bot.edit_message_reply_markup(cid, call.message.message_id, reply_markup=tag_menu(cat, tags))

    elif data == "done_tags":
        bot.edit_message_text("–¢–µ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", cid, call.message.message_id, reply_markup=main_menu())

    elif data == "back_to_cat":
        bot.edit_message_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", cid, call.message.message_id, reply_markup=category_menu())

    elif data == "generate":
        tags = user_settings[cid]["tags"]
        if not tags:
            bot.send_message(cid, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–µ–≥–∏!")
            return
        prompt, negative_prompt = build_prompt(tags)
        user_settings[cid]["last_prompt"] = tags.copy()
        bot.send_message(cid, "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        image_url = replicate_generate(prompt, negative_prompt)
        if image_url:
            kb = types.InlineKeyboardMarkup()
            kb.add(types.InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="choose_tags"))
            kb.add(types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–≥–∏", callback_data="choose_tags"))
            bot.send_photo(cid, image_url, reply_markup=kb)
        else:
            bot.send_message(cid, "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

def build_prompt(tags):
    # –î–æ–±–∞–≤–∏–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ –Ω–∞—á–∞–ª–æ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
    prompt_parts = []
    negative_parts = [NEGATIVE_PROMPT]

    # –°–æ–±–∏—Ä–∞–µ–º –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –ø–æ —Ç–µ–≥–∞–º
    for tag in tags:
        if tag in TAG_PROMPTS:
            prompt_parts.append(TAG_PROMPTS[tag])
        else:
            # –ù–∞ —Å–ª—É—á–∞–π –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–µ–≥–∞ - –ø—Ä–æ—Å—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
            prompt_parts.append(tag)

    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è —à–ø–∞–≥–∞—Ç–æ–≤ –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:
    if "hor_split" in tags:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –¥–µ–≤—É—à–∫–∞ –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–º —à–ø–∞–≥–∞—Ç–µ —Å –Ω–æ–≥–∞–º–∏ –Ω–∞ –ø–æ–ª—É
        prompt_parts.append("one girl horizontal split, legs fully on floor, pelvis touching floor, realistic anatomy, no extra figures")
    if "ver_split" in tags:
        prompt_parts.append("one girl vertical split, legs straight up and down, pelvis aligned, realistic anatomy")
    # –£–±–∏—Ä–∞–µ–º —Ä—É–∫–∏ —Å –≥—Ä—É–¥–∏ –∏ –≥—Ä—É–¥–∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ –æ–±—ä–µ–∫—Ç—ã
    negative_parts.append("hands on breasts, hands covering nipples, clothes covering breasts, objects covering breasts")
    negative_parts.append("hands on vagina or anus")

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø—Ä–∏ –æ–±–∑–æ—Ä–∞—Ö —Ç–µ–≥–∏ –≤–ª–∏—è—é—Ç –Ω–∞ —Ç–æ—á–∫—É –æ–±–∑–æ—Ä–∞
    if "view_far" in tags:
        # –¢—Ä–µ–±—É–µ–º –≤–∏–¥–µ—Ç—å –≤—Å—é —Ñ–∏–≥—É—Ä—É
        prompt_parts.append("full body visible, entire figure in frame, clear view")

    prompt = ", ".join(prompt_parts)
    negative_prompt = ", ".join(negative_parts)
    return prompt, negative_prompt

def replicate_generate(prompt, negative_prompt):
    headers = {
        "Authorization": f"Token {REPLICATE_TOKEN}",
        "Content-Type": "application/json"
    }
    data = {
        "version": REPLICATE_MODEL,
        "input": {
            "prompt": prompt,
            "negative_prompt": negative_prompt,
            "num_inference_steps": 40,
            "guidance_scale": 7.5,
            "width": 512,
            "height": 512,
            "seed": None
        }
    }
    try:
        response = requests.post(
            "https://api.replicate.com/v1/predictions",
            headers=headers,
            json=data,
            timeout=60
        )
        response.raise_for_status()
        prediction = response.json()
        prediction_id = prediction["id"]

        # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        for _ in range(60):
            time.sleep(1)
            status_resp = requests.get(f"https://api.replicate.com/v1/predictions/{prediction_id}", headers=headers)
            status_resp.raise_for_status()
            status_json = status_resp.json()
            if status_json["status"] == "succeeded":
                return status_json["output"][0]
            if status_json["status"] == "failed":
                return None
        return None
    except Exception as e:
        print("Replicate error:", e)
        return None

@app.route("/", methods=["POST"])
def webhook():
    json_str = request.get_data().decode("utf-8")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "", 200

if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)
    app.run(host="0.0.0.0", port=PORT)