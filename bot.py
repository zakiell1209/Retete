import os
import logging
import requests
from flask import Flask, request
from telebot import TeleBot, types

# ‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("TELEGRAM_TOKEN")
REPLICATE_TOKEN = os.getenv("REPLICATE_API_TOKEN")
WEBHOOK_URL = "https://retete.onrender.com"
REPLICATE_MODEL = "aitechtree/nsfw-novel-generation"

bot = TeleBot(API_TOKEN)
app = Flask(__name__)
logging.basicConfig(level=logging.INFO)

# ‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–µ–≥–∏
CATEGORIES = {
    "–ø–µ—Ä—Å–æ–Ω–∞–∂–∏": ["–†–∏–∞—Å –ì—Ä–µ–º–æ—Ä–∏", "–ê–∫–µ–Ω–æ –•–∏–º–µ–¥–∑–∏–º–∞", "–ö–∞—Ñ–∫–∞", "–ï–æ–ª–∞", "–§—É –°—é–∞–Ω—å", "–ê—è—Å–µ –°–µ–π–∫–æ"],
    "–∞–Ω–∏–º–µ/—Ä–µ–∞–ª–∏–∑–º/3D": ["–∞–Ω–∏–º–µ", "—Ä–µ–∞–ª–∏–∑–º", "3D"],
    "–ø–æ–∑—ã": ["–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç", "–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç", "–Ω–∞ –±–æ–∫—É —Å –æ–¥–Ω–æ–π –Ω–æ–≥–æ–π –≤–≤–µ—Ä—Ö", "–ª—ë–∂–∞ –Ω–∞ —Å–ø–∏–Ω–µ —Å —Ä–∞–∑–¥–≤–∏–Ω—É—Ç—ã–º–∏ –Ω–æ–≥–∞–º–∏", "–º–æ—Å—Ç", "–ø–æ–¥–≤–µ—à–µ–Ω–Ω–∞—è –Ω–∞ –≤–µ—Ä—ë–≤–∫–∞—Ö"],
    "–æ—Ç–≤–µ—Ä—Å—Ç–∏—è": ["–≤–∞–≥–∏–Ω–∞", "–∞–Ω—É—Å", "—Ä–æ—Ç"],
    "–∏–≥—Ä—É—à–∫–∏": ["–¥–∏–ª–¥–æ", "–∞–Ω–∞–ª—å–Ω—ã–π –∫—Ä—é–∫", "–¥–∏–ª–¥–æ –∏–∑ –∞–Ω—É—Å–∞ –≤—ã—Ö–æ–¥–∏—Ç –∏–∑–æ —Ä—Ç–∞"],
    "–æ–¥–µ–∂–¥–∞": ["–≥–æ–ª–∞—è", "–≤ –Ω–∏–∂–Ω–µ–º –±–µ–ª—å–µ", "–≤ —á—É–ª–∫–∞—Ö", "–≤ –æ—à–µ–π–Ω–∏–∫–µ"],
    "–∫–æ–∂–∞/—ç—Ç–Ω–æ—Å": ["–±–µ–ª–∞—è –∫–æ–∂–∞", "–∑–∞–≥–∞—Ä", "—Ç—ë–º–Ω–∞—è –∫–æ–∂–∞"],
    "–≥–æ–ª–æ–≤–∞": ["–∞—Ö–µ–≥–∞–æ", "–ª–∏—Ü–æ –≤ –±–æ–ª–∏", "–ª–∏—Ü–æ –≤ —ç–∫—Å—Ç–∞–∑–µ", "–∑–æ–ª–æ—Ç–∞—è –ø–æ–º–∞–¥–∞"],
    "—Ñ—É—Ä–∏": ["–ª–∏—Å–∏—Ü–∞", "–∫—Ä–æ–ª–∏–∫", "–≤–æ–ª—á–∏—Ü–∞"],
    "—Å—Ü–µ–Ω–∞": ["–ª–∏—Ü–æ–º –∫ –∑—Ä–∏—Ç–µ–ª—é", "—Å–ø–∏–Ω–æ–π –∫ –∑—Ä–∏—Ç–µ–ª—é", "–≤–∏–¥ —Å–Ω–∏–∑—É", "–≤–∏–¥ —Å–≤–µ—Ä—Ö—É", "–≤–∏–¥ —Å–±–æ–∫—É", "–±–ª–∏–∂–µ", "–¥–∞–ª—å—à–µ"]
}

user_tags = {}

# ‚úÖ –°–±–æ—Ä–∫–∞ –ø—Ä–æ–º–ø—Ç–∞
def build_prompt(tags):
    base = []
    for tag in tags:
        if tag == "–¥–∏–ª–¥–æ –∏–∑ –∞–Ω—É—Å–∞ –≤—ã—Ö–æ–¥–∏—Ç –∏–∑–æ —Ä—Ç–∞":
            base.append("dildo from anus through mouth, single piece, no x-ray, full object")
        elif tag == "–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç":
            base.append("full body view, female in horizontal split, legs straight, on floor, realistic anatomy")
        elif tag == "–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç":
            base.append("full body view, female in vertical split, one leg up, perfect form")
        elif tag in CATEGORIES["–ø–µ—Ä—Å–æ–Ω–∞–∂–∏"]:
            if tag == "–†–∏–∞—Å –ì—Ä–µ–º–æ—Ä–∏":
                base.append("Rias Gremory from High School DxD, red long hair, blue eyes, anime style")
            elif tag == "–ê–∫–µ–Ω–æ –•–∏–º–µ–¥–∑–∏–º–∞":
                base.append("Akeno Himejima from High School DxD, black long hair, purple eyes, anime style")
            elif tag == "–ö–∞—Ñ–∫–∞":
                base.append("Kafka from Honkai Star Rail, violet eyes, wavy hair")
            elif tag == "–ï–æ–ª–∞":
                base.append("Eula from Genshin Impact, ice blue hair, warrior outfit")
            elif tag == "–§—É –°—é–∞–Ω—å":
                base.append("Fu Xuan from Honkai Star Rail, pink twin tails, elegant outfit")
            elif tag == "–ê—è—Å–µ –°–µ–π–∫–æ":
                base.append("Seiko Ayase, straight long black hair, schoolgirl theme")
        else:
            base.append(tag)
    # –°—Ç—Ä–æ–≥–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    block = ["clothes", "hands covering", "censored", "blur", "shadows over genitals"]
    return ", ".join(base + ["nsfw, uncensored, full detail"] + [f"no {b}" for b in block])

# ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def generate_image(prompt):
    response = requests.post(
        "https://api.replicate.com/v1/predictions",
        headers={
            "Authorization": f"Token {REPLICATE_TOKEN}",
            "Content-Type": "application/json"
        },
        json={
            "version": REPLICATE_MODEL,
            "input": {"prompt": prompt}
        }
    )
    output = response.json()
    return output.get("urls", {}).get("get", None)

# ‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–µ–≥–æ–≤
def build_keyboard(category, selected):
    keyboard = types.InlineKeyboardMarkup()
    for tag in CATEGORIES[category]:
        mark = "‚úÖ" if tag in selected else ""
        keyboard.add(types.InlineKeyboardButton(f"{mark} {tag}", callback_data=f"tag:{tag}"))
    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"))
    return keyboard

# ‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
def category_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    for category in CATEGORIES:
        keyboard.add(types.InlineKeyboardButton(category.title(), callback_data=f"cat:{category}"))
    keyboard.add(types.InlineKeyboardButton("‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="generate"))
    return keyboard

# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=["start"])
def handle_start(message):
    user_tags[message.chat.id] = set()
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–µ–≥–æ–≤:", reply_markup=category_keyboard())

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    cid = call.message.chat.id
    data = call.data

    if data.startswith("cat:"):
        category = data.split(":", 1)[1]
        selected = user_tags.get(cid, set())
        bot.edit_message_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category.title()}:",
            chat_id=cid,
            message_id=call.message.message_id,
            reply_markup=build_keyboard(category, selected)
        )

    elif data.startswith("tag:"):
        tag = data.split(":", 1)[1]
        tags = user_tags.setdefault(cid, set())
        if tag in tags:
            tags.remove(tag)
        else:
            tags.add(tag)
        category = next((k for k, v in CATEGORIES.items() if tag in v), "–∫–∞—Ç–µ–≥–æ—Ä–∏—è")
        bot.edit_message_reply_markup(
            cid,
            call.message.message_id,
            reply_markup=build_keyboard(category, tags)
        )

    elif data == "back":
        bot.edit_message_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–µ–≥–æ–≤:", cid, call.message.message_id, reply_markup=category_keyboard())

    elif data == "generate":
        tags = user_tags.get(cid, set())
        prompt = build_prompt(tags)
        bot.edit_message_text("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ‚Ä¶", cid, call.message.message_id)
        image_url = generate_image(prompt)
        if image_url:
            bot.send_photo(cid, image_url, caption="–í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç!", reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("üîÅ –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥–∏", callback_data="back"),
                types.InlineKeyboardButton("üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="generate")
            ))
        else:
            bot.send_message(cid, "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# ‚úÖ Webhook
@app.route("/", methods=["POST"])
def webhook():
    bot.process_new_updates([types.Update.de_json(request.stream.read().decode("utf-8"))])
    return "ok", 200

# ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
bot.remove_webhook()
bot.set_webhook(url=WEBHOOK_URL)

# ‚úÖ –ó–∞–ø—É—Å–∫ Flask
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))