import os
import time
import requests
from flask import Flask, request
import telebot
from telebot import types

API_TOKEN = os.getenv("TELEGRAM_TOKEN")
REPLICATE_TOKEN = os.getenv("REPLICATE_API_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.environ.get("PORT", 5000))

REPLICATE_MODEL = "c1d5b02687df6081c7953c74bcc527858702e8c153c9382012ccc3906752d3ec"

bot = telebot.TeleBot(API_TOKEN)
app = Flask(__name__)
user_settings = {}

TAGS = {
    "holes": {
        "vagina": "–í–∞–≥–∏–Ω–∞",
        "anal": "–ê–Ω—É—Å",
        "both": "–í–∞–≥–∏–Ω–∞ –∏ –∞–Ω—É—Å"
    },
    "toys": {
        "dildo": "–î–∏–ª–¥–æ",
        "huge_dildo": "–ë–æ–ª—å—à–æ–µ –¥–∏–ª–¥–æ",
        "horse_dildo": "–õ–æ—à–∞–¥–∏–Ω–æ–µ –¥–∏–ª–¥–æ",
        "anal_beads": "–ê–Ω–∞–ª—å–Ω—ã–µ –±—É—Å—ã",
        "anal_plug": "–ê–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–±–∫–∞",
        "anal_expander": "–ê–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—à–∏—Ä–∏—Ç–µ–ª—å",
        "long_dildo_path": "–î–∏–ª–¥–æ –∏–∑ –∞–Ω—É—Å–∞ –≤—ã—Ö–æ–¥–∏—Ç –∏–∑–æ —Ä—Ç–∞",
        "gag": "–ö–ª—è–ø",
        "piercing": "–ü–∏—Ä—Å–∏–Ω–≥"
    },
    "poses": {
        "doggy": "–ù–∞–µ–∑–¥–Ω–∏—Ü–∞ (–¥–æ–≥–≥–∏-—Å—Ç–∞–π–ª)",
        "standing": "–°—Ç–æ—è",
        "splits": "–®–ø–∞–≥–∞—Ç",
        "squat": "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏–µ",
        "lying": "–õ–µ–∂–∞",
        "hor_split": "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç",
        "ver_split": "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç",
        "side_up_leg": "–ù–∞ –±–æ–∫—É —Å –ø–æ–¥–Ω—è—Ç–æ–π –Ω–æ–≥–æ–π",
        "front_facing": "–õ–∏—Ü–æ–º –∫ –∑—Ä–∏—Ç–µ–ª—é",
        "back_facing": "–°–ø–∏–Ω–æ–π –∫ –∑—Ä–∏—Ç–µ–ª—é",
        "lying_knees_up": "–õ–µ–∂–∞ —Å —Ä–∞–∑–¥–≤–∏–Ω—É—Ç—ã–º–∏ —Å–æ–≥–Ω—É—Ç—ã–º–∏ –∫–æ–ª–µ–Ω—è–º–∏",
        "bridge": "–ú–æ—Å—Ç",
        "suspended": "–ü–æ–¥–≤–µ—à–µ–Ω–∞ –Ω–∞ –≤–µ—Ä—ë–≤–∫–∞—Ö"
    },
    "clothes": {
        "stockings": "–ß—É–ª–∫–∏",
        "bikini_tan_lines": "–ó–∞–≥–∞—Ä –æ—Ç –±–∏–∫–∏–Ω–∏",
        "mask": "–ú–∞—Å–∫–∞",
        "heels": "–¢—É—Ñ–ª–∏ –Ω–∞ –∫–∞–±–ª—É–∫–∞—Ö",
        "shibari": "–®–∏–±–∞—Ä–∏",
        "cow_costume": "–ö–æ—Å—Ç—é–º –∫–æ—Ä–æ–≤—ã"
    },
    "body": {
        "big_breasts": "–ë–æ–ª—å—à–∞—è –≥—Ä—É–¥—å",
        "small_breasts": "–ú–∞–ª–µ–Ω—å–∫–∞—è –≥—Ä—É–¥—å",
        "skin_white": "–ë–µ–ª–∞—è –∫–æ–∂–∞",
        "skin_black": "–ß—ë—Ä–Ω–∞—è –∫–æ–∂–∞",
        "body_fat": "–ü—ã—à–Ω–æ–µ —Ç–µ–ª–æ",
        "body_thin": "–•—É–¥–æ–µ —Ç–µ–ª–æ",
        "body_normal": "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ",
        "body_fit": "–ü–æ–¥—Ç—è–Ω—É—Ç–æ–µ —Ç–µ–ª–æ",
        "body_muscular": "–ú—É—Å–∫—É–ª–∏—Å—Ç–æ–µ —Ç–µ–ª–æ",
        "age_loli": "–õ–æ–ª–∏",
        "age_milf": "–ú–∏–ª—Ñ–∞",
        "age_21": "–í–æ–∑—Ä–∞—Å—Ç 21 –≥–æ–¥",
        "cum": "–í—Å—è –≤ —Å–ø–µ—Ä–º–µ",
        "belly_bloat": "–í–∑–¥—É—Ç–∏–µ –∂–∏–≤–æ—Ç–∞ –æ—Ç –∏–≥—Ä—É—à–∫–∏",
        "succubus_tattoo": "–¢–∞—Ç—É —Å–µ—Ä–¥–µ—á–∫–æ –Ω–∞ –º–∞—Ç–∫–µ"
    },
    "ethnos": {
        "futanari": "–§—É—Ç–∞–Ω–∞—Ä–∏",
        "femboy": "–§–µ–º–±–æ–π",
        "ethnicity_asian": "–ê–∑–∏–∞—Ç–∫–∞",
        "ethnicity_european": "–ï–≤—Ä–æ–ø–µ–π–∫–∞"
    },
    "furry": {
        "furry_fox": "–§—É—Ä–∏ –ª–∏—Å–∏—Ü–∞",
        "furry_rabbit": "–§—É—Ä–∏ –∫—Ä–æ–ª–∏–∫",
        "furry_wolf": "–§—É—Ä–∏ –≤–æ–ª—á–∏—Ü–∞",
        "furry_cow": "–§—É—Ä–∏ –∫–æ—Ä–æ–≤–∞",
        "furry_cat": "–§—É—Ä–∏ –∫–æ—à–∫–∞",
        "furry_dog": "–§—É—Ä–∏ —Å–æ–±–∞–∫–∞",
        "furry_dragon": "–§—É—Ä–∏ –¥—Ä–∞–∫–æ–Ω",
        "furry_sylveon": "–§—É—Ä–∏ –°–∏–ª—å–≤–µ–æ–Ω"
    },
    "characters": {
        "rias_gremory": "–†–∏–∞—Å –ì—Ä–µ–º–æ—Ä–∏",
        "akeno_himejima": "–ê–∫–µ–Ω–æ –•–∏–º–µ–¥–∑–∏–º–∞",
        "kafka": "–ö–∞—Ñ–∫–∞ (–•–æ–Ω–∫–∞–π –°—Ç–∞—Ä –†–µ–π–ª)",
        "eula": "–ï–æ–ª–∞ (–ì–µ–Ω—à–∏–Ω)",
        "fu_xuan": "–§—É –°—é–∞–Ω—å",
        "ayase_seiko": "–ê—è—Å–µ –°–µ–π–∫–æ"
    },
    "face": {
        "ahegao": "–ê—Ö–µ–≥–∞–æ",
        "pain_face": "–õ–∏—Ü–æ –≤ –±–æ–ª–∏",
        "ecstasy_face": "–õ–∏—Ü–æ –≤ —ç–∫—Å—Ç–∞–∑–µ",
        "gold_lipstick": "–ó–æ–ª–æ—Ç–∞—è –ø–æ–º–∞–¥–∞"
    }
}

CATEGORY_NAMES = {
    "holes": "–û—Ç–≤–µ—Ä—Å—Ç–∏—è",
    "toys": "–ò–≥—Ä—É—à–∫–∏",
    "poses": "–ü–æ–∑—ã",
    "clothes": "–û–¥–µ–∂–¥–∞",
    "body": "–¢–µ–ª–æ",
    "ethnos": "–≠—Ç–Ω–æ—Å",
    "furry": "–§—É—Ä–∏",
    "characters": "–ü–µ—Ä—Å–æ–Ω–∞–∂–∏",
    "face": "–ì–æ–ª–æ–≤–∞"
}

TAG_PROMPTS = {
    # ... (–≤—Å—Ç–∞–≤—å –≤—Å–µ —Å–≤–æ–∏ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–µ–≥–æ–≤ –∫–∞–∫ —Ä–∞–Ω—å—à–µ)
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É—Å–∏–ª–∏–º —Ç–µ–≥–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:
    "rias_gremory": "–†–∏–∞—Å –ì—Ä–µ–º–æ—Ä–∏ –∏–∑ –î–µ–º–æ–Ω—ã —Å—Ç–∞—Ä—à–µ–π —à–∫–æ–ª—ã, –¥–ª–∏–Ω–Ω—ã–µ –∫—Ä–∞—Å–Ω—ã–µ –≤–æ–ª–æ—Å—ã, –≥–æ–ª—É–±—ã–µ –≥–ª–∞–∑–∞, –±–æ–ª—å—à–∞—è –≥—Ä—É–¥—å, —à–∫–æ–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞",
    "akeno_himejima": "–ê–∫–µ–Ω–æ –•–∏–º–µ–¥–∑–∏–º–∞ –∏–∑ –î–µ–º–æ–Ω—ã —Å—Ç–∞—Ä—à–µ–π —à–∫–æ–ª—ã, –¥–ª–∏–Ω–Ω—ã–µ —á—ë—Ä–Ω—ã–µ –≤–æ–ª–æ—Å—ã, —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–µ –≥–ª–∞–∑–∞, —à–∫–æ–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞, –±–æ–ª—å—à–∞—è –≥—Ä—É–¥—å",
    "kafka": "Kafka from Honkai Star Rail, purple long hair, cyberpunk outfit, red eyes",
    "eula": "Eula from Genshin Impact, blue long hair, pale skin, knight outfit",
    "fu_xuan": "Fu Xuan from Honkai Star Rail, pink hair, Xianzhou-style outfit, confident expression",
    "ayase_seiko": "Ayase Seiko, short black hair, school uniform, slim body",
    "long_dildo_path": "–æ–¥–Ω–æ—Ä–æ–¥–Ω–æ–µ –¥–ª–∏–Ω–Ω–æ–µ –¥–∏–ª–¥–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –∞–Ω—É—Å –∏ –≤—ã—Ö–æ–¥–∏—Ç –∏–∑–æ —Ä—Ç–∞, –¥–∏–ª–¥–æ –æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –∏ —Ç–µ–∫—Å—Ç—É—Ä—ã –±–µ–∑ –ø—Ä–æ—Å–≤–µ—á–∏–≤–∞–Ω–∏—è",
    # –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ ‚Äî –æ—Å—Ç–∞–ª—å–Ω—ã–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
}

def main_menu():
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üß© –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥–∏", callback_data="choose_tags"))
    kb.add(types.InlineKeyboardButton("üé® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="generate"))
    return kb

def category_menu():
    kb = types.InlineKeyboardMarkup(row_width=2)
    for key, name in CATEGORY_NAMES.items():
        kb.add(types.InlineKeyboardButton(name, callback_data=f"cat_{key}"))
    kb.add(types.InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="done_tags"))
    return kb

def tag_menu(category, selected_tags):
    kb = types.InlineKeyboardMarkup(row_width=2)
    for tag_key, tag_name in TAGS[category].items():
        label = f"‚úÖ {tag_name}" if tag_key in selected_tags else tag_name
        kb.add(types.InlineKeyboardButton(label, callback_data=f"tag_{category}_{tag_key}"))
    kb.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_cat"))
    return kb

@bot.message_handler(commands=["start"])
def start(msg):
    cid = msg.chat.id
    user_settings[cid] = {"tags": [], "last_cat": None}
    bot.send_message(cid, "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –¥–µ–ª–∞–µ–º?", reply_markup=main_menu())

@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    cid = call.message.chat.id
    if cid not in user_settings:
        user_settings[cid] = {"tags": [], "last_cat": None}

    data = call.data

    if data == "choose_tags":
        bot.edit_message_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–µ–≥–æ–≤:", cid, call.message.message_id, reply_markup=category_menu())

    elif data.startswith("cat_"):
        cat = data[4:]
        user_settings[cid]["last_cat"] = cat
        selected = user_settings[cid]["tags"]
        bot.edit_message_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {CATEGORY_NAMES[cat]}", cid, call.message.message_id, reply_markup=tag_menu(cat, selected))

    elif data.startswith("tag_"):
        _, cat, tag = data.split("_", 2)
        tags = user_settings[cid]["tags"]
        if tag in tags:
            tags.remove(tag)
        else:
            tags.append(tag)
        bot.edit_message_reply_markup(cid, call.message.message_id, reply_markup=tag_menu(cat, tags))

    elif data == "done_tags":
        bot.edit_message_text("–¢–µ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", cid, call.message.message_id, reply_markup=main_menu())

    elif data == "back_to_cat":
        bot.edit_message_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", cid, call.message.message_id, reply_markup=category_menu())

    elif data == "generate":
        tags = user_settings[cid]["tags"]
        if not tags:
            bot.send_message(cid, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–µ–≥–∏!")
            return
        prompt = build_prompt(tags)
        bot.send_message(cid, "‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        url = replicate_generate(prompt)
        if url:
            kb = types.InlineKeyboardMarkup()
            kb.add(
                types.InlineKeyboardButton("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start"),
                types.InlineKeyboardButton("üîß –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥–∏", callback_data="choose_tags"),
                types.InlineKeyboardButton("‚û° –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —ç—Ç–∏–º–∏ —Ç–µ–≥–∞–º–∏", callback_data="generate")
            )
            bot.send_photo(cid, url, caption="‚úÖ –ì–æ—Ç–æ–≤–æ!", reply_markup=kb)
        else:
            bot.send_message(cid, "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")

    elif data == "start":
        user_settings[cid] = {"tags": [], "last_cat": None}
        bot.send_message(cid, "–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫.", reply_markup=main_menu())

def build_prompt(tags):
    base = "nsfw, masterpiece, ultra detailed, anime style, best quality"
    prompts = [TAG_PROMPTS.get(tag, tag) for tag in tags]
    return base + ", " + ", ".join(prompts)

def replicate_generate(prompt):
    url = "https://api.replicate.com/v1/predictions"
    headers = {
        "Authorization": f"Token {REPLICATE_TOKEN}",
        "Content-Type": "application/json"
    }
    json_data = {
        "version": REPLICATE_MODEL,
        "input": {"prompt": prompt}
    }
    r = requests.post(url, headers=headers, json=json_data)
    if r.status_code != 201:
        return None
    status_url = r.json()["urls"]["get"]

    for _ in range(60):
        time.sleep(2)
        r = requests.get(status_url, headers=headers)
        if r.status_code != 200:
            return None
        data = r.json()
        if data["status"] == "succeeded":
            return data["output"][0] if isinstance(data["output"], list) else data["output"]
        elif data["status"] == "failed":
            return None
    return None

@app.route("/", methods=["POST"])
def webhook():
    bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))])
    return "ok", 200

@app.route("/", methods=["GET"])
def home():
    return "–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç", 200

if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)
    app.run(host="0.0.0.0", port=PORT)