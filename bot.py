import os
import time
import re
import requests
import telebot
from telebot import types
from flask import Flask, request

API_TOKEN = os.getenv("TELEGRAM_TOKEN")
REPLICATE_TOKEN = os.getenv("REPLICATE_API_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://retete.onrender.com")

bot = telebot.TeleBot(API_TOKEN)
app = Flask(__name__)

# –£—Å–∏–ª–∏—Ç–µ–ª–∏ –ø—Ä–æ–º—Ç–æ–≤ (–≤ –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±—É–¥–µ–º –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –≤—ã–±–æ—Ä)
def enhance_nsfw_female(p):
    return p + ", nude, erotic, sensual, solo, young female, seductive, large breasts, soft skin, masterpiece, ultra detailed, NSFW"

def enhance_futanari(p):
    return p + ", futanari, shemale, dickgirl, big breasts, penis, nude, erotic pose, solo, highly detailed, NSFW"

def enhance_femboy(p):
    return p + ", femboy, cute male, feminine face, soft skin, lingerie, erotic, slim waist, NSFW, solo"

def enhance_shibari(p):
    return p + ", shibari, rope bondage, tied up, detailed knots, erotic ropes, submissive pose, NSFW, cinematic"

enhancers_map = {
    "nsfw_female": enhance_nsfw_female,
    "futanari": enhance_futanari,
    "femboy": enhance_femboy,
    "shibari": enhance_shibari
}

# –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø—Ä–æ–º—Ç–∞ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏ –∏ –∫–ª—é—á–∞–º–∏
def expand_prompt_synonyms(text):
    text = text.lower()
    additions = []

    def contains(words):
        for w in words:
            # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–ª–æ–≤–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä
            pattern = r'\b' + re.escape(w) + r'\b'
            if re.search(pattern, text):
                return True
        return False

    # –ê–Ω–∞–ª –∏ –≤—Å–µ —Å–∏–Ω–æ–Ω–∏–º—ã
    if contains(["–∞–Ω–∞–ª—å–Ω—ã–π —Å–µ–∫—Å", "–∞–Ω–∞–ª", "–∞–Ω—É—Å", "–∞–Ω–∞–ª—å–Ω—ã–π", "–∞–Ω–∞–ª—å–Ω–∞—è —Ñ–∏—Å—Ç–∏–Ω–≥", "–∞–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∏–º—É–ª—è—Ü–∏—è", "–∑–∞–¥–Ω–∏—Ü–∞"]):
        additions.append(
            "anal penetration, detailed anus, erotic anal play, butt, rimjob, erotic buttocks, backdoor play, rear entry, explicit anal, uncensored"
        )

    # –î–∏–ª–¥–æ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏
    if contains(["–¥–∏–ª–¥–æ", "–±–æ–ª—å—à–æ–π –¥–∏–ª–¥–æ", "–∫–æ–Ω—Å–∫–∏–π –¥–∏–ª–¥–æ", "–æ–≥—Ä–æ–º–Ω—ã–π –¥–∏–ª–¥–æ", "–≥–∏–≥–∞–Ω—Ç—Å–∫–∏–π –¥–∏–ª–¥–æ", "—Ñ–∞–ª–ª–æ–∏–º–∏—Ç–∞—Ç–æ—Ä", "—Ñ–∞–ª–ª–∏—á–µ—Å–∫–∏–π"]):
        additions.append(
            "large realistic dildo, dildo penetration, rubber dildo, phallic object, detailed dildo, sex toy, dildo insertion, penetrating dildo, explicit toy, uncensored"
        )

    # –ü–æ–∑–∞
    if contains(["—Ä–∞–∫–æ–º", "–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç", "–Ω–∞ –∫–æ—Ä—Ç–æ—á–∫–∞—Ö", "–ø–æ–∑–∞ —Ä–∞–∫–æ–º", "—Å–ø–∏–Ω–æ–π", "—Å—Ç–æ—è", "—Å–∏–¥—è", "–ª–µ–∂–∞", "–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç", "—Å–∏–¥—è –Ω–∞ –∫–æ—Ä—Ç–æ—á–∫–∞—Ö"]):
        additions.append(
            "detailed pose, erotic posture, specific pose, sexy pose, dynamic pose, body position"
        )

    # –í–∏–¥–Ω–æ –∫–∏—Å–∫—É –∏ —Å–∏–Ω–æ–Ω–∏–º—ã
    if contains(["–≤–∏–¥–Ω–æ –∫–∏—Å–∫—É", "–≤–∏–¥–Ω–∞ –∫–∏—Å–∫–∞", "–ø–æ–∫–∞–∑–∞–Ω–∞ –∫–∏—Å–∫–∞", "–æ—Ç–∫—Ä—ã—Ç–∞—è –∫–∏—Å–∫–∞", "–≤–ª–∞–≥–∞–ª–∏—â–µ –≤–∏–¥–Ω–æ", "–≤–∞–≥–∏–Ω–∞", "–≤–∞–≥–∏–Ω–∞ –≤–∏–¥–Ω–∞"]):
        additions.append(
            "visible pussy, open vagina, detailed vulva, exposed pussy, pussy lips, erotic genitalia"
        )

    # –†–∞–∑–º–µ—Ä –≥—Ä—É–¥–∏ –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    if contains(["–±–æ–ª—å—à–∞—è –≥—Ä—É–¥—å", "–æ–≥—Ä–æ–º–Ω–∞—è –≥—Ä—É–¥—å", "–º–∞–ª–µ–Ω—å–∫–∞—è –≥—Ä—É–¥—å", "–º–∞–ª–µ–Ω—å–∫–∏–µ —Å–∏—Å—å–∫–∏", "—Å—Ä–µ–¥–Ω—è—è –≥—Ä—É–¥—å", "–∫—Ä—É–ø–Ω—ã–µ —Å–∏—Å—å–∫–∏", "–ø—ã—à–Ω–∞—è –≥—Ä—É–¥—å"]):
        additions.append(
            "breasts size variation, large breasts, small breasts, realistic breasts, detailed cleavage"
        )

    # –ü–∏—Ä—Å–∏–Ω–≥
    if contains(["–ø–∏—Ä—Å–∏–Ω–≥", "–ø–∏—Ä—Å–∏–Ω–≥ –Ω–∞ –ø–∏–∑–¥–µ", "–ø–∏—Ä—Å–∏–Ω–≥ –Ω–∞ —Å–æ—Å–∫–∞—Ö", "–ø–∏—Ä—Å–∏–Ω–≥ –Ω–∞ –≤–∞–≥–∏–Ω–µ"]):
        additions.append(
            "body piercing, nipple piercing, genital piercing, erotic piercing, detailed piercings"
        )

    # –ß—É–ª–∫–∏ –∏ —Å–∏–Ω–æ–Ω–∏–º—ã
    if contains(["—á—É–ª–∫–∏", "—Å–µ—Ç—á–∞—Ç—ã–µ —á—É–ª–∫–∏", "–∫—Ä—É–∂–µ–≤–Ω—ã–µ —á—É–ª–∫–∏", "—á—É–ª–∫–∏ –¥–æ –±–µ–¥—Ä–∞", "—á—É–ª–∫–∏ –Ω–∞ –Ω–æ–≥–∞—Ö"]):
        additions.append(
            "stockings, lace stockings, fishnet stockings, thigh high stockings, detailed stockings"
        )

    # –ï—Å–ª–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚Äî –≤—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–∏–º NSFW —á—Ç–æ–±—ã —É—Å–∏–ª–∏—Ç—å
    additions.append("nsfw, explicit, uncensored, highly detailed, masterpiece")

    return ", ".join(additions)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ —á–µ—Ä–µ–∑ Replicate
def generate_image(prompt):
    url = "https://api.replicate.com/v1/predictions"
    headers = {
        "Authorization": f"Token {REPLICATE_TOKEN}",
        "Content-Type": "application/json"
    }
    data = {
        "version": "fb4f086702d6a301ca32c170d926239324a7b7b2f0afc3d232a9c4be382dc3fa",
        "input": {"prompt": prompt}
    }
    response = requests.post(url, headers=headers, json=data)
    if response.status_code == 201:
        prediction = response.json()
        return prediction["urls"]["get"], None
    return None, f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {response.status_code} {response.text}"

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å —É—á—ë—Ç–æ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
def generate_custom_image(message, enhancer):
    base_prompt = message.text.strip()
    expansions = expand_prompt_synonyms(base_prompt)
    final_prompt = base_prompt
    if expansions:
        final_prompt += ", " + expansions
    final_prompt = enhancer(final_prompt)

    bot.send_message(message.chat.id, "üîû –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–¥–æ–∂–¥–∏...")

    status_url, error = generate_image(final_prompt)
    if error:
        bot.send_message(message.chat.id, error)
        return

    for _ in range(25):
        res = requests.get(status_url, headers={"Authorization": f"Token {REPLICATE_TOKEN}"})
        if res.status_code != 200:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: {res.status_code} {res.text}")
            return
        status = res.json()
        if status.get("status") == "succeeded":
            img = status["output"][0]
            bot.send_photo(message.chat.id, img)
            send_enhancement_buttons(message.chat.id)
            return
        elif status.get("status") == "failed":
            bot.send_message(message.chat.id, "‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å.")
            return
        time.sleep(2)
    bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞ –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è.")

# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —É—Å–∏–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
def send_enhancement_buttons(chat_id):
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("üéÄ NSFW –¥–ª—è –∂–µ–Ω—â–∏–Ω", callback_data="nsfw_female"),
        types.InlineKeyboardButton("‚ößÔ∏è –§—É—Ç–∞–Ω–∞—Ä–∏", callback_data="futanari")
    )
    markup.row(
        types.InlineKeyboardButton("üßë‚Äçüé§ –§–µ–º–±–æ–π", callback_data="femboy"),
        types.InlineKeyboardButton("ü™¢ –®–∏–±–∞—Ä–∏", callback_data="shibari")
    )
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º —É—Å–∏–ª–µ–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    mode = call.data
    prompt_msg = {
        "nsfw_female": "üìù –û–ø–∏—à–∏ –¥–µ–≤—É—à–∫—É:",
        "futanari": "üìù –û–ø–∏—à–∏ —Ñ—É—Ç–∞–Ω–∞—Ä–∏-—Å—Ü–µ–Ω—É:",
        "femboy": "üìù –û–ø–∏—à–∏ —Ñ–µ–º–±–æ—è:",
        "shibari": "üìù –û–ø–∏—à–∏ —Å—Ü–µ–Ω—É —Å —à–∏–±–∞—Ä–∏:"
    }.get(mode, "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")

    enhancer = enhancers_map.get(mode, lambda p: p)

    msg = bot.send_message(call.message.chat.id, prompt_msg)
    bot.register_next_step_handler(msg, lambda m: generate_custom_image(m, enhancer))

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start(message):
    send_enhancement_buttons(message.chat.id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
@bot.message_handler(func=lambda m: True)
def handle_prompt(message):
    bot.send_message(message.chat.id, "üîÅ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ–±—ã—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ —É—Å–∏–ª–µ–Ω–∏—è...")
    generate_custom_image(message, lambda p: p)

# Flask Webhook
@app.route('/', methods=['POST'])
def webhook():
    update = telebot.types.Update.de_json(request.data.decode("utf-8"))
    bot.process_new_updates([update])
    return '', 200

@app.route('/', methods=['GET'])
def index():
    return 'ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç'

if __name__ == '__main__':
    bot.remove_webhook()
    bot.set_webhook(WEBHOOK_URL)
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))