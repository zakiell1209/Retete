# --- bot.py ---
import os
import time
import requests
import random
from flask import Flask, request
import telebot
from telebot import types

API_TOKEN = os.getenv("TELEGRAM_TOKEN")
REPLICATE_TOKEN = os.getenv("REPLICATE_API_TOKEN")
REPLICATE_MODEL = "057e2276ac5dcd8d1575dc37b131f903df9c10c41aed53d47cd7d4f068c19fa5"
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.environ.get("PORT", 5000))

bot = telebot.TeleBot(API_TOKEN)
app = Flask(__name__)
user_settings = {}

CATEGORY_NAMES = {
    "holes": "–û—Ç–≤–µ—Ä—Å—Ç–∏—è", "toys": "–ò–≥—Ä—É—à–∫–∏", "poses": "–ü–æ–∑—ã", "clothes": "–û–¥–µ–∂–¥–∞",
    "body": "–¢–µ–ª–æ", "ethnos": "–≠—Ç–Ω–æ—Å", "furry": "–§—É—Ä–∏", "characters": "–ü–µ—Ä—Å–æ–Ω–∞–∂–∏",
    "head": "–ì–æ–ª–æ–≤–∞", "view": "–û–±–∑–æ—Ä"
}

TAGS = {
    "holes": {"vagina": "–í–∞–≥–∏–Ω–∞", "anal": "–ê–Ω—É—Å", "both": "–í–∞–≥–∏–Ω–∞ –∏ –∞–Ω—É—Å"},
    "toys": {
        "dildo": "–î–∏–ª–¥–æ", "huge_dildo": "–ë–æ–ª—å—à–æ–µ –¥–∏–ª–¥–æ", "horse_dildo": "–õ–æ—à–∞–¥–∏–Ω–æ–µ –¥–∏–ª–¥–æ",
        "anal_beads": "–ê–Ω–∞–ª—å–Ω—ã–µ –±—É—Å—ã", "anal_plug": "–ê–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–±–∫–∞",
        "anal_expander": "–ê–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—à–∏—Ä–∏—Ç–µ–ª—å", "gag": "–ö–ª—è–ø",
        "piercing": "–ü–∏—Ä—Å–∏–Ω–≥", "long_dildo_path": "–î–∏–ª–¥–æ –∏–∑ –∞–Ω—É—Å–∞ –≤—ã—Ö–æ–¥–∏—Ç –∏–∑–æ —Ä—Ç–∞"
    },
    "poses": {
        "doggy": "–ù–∞–µ–∑–¥–Ω–∏—Ü–∞", "standing": "–°—Ç–æ—è", "splits": "–®–ø–∞–≥–∞—Ç",
        "squat": "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏–µ", "lying": "–õ–µ–∂–∞", "hor_split": "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç",
        "ver_split": "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —à–ø–∞–≥–∞—Ç", "side_up_leg": "–ù–∞ –±–æ–∫—É —Å –Ω–æ–≥–æ–π –≤–≤–µ—Ä—Ö",
        "front_facing": "–õ–∏—Ü–æ–º –∫ –∑—Ä–∏—Ç–µ–ª—é", "back_facing": "–°–ø–∏–Ω–æ–π –∫ –∑—Ä–∏—Ç–µ–ª—é",
        "lying_knees_up": "–õ–µ–∂–∞ —Å –∫–æ–ª–µ–Ω—è–º–∏ –≤–≤–µ—Ä—Ö", "bridge": "–ú–æ—Å—Ç", "suspended": "–ü–æ–¥–≤–µ—à–µ–Ω–∞"
    },
    "clothes": {
        "stockings": "–ß—É–ª–∫–∏", "bikini_tan_lines": "–ó–∞–≥–∞—Ä –æ—Ç –±–∏–∫–∏–Ω–∏", "mask": "–ú–∞—Å–∫–∞",
        "heels": "–ö–∞–±–ª—É–∫–∏", "shibari": "–®–∏–±–∞—Ä–∏"
    },
    "body": {
        "big_breasts": "–ë–æ–ª—å—à–∞—è –≥—Ä—É–¥—å", "small_breasts": "–ú–∞–ª–µ–Ω—å–∫–∞—è –≥—Ä—É–¥—å",
        "skin_white": "–ë–µ–ª–∞—è –∫–æ–∂–∞", "skin_black": "–ß—ë—Ä–Ω–∞—è –∫–æ–∂–∞",
        "body_fat": "–ü—ã—à–Ω–æ–µ —Ç–µ–ª–æ", "body_thin": "–•—É–¥–æ–µ —Ç–µ–ª–æ", "body_normal": "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ç–µ–ª–æ",
        "body_fit": "–ü–æ–¥—Ç—è–Ω—É—Ç–æ–µ —Ç–µ–ª–æ", "body_muscular": "–ú—É—Å–∫—É–ª–∏—Å—Ç–æ–µ —Ç–µ–ª–æ",
        "age_loli": "–õ–æ–ª–∏", "age_milf": "–ú–∏–ª—Ñ–∞", "age_21": "–í–æ–∑—Ä–∞—Å—Ç 21",
        "cum": "–í—Å—è –≤ —Å–ø–µ—Ä–º–µ", "belly_bloat": "–í–∑–¥—É—Ç–∏–µ –∂–∏–≤–æ—Ç–∞",
        "succubus_tattoo": "–¢–∞—Ç—É –≤–Ω–∏–∑—É –∂–∏–≤–æ—Ç–∞"
    },
    "ethnos": {
        "futanari": "–§—É—Ç–∞–Ω–∞—Ä–∏", "femboy": "–§–µ–º–±–æ–π",
        "ethnicity_asian": "–ê–∑–∏–∞—Ç–∫–∞", "ethnicity_european": "–ï–≤—Ä–æ–ø–µ–π–∫–∞"
    },
    "furry": {
        "furry_cow": "–§—É—Ä–∏ –∫–æ—Ä–æ–≤–∞", "furry_cat": "–§—É—Ä–∏ –∫–æ—à–∫–∞", "furry_dog": "–§—É—Ä–∏ —Å–æ–±–∞–∫–∞",
        "furry_dragon": "–§—É—Ä–∏ –¥—Ä–∞–∫–æ–Ω", "furry_sylveon": "–§—É—Ä–∏ —Å–∏–ª—å–≤–µ–æ–Ω",
        "furry_fox": "–§—É—Ä–∏ –ª–∏—Å–∏—Ü–∞", "furry_bunny": "–§—É—Ä–∏ –∫—Ä–æ–ª–∏–∫", "furry_wolf": "–§—É—Ä–∏ –≤–æ–ª—á–∏—Ü–∞"
    },
    "characters": {
        "rias": "–†–∏–∞—Å –ì—Ä–µ–º–æ—Ä–∏", "akeno": "–ê–∫–µ–Ω–æ –•–∏–º–µ–¥–∑–∏–º–∞", "kafka": "–ö–∞—Ñ–∫–∞ (–•–æ–Ω–∫–∞–π)",
        "eula": "–ï–æ–ª–∞ (–ì–µ–Ω—à–∏–Ω)", "fu_xuan": "–§—É –°—é–∞–Ω—å", "ayase": "–ê—è—Å–µ –°–µ–π–∫–æ"
    },
    "head": {
        "ahegao": "–ê—Ö–µ–≥–∞–æ", "pain_face": "–õ–∏—Ü–æ –≤ –±–æ–ª–∏", "ecstasy_face": "–õ–∏—Ü–æ –≤ —ç–∫—Å—Ç–∞–∑–µ",
        "gold_lipstick": "–ó–æ–ª–æ—Ç–∞—è –ø–æ–º–∞–¥–∞"
    },
    "view": {
        "view_bottom": "–°–Ω–∏–∑—É", "view_top": "–°–≤–µ—Ä—Ö—É",
        "view_side": "–°–±–æ–∫—É", "view_close": "–ë–ª–∏–∂–µ", "view_full": "–î–∞–ª—å—à–µ"
    }
}

# üîÅ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ RU –Ω–∞–∑–≤–∞–Ω–∏–π
RU_TO_TAG = {ru.lower(): key for cat in TAGS.values() for key, ru in cat.items()}

@bot.message_handler(func=lambda msg: True, content_types=["text"])
def handle_tag_input(msg):
    cid = msg.chat.id
    tags = []
    for name in msg.text.split(","):
        key = RU_TO_TAG.get(name.strip().lower())
        if key:
            tags.append(key)
    if not tags:
        bot.send_message(cid, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–µ–≥–∞.")
        return
    user_settings[cid] = {"tags": tags, "last_cat": None, "count": 1}
    bot.send_message(cid, "‚úÖ –¢–µ–≥–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.", reply_markup=main_menu())

TAG_PROMPTS = {
    "gold_lipstick": "gold lipstick on lips only",
    "vagina": "spread pussy", "anal": "spread anus", "both": "spread pussy and anus",
    "dildo": "dildo inserted", "huge_dildo": "huge dildo", "horse_dildo": "horse dildo",
    "anal_beads": "anal beads inserted", "anal_plug": "anal plug",
    "anal_expander": "anal expander stretching anus",
    "gag": "ball gag", "piercing": "nipple and genital piercings",
    "long_dildo_path": "dildo inserted into anus, bulging through stomach, exiting mouth",
    "doggy": "doggy style pose", "standing": "standing nude pose",
    "splits": "performing full split", "hor_split": "horizontal side split",
    "ver_split": "vertical front split", "side_up_leg": "on side with leg up",
    "lying_knees_up": "lying with knees bent", "bridge": "bridge pose",
    "suspended": "suspended pose, rope bondage",
    "stockings": "wearing stockings only", "bikini_tan_lines": "bikini tan lines visible",
    "mask": "mask on face", "heels": "black high heels", "shibari": "shibari rope",
    "big_breasts": "big breasts", "small_breasts": "small breasts",
    "skin_white": "white skin", "skin_black": "black skin",
    "body_fat": "curvy body", "body_thin": "thin body", "body_normal": "normal body",
    "body_fit": "fit athletic", "body_muscular": "muscular toned",
    "age_loli": "young girl loli", "age_milf": "mature milf", "age_21": "21 year old",
    "cum": "covered in cum", "belly_bloat": "belly bulge from toy",
    "succubus_tattoo": "succubus tattoo",
    "futanari": "futanari girl with realistic penis and breasts",
    "femboy": "feminine boy", "ethnicity_asian": "asian girl",
    "ethnicity_european": "european girl",
    "furry_cow": "furry cow girl", "furry_cat": "furry cat girl",
    "furry_dog": "furry dog girl", "furry_dragon": "furry dragon girl",
    "furry_sylveon": "furry sylveon", "furry_fox": "furry fox girl",
    "furry_bunny": "furry bunny girl", "furry_wolf": "furry wolf girl",
    "ahegao": "ahegao face", "pain_face": "expression of pain",
    "ecstasy_face": "expression of ecstasy",
    "view_bottom": "from below angle", "view_top": "from above angle",
    "view_side": "side view", "view_close": "close-up", "view_full": "full body"
}

def main_menu():
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üß© –í—ã–±—Ä–∞—Ç—å —Ç–µ–≥–∏", callback_data="choose_tags"))
    kb.add(types.InlineKeyboardButton("üé® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="generate"))
    return kb

def category_menu():
    kb = types.InlineKeyboardMarkup(row_width=2)
    for key, name in CATEGORY_NAMES.items():
        kb.add(types.InlineKeyboardButton(name, callback_data=f"cat_{key}"))
    kb.add(types.InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="done_tags"))
    kb.add(types.InlineKeyboardButton("üì∏ –ö–æ–ª-–≤–æ —Ñ–æ—Ç–æ", callback_data="choose_count"))
    return kb

def count_menu():
    kb = types.InlineKeyboardMarkup(row_width=5)
    for i in range(1, 11):
        kb.add(types.InlineKeyboardButton(str(i), callback_data=f"count_{i}"))
    kb.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_cat"))
    return kb

def tag_menu(category, selected_tags):
    kb = types.InlineKeyboardMarkup(row_width=2)
    for tag_key, tag_name in TAGS[category].items():
        label = f"‚úÖ {tag_name}" if tag_key in selected_tags else tag_name
        kb.add(types.InlineKeyboardButton(label, callback_data=f"tag_{category}_{tag_key}"))
    kb.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_cat"))
    return kb

@bot.message_handler(commands=["start"])
def start(msg):
    cid = msg.chat.id
    user_settings[cid] = {"tags": [], "last_cat": None, "count": 1}
    bot.send_message(cid, "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –¥–µ–ª–∞–µ–º?", reply_markup=main_menu())

@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    cid = call.message.chat.id
    data = call.data
    if cid not in user_settings:
        user_settings[cid] = {"tags": [], "last_cat": None, "count": 1}

    if data == "choose_tags":
        bot.edit_message_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–µ–≥–æ–≤:", cid, call.message.message_id, reply_markup=category_menu())
    elif data.startswith("cat_"):
        cat = data[4:]
        user_settings[cid]["last_cat"] = cat
        bot.edit_message_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {CATEGORY_NAMES[cat]}", cid, call.message.message_id, reply_markup=tag_menu(cat, user_settings[cid]["tags"]))
    elif data.startswith("tag_"):
        _, cat, tag = data.split("_", 2)
        tags = user_settings[cid]["tags"]
        tags.remove(tag) if tag in tags else tags.append(tag)
        bot.edit_message_reply_markup(cid, call.message.message_id, reply_markup=tag_menu(cat, tags))
    elif data == "done_tags":
        bot.edit_message_text("–¢–µ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", cid, call.message.message_id, reply_markup=main_menu())
    elif data == "choose_count":
        bot.edit_message_text("–í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:", cid, call.message.message_id, reply_markup=count_menu())
    elif data.startswith("count_"):
        count = int(data.split("_")[1])
        user_settings[cid]["count"] = count
        bot.edit_message_text(f"‚úÖ –ö–æ–ª-–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {count}", cid, call.message.message_id, reply_markup=main_menu())
    elif data == "generate":
        tags = user_settings[cid]["tags"]
        count = user_settings[cid]["count"]
        if not tags:
            bot.send_message(cid, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–µ–≥–∏.")
            return
        prompt = build_prompt(tags)
        bot.send_message(cid, f"‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
        images = [replicate_generate(prompt) for _ in range(count)]
        images = list(filter(None, images))
        if images:
            media = [types.InputMediaPhoto(url) for url in images]
            bot.send_media_group(cid, media)
        else:
            bot.send_message(cid, "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")

def build_prompt(tags):
    base = (
        "nsfw, masterpiece, best quality, fully nude, female only, "
        "no men, no male, no hands on chest, no covering nipples, no covering pussy, "
        "realistic body, realistic face, coherent body, full body"
    )
    prompts = [TAG_PROMPTS.get(tag, tag) for tag in tags]
    return base + ", " + ", ".join(prompts)

def replicate_generate(prompt):
    url = "https://api.replicate.com/v1/predictions"
    headers = {"Authorization": f"Token {REPLICATE_TOKEN}", "Content-Type": "application/json"}
    json_data = {"version": REPLICATE_MODEL, "input": {"prompt": prompt}}
    r = requests.post(url, headers=headers, json=json_data)
    if r.status_code != 201:
        return None
    status_url = r.json()["urls"]["get"]
    for _ in range(60):
        time.sleep(2)
        r = requests.get(status_url, headers=headers)
        if r.status_code != 200:
            return None
        data = r.json()
        if data["status"] == "succeeded":
            output = data["output"]
            return output[0] if isinstance(output, list) else output
        if data["status"] == "failed":
            return None
    return None

@app.route("/", methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
    bot.process_new_updates([update])
    return "ok", 200

@app.route("/", methods=["GET"])
def home():
    return "–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç", 200

if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)
    app.run(host="0.0.0.0", port=PORT)